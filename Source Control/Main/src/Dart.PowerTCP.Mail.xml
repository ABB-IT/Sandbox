<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dart.PowerTCP.Mail</name>
    </assembly>
    <members>
        <member name="T:Dart.PowerTCP.Mail.ContentType">
            <summary>
				Enumerates values which specify the nature of the data of a MIME part.
			</summary><remarks>
				<p>The content-type value is specified in the format type/subtype.
				For example, if the content type is "image/gif" any agent will be able to tell
				that the data is a "image" of type "gif", and can handle it appropriately.
				An another example, a mail reader may search for a content-type "text/plain"
				for human-readable text that the applicationn can display to the user.</p>
				<p>There are 7 main types defined:</p>
				<div class="tablediv">
					<table cellspacing="0" class="dtTABLE">
						<tr valign="top">
							<th width="50%">Type</th>
							<th width="50%">Description</th>
						</tr>
						<tr valign="top">
							<td width="50%">Application</td>
							<td width="50%">Used for all data that does not fit into the other
							categories. Signifies that the data is to be processed by an application program.</td>
						</tr>
						<tr valign="top">
							<td width="50%">Audio</td>
							<td width="50%">The data is some audio file.</td>
						</tr>
						<tr valign="top">
							<td width="50%">Image</td>
							<td width="50%">Signifies the data is an image, or graphic.</td>
						</tr>
						<tr valign="top">
							<td width="50%">Message</td>
							<td width="50%">The data is a mail message.</td>
						</tr>
						<tr valign="top">
							<td width="50%">Multipart</td>
							<td width="50%">The data consists of multiple parts, which each may have any content-type in this table.</td>
						</tr>
						<tr valign="top">
							<td width="50%">Text</td>
							<td width="50%">The data is some form of textual data.</td>
						</tr>
					</table>
				</div>
			</remarks>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ContentType.AutoDetect">
            <summary>
				Automatically sets the content-type to the default type for this type of data.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ContentType.None">
            <summary>
				Sets content-type. If using this value, content-encoding must also be none.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ContentType.TextPlain">
            <summary>
				Sets content-type to "text/plain". Specifies that the data is human-readable text.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ContentType.ApplicationMSWord">
            <summary>
				Sets content-type to "application/msword". Specifies that the data is a Microsoft Word document.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ContentType.AudioMicrosoftWav">
            <summary>
				Sets content-type to "audio/microsoft-wav". Specifies that the data is a wav audio file.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ContentType.ApplicationMicrosoftGroup">
            <summary>
				Sets content-type to "application/microsoft-group".
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ContentType.ApplicationZip">
            <summary>
				Sets content-type to "application/zip". Specifies that the data is zip encoded.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ContentType.ApplicationPdf">
            <summary>
				Sets content-type to "application/pdf". Specifies that the data is an Adobe Portable Document Format file.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ContentType.ApplicationPostscript">
            <summary>
				Sets content-type to "application/postscript". Specifies that the data is an Adobe PostScript file.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ContentType.ImageJpeg">
            <summary>
				Sets content-type to "image/jpeg". Specifies that the data is an image of JPEG format.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ContentType.ImageGif">
            <summary>
				Sets content-type to "image/gif". Specifies that the data is an image of GIF format.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ContentType.ImageTiff">
            <summary>
				Sets content-type to "image/tiff". Specifies that the data is an imahe of TIFF format.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ContentType.VideoMpeg">
            <summary>
				Sets content-type to "video/mpeg". Specifies that the data is video in MPEG format.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ContentType.VideoQuicktime">
            <summary>
				Sets content-type to "video/quicktime". Specifies that the data is video in QuickTime format.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ContentType.TextHtml">
            <summary>
				Sets content-type to "text/html". Specifies that the data is HTML.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ContentType.ApplicationMacBinhex40">
            <summary>
				Sets content-type to "application/mac-binhex40". Specifies that the data is encoded with the BinHex encoding scheme.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ContentType.ApplicationWordperfect51">
            <summary>
				Sets content-type to "application/wordperfect5.1". Specifies that the data is a Microsoft Wordperfect file.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ContentType.Audiovndqcelp">
            <summary>
				Sets content-type to "audio/vnd.qcelp". Specifies that the data is voice audio format.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ContentType.ApplicationVndmsExcell">
            <summary>
				Sets content-type to "application/vnd.ms-excel". Specifies that the data is a Microsoft Excel file.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ContentType.ApplicationVndmsPowerpoint">
            <summary>
				Sets content-type to "application/vnd.ms-powerpoint". Specifies that the data is a Microsoft PowerPoint file.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ContentType.ApplicationXgzip">
            <summary>
				Sets content-type to "application/x-gzip". Specifies that the data is gzip encoded.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ContentType.ApplicationXMSDownload">
            <summary>
				Sets content-type to "application/x-msdownload". Causes a browser to show "Save As" box on a download.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ContentType.MessageRfc822">
            <summary>
				Sets content-type to "rfc822". Specifies that the data is an RFC 822 message.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ContentType.MultipartRelated">
            <!-- No matching elements were found for the following include tag --><include file="MailMasterDocs.xml" path="doc/members/member[@name=&quot;ContentType.MultipartRelated&quot;]/*"/>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ContentType.TextXml">
            <summary>
				Sets content-type to "text/xml". Specifies that the data is XML.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ContentType.TextCss">
            <summary>
				Sets content-type to "text/css". Specifies that the data is a cascading style sheet.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ContentType.MultiPartAlternative">
            <summary>
				Sets content-type to "multipart/alternative". Often used to sent multiple types when the receiver's capabilities are not known.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ContentType.MultiPartMixed">
            <summary>
				Sets content-type to "multipart/mixed". Specifies that the data is an unrelated, unstructured set of objects.
			</summary><summary>
				Sets content-type to "multipart/mixed". Specifies that the data is an unrelated, unstructured set of objects.
			</summary>
        </member>
        <member name="T:Dart.PowerTCP.Mail.ContentEncoding">
            <summary>Enumerates the encoding algorithm that is used on the data.</summary><remarks><p>The SMTP protocol was designed to handle only 7-bit data. Eventually,
			the protocol was extended to support 8-bit data as well by the use of MIME. This
			enumeration specifies the encoding algorithm that is used to transform the data from
			8-bit data to 7-bit data. Mail readers use this information to decode the received (encoded) data into it's original (decoded) form.
			</p>
			<p>This enumeration is typically used to specify the encoding type used by a <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> that inherits from CodingStream, accessable through the CodingStream.MimeEncoding property.
			When a <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> that inherits from CodingStream is created the default value of the CodingStream.MimeEncoding property depends on the type of <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> being created. For example:</p>
			<ul>
			<li>An AttachmentStream represents a non-MIME attachment. AttachmentStream.MimeEncoding defaults to ContentEncoding.Uuencode.</li>
			<li>A MimeAttachmentStream represents a MIME attachment. MimeAttachmentStream.MimeEncoding defaults to ContentEncoding.Base64.</li>
			<li>A MessagePartStream represents simple MIME parts (such as MIME text). MessagePartStream.MimeEncoding defaults to ContentEncoding.QuotedPrintable.</li>
			</ul>
			<p>SevenBit,EightBit, and Binary encodings are all raw 8-bit encodings, so there is no conversion.</p>
			</remarks>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ContentEncoding.SevenBit">
            <summary>
				Adds "Content-Transfer-Encoding: 7bit" header line.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ContentEncoding.EightBit">
            <summary>
				Adds "Content-Transfer-Encoding: 8bit" header line.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ContentEncoding.Binary">
            <summary>
				Adds "Content-Transfer-Encoding: Binary" header line.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ContentEncoding.QuotedPrintable">
            <summary>
				Quoted-Printable encoding.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ContentEncoding.Base64">
            <summary>
				Base64 encoding.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ContentEncoding.Uuencode">
            <summary>
				UUEncode ("UNIX to UNIX") encoding.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ContentEncoding.Yencode">
            <summary>
				Yencode encoding.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ContentEncoding.None">
            <summary>
				No encoding.
			</summary>
        </member>
        <member name="T:Dart.PowerTCP.Mail.CodingStream">
            <summary>
				Used to read/write encoded information.
			</summary><remarks>
				<p>CodingStream is used to read and write encoded information. It can also be initialized with unencoded information.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.CodingStream.Close">
            <summary>
				Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream.
			</summary>
        </member>
        <member name="M:Dart.PowerTCP.Mail.CodingStream.#ctor(System.IO.Stream)">
            <summary>
				Initializes a new CodingStream with the data contained in <i>decodedStream</i>.
			</summary><param name="decodedStream">A <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> containing decoded data.</param><remarks>
				<p>When this constructor is used, CodingStream.MimeEncoding defaults to ContentEncoding.Base64.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.CodingStream.#ctor(System.IO.Stream,Dart.PowerTCP.Mail.ContentEncoding)">
            <summary>
				Initializes a new CodingStream with the data contained in <i>decodedStream</i>.
			</summary><param name="decodedStream">A <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> containing decoded data.</param><param name="encoding">The ContentEncoding type to use.</param>
        </member>
        <member name="M:Dart.PowerTCP.Mail.CodingStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
				Reads at least one byte of data from the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> and copies it into the provided buffer. 
			</summary><param name="buffer">The storage location for the received data.</param><param name="offset">The zero-based position in the buffer at which to store the received data.</param><param name="count">The maximum number of bytes to read.</param><returns>
				The total number of bytes read into the buffer.
			</returns><exception cref="T:System.IO.IOException">Thrown when the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> is not readable.</exception><exception cref="T:System.ArgumentNullException">Thrown when the buffer or callback is null.</exception><exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is less than zero or when count is less than or equal to zero.</exception><exception cref="T:System.ArgumentException">Thrown when the (offset + count) &gt; buffer.Length.</exception><remarks>
				<p>This method reads the bytes from the Stream to <i>buffer</i>, starting from the 
				position specified by <i>offset</i> and reading the number of bytes specified by <i>count</i>.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.CodingStream.Read(System.Byte[])">
            <summary>
				Reads at least one byte of data from the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> and copies it into the provided buffer. 
			</summary><param name="buffer">The storage location for the received data.</param><returns>
				The total number of bytes read into the buffer.
			</returns><exception cref="T:System.IO.IOException">Thrown when the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> is not readable.</exception><exception cref="T:System.ArgumentNullException">Thrown when the buffer or callback is null.</exception><remarks>
				<p>This is a convenience method for all derived classes, calling Read(buffer,0, buffer.Length) on the stream.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.CodingStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
				Writes a sequence of bytes to the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> and returns when the operation is complete.
			</summary><param name="buffer">The storage location for the written data.</param><param name="offset">The zero-based position in the buffer from which to begin writing from.</param><param name="count">The exact number of bytes to write.</param><exception cref="T:System.IO.IOException">Thrown when the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> is not writable.</exception><exception cref="T:System.ArgumentNullException">Thrown when the buffer is null.</exception><exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is less than zero or when count is less than or equal to zero.</exception><exception cref="T:System.ArgumentException">Thrown when the (offset + count) &gt; buffer.Length.</exception><remarks>
				<p>This method writes bytes contained in <i>buffer</i> to the Stream, starting from the 
				position specified by <i>offset</i> and writing the number of bytes specified by <i>count</i>.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.CodingStream.Write(System.Byte[])">
            <summary>
				Writes a sequence of bytes to the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> and returns when the operation is complete.
			</summary><param name="buffer">The source location of the data to write.</param><exception cref="T:System.IO.IOException">Thrown when the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> is not writable.</exception><exception cref="T:System.ArgumentNullException">Thrown when the buffer is null.</exception><exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is less than zero or when count is less than or equal to zero.</exception><exception cref="T:System.ArgumentException">Thrown when the (offset + count) &gt; buffer.Length.</exception><remarks>
				<p>This method is a convenience overload for all derived classes by writing the entire buffer to the Stream. This method calls Write(buffer, 0, buffer.length).</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.CodingStream.Flush">
            <summary>
				Updates the underlying data source or repository with the current state of the 
				buffer and then clears the buffer. 
			</summary><exception cref="T:System.IO.IOException">An I/O error occurs.</exception><exception cref="T:System.ObjectDisposedException">The <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> is closed.</exception><remarks>
				<p>If the Stream contains any internal Streams as members, this method will also cause the Flush method of all
					internal Streams.
				</p>
				<p>
				This method MUST be called when writing is complete for operations to operate properly. One example is when creating a message 
				comprised of only headers. If Flush is not called, the headers will be lost.
				</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.CodingStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
				Sets the position within the current <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> to the specified value. Always throws a NotSupportedException.
			</summary><param name="offset">The new position within the stream</param><param name="origin">A value of type SeekOrigin, which acts as the seek reference point.</param><exception cref="T:System.NotSupportedException">Always thrown by this method.</exception><remarks>
				This method is not supported, and always throws a NotSupportedException.
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.CodingStream.SetLength(System.Int64)">
            <summary>
				Sets the length of the current <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> to the specified value. Always throws a NotSupportedException.
			</summary><param name="value">The value at which to set the length.</param><exception cref="T:System.NotSupportedException">Always thrown by this method.</exception><remarks>
				This method is not supported, and always throws a NotSupportedException.
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.CodingStream.QPEncode(System.Byte[],System.Int32,System.IO.MemoryStream)">
            <summary>
            Buffers up 3 bytes at a time for submission to QPEncode3. The 2 following bytes are required to know
            what to do with the first one.
            </summary>
            <param name="inBuffer"></param>
            <param name="count"></param>
            <param name="output"></param>
        </member>
        <member name="M:Dart.PowerTCP.Mail.CodingStream.QPEncode3(System.Byte[],System.Int32,System.IO.MemoryStream)">
            <summary>
            Process 3 bytes...return number of bytes processed
            </summary>
            <param name="inBuffer"></param>
            <param name="offset"></param>
            <param name="output"></param>
        </member>
        <member name="P:Dart.PowerTCP.Mail.CodingStream.MimeEncoding">
            <summary>
				Gets or sets the type of MIME encoding used to encode the data contained within the Stream.
			</summary><value>
				A ContentEncoding Type specifying the type of encoding used to encode the data contained within the Stream.
			</value><remarks>
				<p>Specifies the encoding algorithm that was used to create the encoded MIME
				part. Mail readers use this information to decode the received (encoded)
				data into it's original (decoded) form.</p>
				<p>The default value of this property depends on the type of <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> being created. For
				example:</p>
				<ul>
					<li>An AttachmentStream represents a non-MIME attachment. AttachmentStream.MimeEncoding defaults to ContentEncoding.Uuencode.</li>
					<li>A MimeAttachmentStream represents a MIME attachment. MimeAttachmentStream.MimeEncoding defaults to ContentEncoding.Base64.</li>
					<li>A MessagePartStream represents simple MIME parts (such as MIME text). MessagePartStream.MimeEncoding defaults to ContentEncoding.QuotedPrintable.</li>
				</ul>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.CodingStream.ContentEncoding">
            <summary>
				Gets or sets the type of MIME content-encoding used to encode the data contained within the Stream.
			</summary><value>
				A ContentEncoding Type specifying the type of encoding used to encode the data contained within the Stream.
			</value><remarks>
				<p>Specifies the encoding algorithm that was used to create the encoded MIME
				part. Mail readers use this information to decode the received (encoded)
				data into it's original (decoded) form.</p>
				<p>The default value of this property depends on the type of <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> being created. For
				example:</p>
				<ul>
					<li>An AttachmentStream represents a non-MIME attachment. AttachmentStream.MimeEncoding defaults to ContentEncoding.Uuencode.</li>
					<li>A MimeAttachmentStream represents a MIME attachment. MimeAttachmentStream.MimeEncoding defaults to ContentEncoding.Base64.</li>
					<li>A MessagePartStream represents simple MIME parts (such as MIME text). MessagePartStream.MimeEncoding defaults to ContentEncoding.QuotedPrintable.</li>
				</ul>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.CodingStream.CanSeek">
            <summary>
				Gets a value indicating whether the current <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> supports seeking.
			</summary><value>
				This property always returns false;
			</value><remarks>
				Streams used by PowerTCP do not support seeking. This property always returns false.
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.CodingStream.CanRead">
            <summary>	
				Gets a value indicating whether the current <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> supports reading.
			</summary><value>
				true if reading is currently allowed, and false if not.
			</value><remarks>
				<p>If Position &lt; Length, this property returns true to indicate bytes are
			available to be read, otherwise false.</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.CodingStream.CanWrite">
            <summary>
				Gets a value indicating whether the current <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> supports writing.
			</summary><value>
				true if the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> supports writing; false otherwise;
			</value><remarks>
				<p>If Position = Length, this property returns true to indicate bytes can be
				written, otherwise false.</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.CodingStream.Length">
            <summary>The length of the stream</summary><remarks>
				<p>This value represents the number in bytes of the length of the stream.</p>
			</remarks><summary>
				Gets the length in bytes of the stream.
			</summary><value>
				A long value representing the length of the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> in bytes.
			</value><remarks>
				<p>If the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> is a CodingStream or a <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> derived from CodingStream, 
				this property is
				an estimate and should not be considered accurate. 
				When using a MessageStream, MessageStream.Length cannot be depended on to be completely accurate once an object is set by the user.  It is only precise during write operations.
				With all other 
				PowerTCP Streams this number should be accurate.</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.CodingStream.Position">
            <summary>
				Gets or sets the current position of this stream.
			</summary><value>
				The current position of this stream.
			</value><remarks>
				<p>If the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> is a CodingStream or a MessageStream or a <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> derived
				from CodingStream or MessageStream, this property can only be set to 0. Setting
				the property to any other value results in a NotSupportedException.</p>
			</remarks><exception cref="T:System.NotSupportedException">The <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> does not support setting the Position to any value except 0.</exception>
        </member>
        <member name="T:Dart.PowerTCP.Sockets.ResourceRecord">
            <summary>
            Parse a resource record and make it available through properties
            </summary>
        </member>
        <member name="T:Dart.PowerTCP.Sockets.DnsEventHandler">
            <summary>
				Represents the method (event handler) that is raised when the Dns.BeginGetHost or Dns.BeginGetMailHosts method completes.
			</summary><param name="sender">The source of the event.</param><param name="e">A DnsEventArgs object that contains the event data.</param><remarks>
				<p>As Microsoft describes in their MSDN documentation, the event model in the .NET Framework is based on having an event delegate that connects an event with its handler. To raise an event, two elements are needed: 
				<ul type="disc">
						<li>A class that holds the event data. This class must derive from the base class <a href="ms-help://MS.MSDNVS/cpref/html/frlrfsystemeventargsclasstopic.htm">EventArgs</a>.</li>
						<li>A delegate that points to a method that provides the response to the event.</li>
					</ul>
				</p>
				<p>For more information about event handler delegates, see the Using Events In PowerTCP topic.</p>
			</remarks>
        </member>
        <member name="T:Dart.PowerTCP.Sockets.DnsEventArgs">
            <summary>
			Provides data for any event that marks the completion of asynchronous host name, IP address, or mail address resolution.
			</summary><remarks>
				<p>A <b>DnsEventArgs</b> object is passed as a parameter to all events that mark the completion of asynchronous host name, IP address, or mail address resolution. 
			If a host name or IP address was resolved using Dns.BeginGetHost, the DnsEventArgs.Host property would contain a System.Net.IPHostEntry object
			containing data about the resolved host name/IP address. If an email address was resolved using Dns.BeginGetMailHosts, the DnsEventArgs.Hosts property
			woule contain an array of System.Net.IPHostEntry objects each containing data about the resolved email address.
			</p>
				<p>If your code causes an exception, it would be returned to the handling
			event without you seeing it. To preclude such a condition, you should ALWAYS
			use a try/
			catch block around your event-handling code.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the Dns control to asynchronously resolve a domain name.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub AsynchResolveTest()
   Dns1.Server = "206.64.128.5"
   Dns1.BeginGetHost("www.dart.com", Nothing)
End Sub

Private Sub Dns1_EndGetHost(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureFtp.DnsEventArgs) Handles Dns1.EndGetHost
   ' Check for any exceptions that occurred
   If e.Exception Is Nothing Then
      DisplayResult(e.Host)
   End If
End Sub

Private Sub DisplayResult(ByVal result As System.Net.IPHostEntry)
   ' Display host name
   Debug.WriteLine("Host name: " + result.HostName)

   ' Display addresses, if any
   Dim add As System.Net.IPAddress
   For Each add In result.AddressList
      Debug.WriteLine("Address: " + add.ToString())
   Next

   ' Display aliases, if any
   Dim s As String
   For Each s In result.Aliases
      Debug.WriteLine("Aliases: " + s)
   Next
End Sub
<span class="lang">[C#]</span> 
private void AsynchResolveTest()
{
   dns1.Server = "206.64.128.5";
   dns1.BeginGetHost("www.dart.com", null);
}

private void dns1_EndGetHost(object sender, Dart.PowerTCP.SecureFtp.DnsEventArgs e)
{
   // Check for any exceptions that occurred
   if(e.Exception == null)
   {
      DisplayResult(e.Host);
   }
}

private void DisplayResult(System.Net.IPHostEntry result)
{
   // Display host name
   Debug.WriteLine("Host name: " + result.HostName);

   // Display addresses, if any
   foreach(System.Net.IPAddress add in result.AddressList)
      Debug.WriteLine("Address: " + add.ToString());

   // Display aliases, if any
   foreach(string s in result.Aliases)
      Debug.WriteLine("Aliases: " + s);
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Sockets.DnsEventArgs.Host">
            <summary>
				Gets the IPHostEntry object representing the resolved host name or IP address.
			</summary><value>
				A System.Net.IPHostEntry object representing the host name or IP address.
			</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the Dns control to asynchronously resolve a domain name.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub AsynchResolveTest()
   Dns1.Server = "206.64.128.5"
   Dns1.BeginGetHost("www.dart.com", Nothing)
End Sub

Private Sub Dns1_EndGetHost(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureFtp.DnsEventArgs) Handles Dns1.EndGetHost
   ' Check for any exceptions that occurred
   If e.Exception Is Nothing Then
      DisplayResult(e.Host)
   End If
End Sub

Private Sub DisplayResult(ByVal result As System.Net.IPHostEntry)
   ' Display host name
   Debug.WriteLine("Host name: " + result.HostName)

   ' Display addresses, if any
   Dim add As System.Net.IPAddress
   For Each add In result.AddressList
      Debug.WriteLine("Address: " + add.ToString())
   Next

   ' Display aliases, if any
   Dim s As String
   For Each s In result.Aliases
      Debug.WriteLine("Aliases: " + s)
   Next
End Sub
<span class="lang">[C#]</span> 
private void AsynchResolveTest()
{
   dns1.Server = "206.64.128.5";
   dns1.BeginGetHost("www.dart.com", null);
}

private void dns1_EndGetHost(object sender, Dart.PowerTCP.SecureFtp.DnsEventArgs e)
{
   // Check for any exceptions that occurred
   if(e.Exception == null)
   {
      DisplayResult(e.Host);
   }
}

private void DisplayResult(System.Net.IPHostEntry result)
{
   // Display host name
   Debug.WriteLine("Host name: " + result.HostName);

   // Display addresses, if any
   foreach(System.Net.IPAddress add in result.AddressList)
      Debug.WriteLine("Address: " + add.ToString());

   // Display aliases, if any
   foreach(string s in result.Aliases)
      Debug.WriteLine("Aliases: " + s);
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Sockets.DnsEventArgs.Hosts">
            <summary>
				Gets an array of IPHostEntry objects representing the mail server(s) responsible for receiving mail for a given email address.
			</summary><remarks>
				<p>
				Iterate through this collection to get information on each mail server.
				</p>
			</remarks><value>
				An array of System.Net.IPHostEntry object representing the mail server(s).
			</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the Dns control to asynchronously resolve a domain name.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub AsynchResolveTest()
   Dns1.Server = "206.64.128.5"
   Dns1.BeginGetHost("www.dart.com", Nothing)
End Sub

Private Sub Dns1_EndGetHost(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureFtp.DnsEventArgs) Handles Dns1.EndGetHost
   ' Check for any exceptions that occurred
   If e.Exception Is Nothing Then
      DisplayResult(e.Host)
   End If
End Sub

Private Sub DisplayResult(ByVal result As System.Net.IPHostEntry)
   ' Display host name
   Debug.WriteLine("Host name: " + result.HostName)

   ' Display addresses, if any
   Dim add As System.Net.IPAddress
   For Each add In result.AddressList
      Debug.WriteLine("Address: " + add.ToString())
   Next

   ' Display aliases, if any
   Dim s As String
   For Each s In result.Aliases
      Debug.WriteLine("Aliases: " + s)
   Next
End Sub
<span class="lang">[C#]</span> 
private void AsynchResolveTest()
{
   dns1.Server = "206.64.128.5";
   dns1.BeginGetHost("www.dart.com", null);
}

private void dns1_EndGetHost(object sender, Dart.PowerTCP.SecureFtp.DnsEventArgs e)
{
   // Check for any exceptions that occurred
   if(e.Exception == null)
   {
      DisplayResult(e.Host);
   }
}

private void DisplayResult(System.Net.IPHostEntry result)
{
   // Display host name
   Debug.WriteLine("Host name: " + result.HostName);

   // Display addresses, if any
   foreach(System.Net.IPAddress add in result.AddressList)
      Debug.WriteLine("Address: " + add.ToString());

   // Display aliases, if any
   foreach(string s in result.Aliases)
      Debug.WriteLine("Aliases: " + s);
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Sockets.DnsEventArgs.State">
            <summary>
				Gets the object that was included as part of the associated method call. 
			</summary><remarks>
				<p>The EndEventArgs.State property can be used in the calling asynchronous method to make data accessible
				to the handling event.</p>
				<p>This property is useful for making data accessible to the handling event. Since asynchronous methods are "disconnected" (meaning that when one is called, it executes on it's own and returns in the event handler) data that you were using in the code that called the asynchronous method may not be available in the event handler. Simply pass this data in as <i>state</i> when calling the asynchronous method (usually a BeginXXX method) and it is available in the event handler.
				If you do not wish to make an object accessible in the EndXXX event, simple pass in null as <i>state</i>.</p>
			</remarks><value>
				An object containing data passed into the calling asynchronous method.
			</value>
        </member>
        <member name="P:Dart.PowerTCP.Sockets.DnsEventArgs.Exception">
            <summary>
				Gets any exception which occurred during the asynchronous operation.
			</summary><remarks>
				<p>Check this property to tell if an exception occurred during the asynchronous operation. If this property is null, no exception occurred.</p>
				<p>The exception property is useful for checking exceptions and handling them appropriately. For example, if a bad command was sent to the server, a ProtocolException may be thrown. You could check this property to see if it was of type ProtocolException, than handle appropriately.</p>
			</remarks><value>
				If any exception occurred during the asynchronous operation, this property will contain an Exception object describing the exception.
			</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the Dns control to asynchronously resolve a domain name.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub AsynchResolveTest()
   Dns1.Server = "206.64.128.5"
   Dns1.BeginGetHost("www.dart.com", Nothing)
End Sub

Private Sub Dns1_EndGetHost(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureFtp.DnsEventArgs) Handles Dns1.EndGetHost
   ' Check for any exceptions that occurred
   If e.Exception Is Nothing Then
      DisplayResult(e.Host)
   End If
End Sub

Private Sub DisplayResult(ByVal result As System.Net.IPHostEntry)
   ' Display host name
   Debug.WriteLine("Host name: " + result.HostName)

   ' Display addresses, if any
   Dim add As System.Net.IPAddress
   For Each add In result.AddressList
      Debug.WriteLine("Address: " + add.ToString())
   Next

   ' Display aliases, if any
   Dim s As String
   For Each s In result.Aliases
      Debug.WriteLine("Aliases: " + s)
   Next
End Sub
<span class="lang">[C#]</span> 
private void AsynchResolveTest()
{
   dns1.Server = "206.64.128.5";
   dns1.BeginGetHost("www.dart.com", null);
}

private void dns1_EndGetHost(object sender, Dart.PowerTCP.SecureFtp.DnsEventArgs e)
{
   // Check for any exceptions that occurred
   if(e.Exception == null)
   {
      DisplayResult(e.Host);
   }
}

private void DisplayResult(System.Net.IPHostEntry result)
{
   // Display host name
   Debug.WriteLine("Host name: " + result.HostName);

   // Display addresses, if any
   foreach(System.Net.IPAddress add in result.AddressList)
      Debug.WriteLine("Address: " + add.ToString());

   // Display aliases, if any
   foreach(string s in result.Aliases)
      Debug.WriteLine("Aliases: " + s);
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="T:Dart.PowerTCP.Sockets.Dns">
            <summary>
				Provides domain name resolution.
			</summary><remarks>
				<p>The Domain Name System (DNS) uses servers distributed across the Internet to 
				provide domain name/IP address translation and electronic mail routing information.
				</p>
				<p>The Dns class provides forward lookup (resolve a name to an address), reverse lookup
				(resolve an address to a name), and MX lookup (resolve an email address to the mail server address responsible for that mail 
				domain). Synchronous and asynchronous use is fully supported.
				</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the Dns control to resolve a domain name.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub ResolveTest()
   Dns1.Server = "206.64.128.5"
   Dim result As System.Net.IPHostEntry = Dns1.GetHost("www.dart.com")
   DisplayResult(result)
End Sub

Private Sub DisplayResult(ByVal result As System.Net.IPHostEntry)
   ' Display host name
   Debug.WriteLine("Host name: " + result.HostName)

   ' Display addresses, if any
   Dim add As System.Net.IPAddress
   For Each add In result.AddressList
      Debug.WriteLine("Address: " + add.ToString())
   Next

   ' Display aliases, if any
   Dim s As String
   For Each s In result.Aliases
      Debug.WriteLine("Aliases: " + s)
   Next
End Sub
<span class="lang">[C#]</span> 
private void ResolveTest()
{
   dns1.Server = "206.64.128.5";
   System.Net.IPHostEntry result = dns1.GetHost("www.dart.com");
   DisplayResult(result);
}

private void DisplayResult(System.Net.IPHostEntry result)
{
   // Display host name
   Debug.WriteLine("Host name: " + result.HostName);

   // Display addresses, if any
   foreach(System.Net.IPAddress add in result.AddressList)
      Debug.WriteLine("Address: " + add.ToString());

   // Display aliases, if any
   foreach(string s in result.Aliases)
      Debug.WriteLine("Aliases: " + s);
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="F:Dart.PowerTCP.Sockets.Dns.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Dart.PowerTCP.Sockets.Dns.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the Dns class.
            </summary><param name="container">The IContainer which contains the object.</param><remarks>
				<p>Use this constructor to add the Dns component to the IContainer container.</p>
				<p>To create an instance of the Dns component using Visual Studio.NET, simply add the Dns component to the form and the object will automatically be created and initialized. If working out of the Visual Studio.NET environment (or using the Dns component as a reference), the Dns component will have to be explicitly created and initialized.</p>
				<p>The following table shows initial property values for an instance of Dns.</p>
				<div class="tablediv">
					<table cellspacing="0" class="dtTABLE">
						<tr valign="top">
							<th width="50%">Property</th>
							<th width="50%">Initial Value</th>
						</tr>
						<tr valign="top">
							<td width="50%"> Dns.Client </td>
							<td width="50%"> Empty string </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Dns.ClientPort </td>
							<td width="50%"> 0 </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Dns.DoEvents </td>
							<td width="50%"> true </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Dns.Server </td>
							<td width="50%"> Empty string </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Dns.ServerPort </td>
							<td width="50%"> 53 </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Dns.Timeout </td>
							<td width="50%"> 3000 </td>
						</tr>
					</table>
				</div>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Sockets.Dns.#ctor">
            <summary>
            Initializes a new instance of the Dns class.
            </summary><remarks>
				<p>Use this constructor to create a default instance of the Dns class.</p>
				<p>To create an instance of the Dns component using Visual Studio.NET, simply add the Dns component to the form and the object will automatically be created and initialized. If working out of the Visual Studio.NET environment (or using the Dns component as a reference), the Dns component will have to be explicitly created and initialized.</p>
				<p>The following table shows initial property values for an instance of Dns.</p>
				<div class="tablediv">
					<table cellspacing="0" class="dtTABLE">
						<tr valign="top">
							<th width="50%">Property</th>
							<th width="50%">Initial Value</th>
						</tr>
						<tr valign="top">
							<td width="50%"> Dns.Client </td>
							<td width="50%"> Empty string </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Dns.ClientPort </td>
							<td width="50%"> 0 </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Dns.DoEvents </td>
							<td width="50%"> true </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Dns.Server </td>
							<td width="50%"> Empty string </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Dns.ServerPort </td>
							<td width="50%"> 53 </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Dns.Timeout </td>
							<td width="50%"> 3000 </td>
						</tr>
					</table>
				</div>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Sockets.Dns.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Dart.PowerTCP.Sockets.Dns.Dispose(System.Boolean)">
            <summary>
			Releases all resources associated with the object.
			</summary><remarks>
				<p>The Object.Dispose method abruptly aborts the connection and releases all resources.</p>
				<p>Object.Dispose should ONLY be used to release all resources used by the
object, and the object should not be used subsequently. If an abort is
desired, then Object.Close or Object.Connection.Close if available should be used to terminate
activity and reset the object. The Object cannot be used once Object.Dispose() or Object.Dispose(true) are called.
</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Sockets.Dns.Abort">
            <summary>
			Stops the name resolve operation.
			</summary><remarks>
				<p>If the Dns component is actively resolving a domian name or email address, this method
				stops the operation.
				</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Sockets.Dns.BeginGetMailHosts(System.String,System.Object)">
            <summary>
				Asynchronously get the mail server (or servers) responsible for receiving mail for a given email address.
			</summary><remarks>
				<p>This method asynchronously gets the mail server for the provided domain or email address. When the lookup completes,
				the Dns.EndGetMailHosts event is raised. Made available in this event is a DnsEventArgs which describes
				the response from the DNS server.
				The result of the query may include multiple mail servers. If more than one is found, the most preferred server is first in the list and the least preferred is at the end of the list.</p>
				<p>The Dns.GetMailHosts method may return an empty collection. This could mean one of the following:
				<ul>
						<li>The host does not have any mail exchanger (MX) or address (A) records in the DNS.</li>
						<li>The host has valid MX records, but none of the mail exchangers listed have valid A records.</li>
						<li>There was a transient error with the DNS that caused one of the above to appear to be true.</li>
					</ul>
				</p>
				<p>To resolve a host name or a dot address asynchronously, use Dns.BeginGetHost. To resolve an email address syncronously, 
				use Dns.GetMailHosts.
				</p>
			</remarks><param name="mailAddress">The email address to resolve.</param><param name="state">User state information.</param><exception cref="T:System.Net.Sockets.SocketException">No DNS server was specified.</exception><exception cref="T:System.InvalidOperationException">BeginXXX method used without providing an EndXXX event handler.</exception><returns>An IAsyncResult that represents the asynchronous operation, which could still be pending.</returns>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates asynchronously resolving an email address.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub AsynchResolveTest()
   Dns1.Server = "206.64.128.5"
   Dns1.BeginGetMailHosts("gates@microsoft.com", Nothing)
End Sub

Private Sub Dns1_EndGetMailHosts(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureFtp.DnsEventArgs) Handles Dns1.EndGetMailHosts
   ' Check for any exceptions that occurred
   If e.Exception Is Nothing Then
      ' Iterate through all IPHostEntry objects
      Dim result As System.Net.IPHostEntry
      For Each result In e.Hosts
         DisplayResult(result)
      Next
   End If
End Sub

Private Sub DisplayResult(ByVal result As System.Net.IPHostEntry)
   ' Display host name
   Debug.WriteLine("Host name: " + result.HostName)

   ' Display addresses, if any
   Dim add As System.Net.IPAddress
   For Each add In result.AddressList
      Debug.WriteLine("Address: " + add.ToString())
   Next

   ' Display aliases, if any
   Dim s As String
   For Each s In result.Aliases
      Debug.WriteLine("Aliases: " + s)
   Next
End Sub
<span class="lang">[C#]</span> 
private void AsynchResolveTest()
{
   dns1.Server = "206.64.128.5";
   dns1.BeginGetMailHosts("gates@microsoft.com", null);
}

private void dns1_EndGetMailHosts(object sender, Dart.PowerTCP.SecureFtp.DnsEventArgs e)
{
   // Check for any exceptions that occurred
   if(e.Exception == null)
   {
      // Iterate through all IPHostEntry objects
      foreach(System.Net.IPHostEntry result in e.Hosts)
         DisplayResult(result);
   }
}

private void DisplayResult(System.Net.IPHostEntry result)
{
   // Display host name
   Debug.WriteLine("Host name: " + result.HostName);

   // Display addresses, if any
   foreach(System.Net.IPAddress add in result.AddressList)
      Debug.WriteLine("Address: " + add.ToString());

   // Display aliases, if any
   foreach(string s in result.Aliases)
      Debug.WriteLine("Aliases: " + s);
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Sockets.Dns.BeginGetHost(System.String,System.Object)">
            <summary>
				Asynchronously resolve a host name to a dot address or a dot address to a host name.
			</summary><remarks>
				<p>This method provides both asynchronous forward lookup (resolve a host name to an address) and 
				asynchronous reverse lookup (resolve an address to a host name). When the lookup completes, the 
				Dns.EndGetHost event is raised. Made available in this event is a DnsEventArgs which describes
				the respose from the DNS server.
				</p>
				<p>When <I>host</I> is a DNS-style host name associated with multiple IP 
				addresses, only the first IP address that resolves to that host name is 
				returned.</p>
				<p>To resolve an email address asynchronously, use Dns.BeginGetMailHosts. 
               To resolve a host name or a dot address synchronously, use Dns.GetHost.
				</p>
			</remarks><param name="host">The host name to resolve.</param><param name="state">User state information.</param><exception cref="T:System.Net.Sockets.SocketException">No DNS server was specified.</exception><exception cref="T:System.InvalidOperationException">BeginXXX method used without providing an EndXXX event handler.</exception><returns>An IAsyncResult that represents the asynchronous operation, which could still be pending.</returns>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the Dns control to asynchronously resolve a domain name.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub AsynchResolveTest()
   Dns1.Server = "206.64.128.5"
   Dns1.BeginGetHost("www.dart.com", Nothing)
End Sub

Private Sub Dns1_EndGetHost(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureFtp.DnsEventArgs) Handles Dns1.EndGetHost
   ' Check for any exceptions that occurred
   If e.Exception Is Nothing Then
      DisplayResult(e.Host)
   End If
End Sub

Private Sub DisplayResult(ByVal result As System.Net.IPHostEntry)
   ' Display host name
   Debug.WriteLine("Host name: " + result.HostName)

   ' Display addresses, if any
   Dim add As System.Net.IPAddress
   For Each add In result.AddressList
      Debug.WriteLine("Address: " + add.ToString())
   Next

   ' Display aliases, if any
   Dim s As String
   For Each s In result.Aliases
      Debug.WriteLine("Aliases: " + s)
   Next
End Sub
<span class="lang">[C#]</span> 
private void AsynchResolveTest()
{
   dns1.Server = "206.64.128.5";
   dns1.BeginGetHost("www.dart.com", null);
}

private void dns1_EndGetHost(object sender, Dart.PowerTCP.SecureFtp.DnsEventArgs e)
{
   // Check for any exceptions that occurred
   if(e.Exception == null)
   {
      DisplayResult(e.Host);
   }
}

private void DisplayResult(System.Net.IPHostEntry result)
{
   // Display host name
   Debug.WriteLine("Host name: " + result.HostName);

   // Display addresses, if any
   foreach(System.Net.IPAddress add in result.AddressList)
      Debug.WriteLine("Address: " + add.ToString());

   // Display aliases, if any
   foreach(string s in result.Aliases)
      Debug.WriteLine("Aliases: " + s);
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Sockets.Dns.GetMailHosts(System.String)">
            <summary>
				Get the mail server (or servers) responsible for receiving mail for a given email address.
			</summary><remarks>
				<p>This method returns the mail server for the provided domain or email address. The result of the query may include multiple mail servers. If more than one is found, the most preferred server is first in the list and the least preferred is at the end of the list.</p>
				<p>The Dns.GetMailHosts method may return an empty collection. This could mean one of the following:
				<ul>
						<li>The host does not have any mail exchanger (MX) or address (A) records in the DNS.</li>
						<li>The host has valid MX records, but none of the mail exchangers listed have valid A records.</li>
						<li>There was a transient error with the DNS that caused one of the above to appear to be true.</li>
					</ul>
				</p>
				<p>To resolve a host name or a dot address, use Dns.GetHost. To resolve an email address asyncronously, 
				use Dns.BeginGetMailHosts.
				</p>
			</remarks><returns>
				An array of System.Net.IPHostEntry object representing the mail server(s) responsible for receiving mail for a given email address.
			</returns><param name="mailAddress">The email address to resolve.</param><exception cref="T:System.Net.Sockets.SocketException">No DNS server was specified.</exception>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates resolving an email address.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub ResolveTest()
   Dns1.Server = "206.64.128.5"
   Dim results = Dns1.GetMailHosts("gates@microsoft.com")

   'Iterate through all IPHostEntry objects
   Dim result As System.Net.IPHostEntry
   For Each result In results
      DisplayResult(result)
   Next
End Sub

Private Sub DisplayResult(ByVal result As System.Net.IPHostEntry)
   ' Display host name
   Debug.WriteLine("Host name: " + result.HostName)

   ' Display addresses, if any
   Dim add As System.Net.IPAddress
   For Each add In result.AddressList
      Debug.WriteLine("Address: " + add.ToString())
   Next

   ' Display aliases, if any
   Dim s As String
   For Each s In result.Aliases
      Debug.WriteLine("Aliases: " + s)
   Next
End Sub
<span class="lang">[C#]</span> 
private void ResolveTest()
{
   dns1.Server = "206.64.128.5";
   System.Net.IPHostEntry[] results = dns1.GetMailHosts("gates@microsoft.com");
			
   // Iterate through all IPHostEntry objects
   foreach(System.Net.IPHostEntry result in results)
      DisplayResult(result);
}

private void DisplayResult(System.Net.IPHostEntry result)
{
   // Display host name
   Debug.WriteLine("Host name: " + result.HostName);

   // Display addresses, if any
   foreach(System.Net.IPAddress add in result.AddressList)
      Debug.WriteLine("Address: " + add.ToString());

   // Display aliases, if any
   foreach(string s in result.Aliases)
      Debug.WriteLine("Aliases: " + s);
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Sockets.Dns.GetHost(System.String)">
            <summary>
				Resolve a host name to a dot address or a dot address to a host name.
			</summary><remarks>
				<p>This method provides both forward lookup (resolve a host name to an address) and reverse lookup
				(resolve an address to a host name). </p>
				<p>When <I>host</I> is a DNS-style host name associated with multiple IP 
				addresses, only the first IP address that resolves to that host name is 
				returned.</p>
				<p>To resolve an email address, use Dns.GetMailHosts. To resolve a host name or 
				a dot address asynchronously, use Dns.BeginGetHost.
				</p>
			</remarks><returns>
				A System.Net.IPHostEntry object representing the host address.
			</returns><param name="host">The host name or dot address to resolve.</param><exception cref="T:System.Net.Sockets.SocketException">No DNS server was specified.</exception>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the Dns control to resolve a domain name.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub ResolveTest()
   Dns1.Server = "206.64.128.5"
   Dim result As System.Net.IPHostEntry = Dns1.GetHost("www.dart.com")
   DisplayResult(result)
End Sub

Private Sub DisplayResult(ByVal result As System.Net.IPHostEntry)
   ' Display host name
   Debug.WriteLine("Host name: " + result.HostName)

   ' Display addresses, if any
   Dim add As System.Net.IPAddress
   For Each add In result.AddressList
      Debug.WriteLine("Address: " + add.ToString())
   Next

   ' Display aliases, if any
   Dim s As String
   For Each s In result.Aliases
      Debug.WriteLine("Aliases: " + s)
   Next
End Sub
<span class="lang">[C#]</span> 
private void ResolveTest()
{
   dns1.Server = "206.64.128.5";
   System.Net.IPHostEntry result = dns1.GetHost("www.dart.com");
   DisplayResult(result);
}

private void DisplayResult(System.Net.IPHostEntry result)
{
   // Display host name
   Debug.WriteLine("Host name: " + result.HostName);

   // Display addresses, if any
   foreach(System.Net.IPAddress add in result.AddressList)
      Debug.WriteLine("Address: " + add.ToString());

   // Display aliases, if any
   foreach(string s in result.Aliases)
      Debug.WriteLine("Aliases: " + s);
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="E:Dart.PowerTCP.Sockets.Dns.EndGetMailHosts">
            <summary>
            Raised when the Dns.BeginGetMailHosts request completes.
            </summary><remarks>
				<p>This event is raised when the asynchronous method call Dns.BeginGetMailHosts completes. A DnsEventArgs object is passed into the event, containing information such as the resolved mail server responsible for the email address.</p>
				<p>If any errors occurred during the asynchronous operation, they would be returned in the DnsEventArgs object, check DnsEventArgs.Exception to check for any exception.</p>
				<p>For more information on using events using PowerTCP.NET within the Visual Studio.NET environment, see the topic, Using Events In PowerTCP.</p>
				<p>If you are using the Dns component as a reference, you must create a method to handle the event yourself.</p>
				<p>This event MUST be implemented if you are using the Dns.BeginGetHost method.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates asynchronously resolving an email address.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub AsynchResolveTest()
   Dns1.Server = "206.64.128.5"
   Dns1.BeginGetMailHosts("gates@microsoft.com", Nothing)
End Sub

Private Sub Dns1_EndGetMailHosts(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureFtp.DnsEventArgs) Handles Dns1.EndGetMailHosts
   ' Check for any exceptions that occurred
   If e.Exception Is Nothing Then
      ' Iterate through all IPHostEntry objects
      Dim result As System.Net.IPHostEntry
      For Each result In e.Hosts
         DisplayResult(result)
      Next
   End If
End Sub

Private Sub DisplayResult(ByVal result As System.Net.IPHostEntry)
   ' Display host name
   Debug.WriteLine("Host name: " + result.HostName)

   ' Display addresses, if any
   Dim add As System.Net.IPAddress
   For Each add In result.AddressList
      Debug.WriteLine("Address: " + add.ToString())
   Next

   ' Display aliases, if any
   Dim s As String
   For Each s In result.Aliases
      Debug.WriteLine("Aliases: " + s)
   Next
End Sub
<span class="lang">[C#]</span> 
private void AsynchResolveTest()
{
   dns1.Server = "206.64.128.5";
   dns1.BeginGetMailHosts("gates@microsoft.com", null);
}

private void dns1_EndGetMailHosts(object sender, Dart.PowerTCP.SecureFtp.DnsEventArgs e)
{
   // Check for any exceptions that occurred
   if(e.Exception == null)
   {
      // Iterate through all IPHostEntry objects
      foreach(System.Net.IPHostEntry result in e.Hosts)
         DisplayResult(result);
   }
}

private void DisplayResult(System.Net.IPHostEntry result)
{
   // Display host name
   Debug.WriteLine("Host name: " + result.HostName);

   // Display addresses, if any
   foreach(System.Net.IPAddress add in result.AddressList)
      Debug.WriteLine("Address: " + add.ToString());

   // Display aliases, if any
   foreach(string s in result.Aliases)
      Debug.WriteLine("Aliases: " + s);
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="E:Dart.PowerTCP.Sockets.Dns.EndGetHost">
            <summary>
            Raised when the Dns.BeginGetHost request completes.
            </summary><remarks>
				<p>This event is raised when the asynchronous method call Dns.BeginGetHost completes. A DnsEventArgs object is passed into the event, containing information such as the resolved name or addresses.</p>
				<p>If any errors occurred during the asynchronous operation, they would be returned in the DnsEventArgs object, check DnsEventArgs.Exception to check for any exception.</p>
				<p>For more information on using events using PowerTCP.NET within the Visual Studio.NET environment, see the topic, Using Events In PowerTCP.</p>
				<p>If you are using the Dns component as a reference, you must create a method to handle the event yourself.</p>
				<p>This event MUST be implemented if you are using the Dns.BeginGetHost method.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the Dns control to asynchronously resolve a domain name.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub AsynchResolveTest()
   Dns1.Server = "206.64.128.5"
   Dns1.BeginGetHost("www.dart.com", Nothing)
End Sub

Private Sub Dns1_EndGetHost(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureFtp.DnsEventArgs) Handles Dns1.EndGetHost
   ' Check for any exceptions that occurred
   If e.Exception Is Nothing Then
      DisplayResult(e.Host)
   End If
End Sub

Private Sub DisplayResult(ByVal result As System.Net.IPHostEntry)
   ' Display host name
   Debug.WriteLine("Host name: " + result.HostName)

   ' Display addresses, if any
   Dim add As System.Net.IPAddress
   For Each add In result.AddressList
      Debug.WriteLine("Address: " + add.ToString())
   Next

   ' Display aliases, if any
   Dim s As String
   For Each s In result.Aliases
      Debug.WriteLine("Aliases: " + s)
   Next
End Sub
<span class="lang">[C#]</span> 
private void AsynchResolveTest()
{
   dns1.Server = "206.64.128.5";
   dns1.BeginGetHost("www.dart.com", null);
}

private void dns1_EndGetHost(object sender, Dart.PowerTCP.SecureFtp.DnsEventArgs e)
{
   // Check for any exceptions that occurred
   if(e.Exception == null)
   {
      DisplayResult(e.Host);
   }
}

private void DisplayResult(System.Net.IPHostEntry result)
{
   // Display host name
   Debug.WriteLine("Host name: " + result.HostName);

   // Display addresses, if any
   foreach(System.Net.IPAddress add in result.AddressList)
      Debug.WriteLine("Address: " + add.ToString());

   // Display aliases, if any
   foreach(string s in result.Aliases)
      Debug.WriteLine("Aliases: " + s);
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="E:Dart.PowerTCP.Sockets.Dns.Trace">
            <summary>
            Raised when data has been sent/received.
            </summary><remarks>
				<p>This event is raised when commands or data has been sent/received. If you are using a component which uses TCP as the
				transport protocol a SegmentEventArgs object is passed into the event containing any commands or data sent or received.
				If you are using a component which uses UDP as the transport protocol a DatagramEventArgs object is passed into the event containing any commands
				or data sent or received.</p>
				<p>The Object.RawTrace event always reports actual data sent/received over the socket. The Count
				of each segment reflects the number of bytes actually written and received.
				The Object.Trace event reports data sent/received at a higher level. For example, for the
				Telnet component, Object.Trace reports data sent/received, but does not report
				IAC option sequences that are processed by TelnetStream, whereas Object.RawTrace
				allows you to trace the actual data sent/received, including Telnet option
				commands.
				</p>
				<p>If you are using the PowerTCP component as a reference, you must create a method to handle the event yourself. For more information on using events using PowerTCP.NET within the Visual Studio.NET environment, see Using Events In PowerTCP.</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Sockets.Dns.Client">
            <summary>
			Gets or sets the client hostname or address when a specific interface binding is desired. 
			</summary><value>
			A string representing a host name or dot address.
			</value><remarks>
				<P>If the local host has multiply interfaces, set this property to either a dot address ("111.111.111.111") or a hostname 
			(which is resolved by DNS), specifying the local interface to use.</P>
				<P>Normally, the default interface binding is chosen. Use this property to 
			override the default behavior, which is to bind to the first (default) 
			adapter.</P>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Sockets.Dns.ClientPort">
            <summary>
			Gets or sets a string used to restrict the local data port to a value or range of values.
			</summary><value>
			A string representing the local port or range of local ports to which communication is
			 restricted. A "0" indicates that any port can be used. The default is "0". 
			</value><remarks>
				<p>Set this property if for 
some reason the client machine is limited in the ports that can be used. 
This is often the case in intranet environments where client 
are restricted or behind a firewall for security purposes.</p>
				<p>The default value, "0", indicates that any port may be used. When set to a 
single value, such as "20", only that port is used. When set to a range of 
values, such as "1024:1028", successive ports in this range are tried until 
one can be opened.</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Sockets.Dns.DoEvents">
            <summary>
				  Gets or sets a value that controls the processing of events during blocking method calls.
			</summary><remarks>
				<p>When performing a synchronous (blocking) method, PowerTCP will process user-interface events (such as window painting)
            if this property is set to true AND the current thread has an event message queue.
            If no message queue is present (such as on an ASP page or under any worker thread), the value of this property has no effect.
            This property is used only for synchronous methods. Object.DoEvents is not needed if using asynchronous methods because the asynchronous method will execute on a different thread, allowing the UI thread to continue working unblocked.</p>
				<p>For example, this property is beneficial when an interactive application is being used and the user may want to abort a currently processing operation by clicking an "Abort" button.
			If Object.DoEvents is set to false, this will not be possible.
			Set the Object.DoEvents property to true and the application will respond to other events (such as button clicks) during synchronous operations.
			</p>
			</remarks><value>
				true if user-interface events should be processed during synchronous method calls; otherwise, false. The default value is true.
			</value>
        </member>
        <member name="P:Dart.PowerTCP.Sockets.Dns.Server">
            <summary>
				Gets or sets the DNS server hostname or address.
			</summary><value>
				A string representing the DNS server to use for resolving.
			</value><remarks>
				<p>Used to identify the DNS resource by either hostname (that is resolved by DNS) or dot address (of the form 11.22.33.44). The object always checks this property, so you can change it at any time and subsequent method calls will automatically communicate with the correct server.</p>
				<p>This property must be set before attempting to resolve a hostname or email address.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the Dns control to resolve a domain name.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub ResolveTest()
   Dns1.Server = "206.64.128.5"
   Dim result As System.Net.IPHostEntry = Dns1.GetHost("www.dart.com")
   DisplayResult(result)
End Sub

Private Sub DisplayResult(ByVal result As System.Net.IPHostEntry)
   ' Display host name
   Debug.WriteLine("Host name: " + result.HostName)

   ' Display addresses, if any
   Dim add As System.Net.IPAddress
   For Each add In result.AddressList
      Debug.WriteLine("Address: " + add.ToString())
   Next

   ' Display aliases, if any
   Dim s As String
   For Each s In result.Aliases
      Debug.WriteLine("Aliases: " + s)
   Next
End Sub
<span class="lang">[C#]</span> 
private void ResolveTest()
{
   dns1.Server = "206.64.128.5";
   System.Net.IPHostEntry result = dns1.GetHost("www.dart.com");
   DisplayResult(result);
}

private void DisplayResult(System.Net.IPHostEntry result)
{
   // Display host name
   Debug.WriteLine("Host name: " + result.HostName);

   // Display addresses, if any
   foreach(System.Net.IPAddress add in result.AddressList)
      Debug.WriteLine("Address: " + add.ToString());

   // Display aliases, if any
   foreach(string s in result.Aliases)
      Debug.WriteLine("Aliases: " + s);
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Sockets.Dns.ServerPort">
            <summary>
				Gets or sets the port to use for communicating with the DNS server.
			</summary><value>
				An integer value representing the port of the DNS resource to use for communication. Defaults to 53.
			</value><remarks>
				<p>Used to identify the DNS resource port, which is the "well-known" port 53 by convention. The object always checks this property, so you can change it at any time and subsequent method calls will automatically communicate with the correct port.</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Sockets.Dns.SynchronizingObject">
            <summary>Set this object to automatically control thread marshalling between worker threads and the main UI thread.</summary><value>
				If used, the main UI thread object; null if unused.
			</value><remarks>
				<p>Any application that (1) uses multithreading (for example, an application which uses an asynchronous BeginXXX method)
				and (2) must update a shared UI element on the main UI thread (such as a ListView object) from one of these worker threads must set this
				property to the value of the main UI thread object. If the application meets both of these requirements and
				this property is NOT set, you may see strange behavior in your application (such as strange exceptions or improper UI element values).</p>
				<p>If you do not know whether or not you need to use this property, simply take the failsafe
				approach when programming Windows applications and always set this property to the Main Form object.
				If any thread marshalling has to occur between a worker thread and the UI thread, it will occur automatically.</p>
				<p>Provides data for the CollectionChanged event.


					<b>NOTE for server implementations:</b> If you are using a PowerTCP server component to build a server application, you
				do not want to set this property (as it will cause the server application to become single-threaded). Instead, you want to use
				the Control.BeginInvoke method to thread-marshall to the main UI thread (see any of the installed sample server applications for an example of this).</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Sockets.Dns.Timeout">
            <summary>
				Specifies the maximum number of milliseconds to wait for responses to commands or time between data buffer transfers.
			</summary><remarks>
				<p>After connecting to a server, this value is used to establish the period of time to wait for
			server responses. During data transfer operations, a <a href="ms-help://MS.MSDNVS/cpref/html/frlrfSystemNetSocketsSocketExceptionClassTopic.htm">SocketException</a> will
			be thrown if any data buffer transfer
			operation does not complete within the timeout period.</p>
			</remarks><value>
				 An integer specifying the maximum number of milliseconds to wait for responses to commands.
			</value>
        </member>
        <member name="T:Dart.PowerTCP.Mail.EnhancedStream">
            <summary>Adds new methods on top of the Stream interface for type conversion, stream copying, and saving.</summary><remarks>
				<p>
					Inherit from this abstract class to create a Stream class with enhanced methods. For example,
					EnhancedStream.Save allows you to save Stream data directly to a file. EnhancedStream.ToString
					returns a string representation of the data contained within the Stream.
				</p>
				<p>
					All PowerTCP Stream classes (such as SegmentedStream, PipeStream) inherit from this class
					to provide the enhanced capabilities described above to these classes.
				</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.EnhancedStream.#ctor">
            <summary>Create a new instance of an EnhancedStream type.</summary><remarks><p>This constructor creates the Stream with the default character set.</p></remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.EnhancedStream.#ctor(System.Text.Encoding)">
            <summary>Create a new instance of an EnhancedStream type.</summary><remarks><p>This constructor creates the stream and sets the encoding type to the type specified by <i>encoding</i>.</p>
			</remarks><param name="encoding">The encoding type to use.</param>
        </member>
        <member name="M:Dart.PowerTCP.Mail.EnhancedStream.Dispose">
            <summary>
			Releases all resources associated with the object.
			</summary><remarks>
				<p>The Object.Dispose method abruptly aborts the connection and releases all resources.</p>
				<p>Object.Dispose should ONLY be used to release all resources used by the
object, and the object should not be used subsequently. If an abort is
desired, then Object.Close or Object.Connection.Close if available should be used to terminate
activity and reset the object. The Object cannot be used once Object.Dispose() or Object.Dispose(true) are called.
</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.EnhancedStream.Dispose(System.Boolean)">
            <summary>
			Releases all resources associated with the object.
			</summary><remarks>
				<p>The Object.Dispose method abruptly aborts the connection and releases all resources.</p>
				<p>Object.Dispose should ONLY be used to release all resources used by the
object, and the object should not be used subsequently. If an abort is
desired, then Object.Close or Object.Connection.Close if available should be used to terminate
activity and reset the object. The Object cannot be used once Object.Dispose() or Object.Dispose(true) are called.
</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.EnhancedStream.Flush">
            <summary>
            Default implementation is no-op. May be overriden by derived classes
            </summary>
        </member>
        <member name="M:Dart.PowerTCP.Mail.EnhancedStream.Read(System.Byte[])">
            <summary>
				Reads at least one byte of data from the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> and copies it into the provided buffer. 
			</summary><param name="buffer">The storage location for the received data.</param><returns>
				The total number of bytes read into the buffer.
			</returns><exception cref="T:System.IO.IOException">Thrown when the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> is not readable.</exception><exception cref="T:System.ArgumentNullException">Thrown when the buffer or callback is null.</exception><remarks>
				<p>This is a convenience method for all derived classes, calling Read(buffer,0, buffer.Length) on the stream.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.EnhancedStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
				Sets the position within the current <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> to the specified value. Always throws a NotSupportedException.
			</summary><param name="offset">The new position within the stream</param><param name="origin">A value of type SeekOrigin, which acts as the seek reference point.</param><exception cref="T:System.NotSupportedException">Always thrown by this method.</exception><remarks>
				This method is not supported, and always throws a NotSupportedException.
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.EnhancedStream.SetLength(System.Int64)">
            <summary>
				Sets the length of the current <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> to the specified value. Always throws a NotSupportedException.
			</summary><param name="value">The value at which to set the length.</param><exception cref="T:System.NotSupportedException">Always thrown by this method.</exception><remarks>
				This method is not supported, and always throws a NotSupportedException.
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.EnhancedStream.Write(System.Byte[])">
            <summary>
				Writes a sequence of bytes to the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> and returns when the operation is complete.
			</summary><param name="buffer">The source location of the data to write.</param><exception cref="T:System.IO.IOException">Thrown when the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> is not writable.</exception><exception cref="T:System.ArgumentNullException">Thrown when the buffer is null.</exception><exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is less than zero or when count is less than or equal to zero.</exception><exception cref="T:System.ArgumentException">Thrown when the (offset + count) &gt; buffer.Length.</exception><remarks>
				<p>This method is a convenience overload for all derived classes by writing the entire buffer to the Stream. This method calls Write(buffer, 0, buffer.length).</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.EnhancedStream.WriteTo(System.IO.Stream)">
            <summary>Writes all of the data contained in this Stream to a destination Stream.</summary><remarks>
				<p>This method essentially "copies" one stream to another by setting the <i>destination</i> Stream position to zero, 
				writing all of the data in the source Stream to the <i>destination</i>, resetting the source Stream back to 
				its original position, and resetting the <i>destination</i> to a position of zero.</p>
			</remarks><param name="destination">The destination stream.</param><exception cref="T:System.NullReferenceException"><i>destination</i> is null.</exception><exception cref="T:System.IO.IOException">Stream is not readable or writeable.</exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.EnhancedStream.WriteTo(System.IO.Stream,System.Boolean)">
            <summary>Writes all of the data contained in this Stream to a destination Stream.</summary><remarks>
				<p>If <i>resetPositions</i> is true, this method essentially "copies" one stream to another by setting the <i>destination</i> Stream position to zero, 
				writing all of the data in the source Stream to the <i>destination</i>, resetting the source Stream back to 
				its original position, and resetting the <i>destination</i> to a position of zero.</p>
				<p>If <i>resetPositions</i> is false, it copies from the current location of the source Stream to the current location of <i>destination</i>, and positions are not set.</p>	
			</remarks><param name="destination">The destination stream.</param><param name="resetPosition">Controls whether or not the positions of the source and destination streams are reset during the "copy" process.</param><exception cref="T:System.NullReferenceException"><i>destination</i> is null.</exception><exception cref="T:System.IO.IOException">Stream is not readable or writeable.</exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.EnhancedStream.Save(System.String)">
            <summary>Saves the data in the stream to the file specified by <i>fileName</i>.</summary><remarks>
				<p>This method saves all of the data in the stream to the file specified by <i>fileName</i>.
					This method will always create a new file, creating a unique filename if
					the file already exists.
				</p>
			</remarks><returns>A string containing the name of the file the data was written to.</returns><param name="fileName">The desired name of the destination file.</param>
        </member>
        <member name="M:Dart.PowerTCP.Mail.EnhancedStream.Save(System.String,System.Boolean)">
            <summary>Saves the data in the stream to the file specified by <i>fileName</i>.</summary><remarks>
				<p>This method saves all of the data in the stream to the file specified by <i>fileName</i>.
					If <i>overwrite</i> is true, this method will create 
					a new file if the specified file does not exist and will overwrite the specified file if it does exist. 
					If <i>overwrite</i> is false, this method will always create a new file, creating a unique filename if
					the file already exists.
				</p>
			</remarks><returns>A string containing the name of the file the data was written to.</returns><param name="fileName">The desired name of the destination file.</param><param name="overwrite">Controls whether or not to overwrite existing files.</param>
        </member>
        <member name="M:Dart.PowerTCP.Mail.EnhancedStream.ToArray">
            <summary>Returns the byte array representation of the Stream data.</summary><remarks>
				<p>Use this method to easily return the data in the stream as a byte array.
				Position should be reset after calling this method.</p>
			</remarks><returns>	
				The byte array representation of the Stream data.
			</returns>
        </member>
        <member name="M:Dart.PowerTCP.Mail.EnhancedStream.ToString">
            <summary>Returns the string representation of the Stream data.</summary><remarks>
				<p>This method returns the string representation the data contained in
				the stream, based on the EnhancedStream.Charset.</p>
			</remarks><returns>
				The string representation of the Stream data.
			</returns>
        </member>
        <member name="P:Dart.PowerTCP.Mail.EnhancedStream.CanRead">
            <summary>
				Gets a value indicating whether the current stream supports reading.
			</summary><remarks>
				This property returns true unless overridden in a derived class.
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.EnhancedStream.CanSeek">
            <summary>
				Gets a value indicating whether the current stream supports seeking.
			</summary><remarks>
				This property always returns false.
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.EnhancedStream.CanWrite">
            <summary>
				Gets a value indicating whether the current stream supports writing.
			</summary><remarks>
				This property returns true unless overridden in a derived class.
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.EnhancedStream.Charset">
            <summary>
				Gets and sets the character set used for string/byte array conversions.
			</summary><value>
				A string representing the character set used.
			</value><remarks>
				<p>This value defaults to the language used on the runtime machine (accessible through
				System.Text.Encoding.Default.BodyName). Set this property
				to the desired character set string to override this behavior.
				An example charset for Kanji is "ISO-2022-JP", while standard ASCII is: "ISO-8859-1".
				</p>
				<p>When communicating with clients from other countries set this property based on the standard string defined for the language intended.
				This enables the International client to be able to properly decode the data.
				</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.EnhancedStream.Encoding">
            <summary>Gets or sets the type of encoding to use.</summary>
        </member>
        <member name="P:Dart.PowerTCP.Mail.EnhancedStream.Length">
            <summary>
            The length of data available on the stream. This method always throws a <a href="ms-help://MS.MSDNVS/cpref/html/frlrfsystemnotsupportedexceptionclasstopic.htm">NotSupportedException</a>.
            </summary>
            <exception cref="M:System.NotSupportedException.#ctor">Always throws this exception.</exception>
            <returns>A long value representing the length of the stream in bytes.</returns>
        </member>
        <member name="P:Dart.PowerTCP.Mail.EnhancedStream.Position">
            <summary>
            Gets or sets the position in the stream.
            This method always throws a <a href="ms-help://MS.MSDNVS/cpref/html/frlrfsystemnotsupportedexceptionclasstopic.htm">NotSupportedException</a>.
            </summary>
            <exception cref="M:System.NotSupportedException.#ctor">Always throws this exception.</exception>
            <returns>The current position within the stream.</returns>
        </member>
        <member name="T:Dart.PowerTCP.Mail.Imap">
            <summary>The Imap component enables the integration of Internet Message Access Protocol (IMAP) functionality into any .NET application.
			</summary><remarks>
				<p>The Imap component enables the integration of Internet Message Access Protocol (IMAP)
				functionality into any .NET application, allowing your application 
				to easily manage Internet mail remotely.</p>
				<H4 class="dtH4">Using the Imap Component</H4>
				<p>What follows are short descriptions of common features. For a more complete, "walk-through" type description, see the high-level topics or the applicable reference topic.</p>
				<p><b>Easy mailbox management:</b> IMAP mailboxes are represented as Mailbox objects. Multiple Mailbox objects are contained in and managed by the MailboxCollection object. Use this object to add, remove, and modify IMAP mailboxes.</p>
				<p><b>Easy message management:</b> IMAP messages are represented as ImapMessage objects. Set the properties of the ImapMessage to modify message flags. Multiple ImapMessage objects are contained in and managed by the ImapMessageCollection. Use this object to add and modify IMAP messages.</p>
				<p><b>Easy message retrieval:</b> Use the Mailbox.Get method of the Mailbox object to get messages in bulk. Use the ImapMessage.Get method of the ImapMessage object to get a single message.</p>
				<p><b>Easy part retrieval:</b> Use the ImapMessage.GetPart method to get a single part (such as an attachment) from a message without having to download the entire message.</p>
				<p><b>Comprehensive IMAP functionality:</b> Use the Imap component to perform all IMAP functions such as searching, listing, subscribing/unsubscribing, and retrieving message sections.</p>
				<p><b>Advanced attachment decoding:</b> Attachments are decoded "on the fly", eliminating any need for disk access, making your application faster and more efficient. In addition, attachments can be automatically decoded and saved as files, or decoded into MemoryStreams to use within your application.</p>
				<p><b>Synchronous Use:</b> Most applications written with the Imap component will be synchronous, meaning that the application, when calling a synchronous method, will not execute the next line of code until the response is received. Use synchronous methods when the receiving of mail does not have to be transparent to the user.</p>
				<p><b>Asynchronous Use:</b> The Imap component fully supports asynchronous use, meaning that the application, when calling an asynchronous method, will immediately execute the next line of code without waiting for the response from the method. When the response is received, an event will be raised.</p>
				<p><b>Displaying Progress:</b> The Imap.Progress event provides real-time notification of the number of bytes sent or received, both for a single messages and all messages.</p>
				<p><b>Accessing Imap Protocol Communication:</b> The Tcp.Trace and Tcp.RawTrace event enables access to all commands and data sent over the TCP connection.</p>
				<p><b>Retrieving info about the control connection:</b> The TCP control connection is exposed through the Imap.Connection property, allowing access to low-level properties and methods. This can be used to view TCP-level activity, such as the local and remote IP address. Furthermore, you can use the Proxy property of this object to enable automatic communication with proxy servers when getting mail. The Tcp class can't be used on its own without a license for PowerTCP Sockets for .NET.</p>
				<p><b>Sending commands to the server:</b> Any command (including proprietary commands) can be sent to a IMAP server using the Imap.Invoke or Imap.BeginInvoke methods.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates logging into an IMAP server, copying read messages to a Deleted mailbox, and deleting them.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub DoMove()
   ' Demonstrate moving Read messages from "INBOX" to a "Deleted Items" box
   Try
      ' Do synchronous login with AutoList
      Imap1.Login("myServer", "myAccount", "myPassword")

      ' Create Mailbox objects for easier reference
      Dim InboxBox As Mailbox = Imap1.CurrentMailbox ' After Login with AutoList, this will be "INBOX"
      Dim DeletedBox As Mailbox = Imap1.Mailboxes("Deleted Items")

      ' Update Messages Count in "Deleted Items" box
      DeletedBox.Refresh()

      ' Display Messages Count in both boxes
      LabelDisplay.Text = InboxBox.Messages.Count.ToString() + "  " + DeletedBox.Messages.Count.ToString()

      ' Get an array of ImapMessages with just flags
      Dim Messages As ImapMessage() = InboxBox.Get(InboxBox.Messages(0), InboxBox.Messages(InboxBox.Messages.Count-1), ImapMessageSections.Flags)

      ' Copy Read Messages to "Deleted Items" box and Mark them for Deletion
      Dim Msg as ImapMessage
      For Each Msg in Messages
        If Msg.Seen Then 'If Seen flag is set 
           Msg.CopyTo(DeletedBox) ' Copy to "Deleted Items" box
           Msg.Delete = Grue ' Set deleted flag in "INBOX"
        End If
      Next

      'Permanently Remove Copied Messages from "INBOX"
      InboxBox.Purge()

      'Update Messages Count in "Deleted Items"
      DeletedBox.Refresh()

      'Display new Messages Counts
      LabelDisplay.Text = InboxBox.Messages.Count.ToString() + "  " + DeletedBox.Messages.Count.ToString()

      'Logout from server
      Imap1.Logout()
   
   Catch Ex As Exception
       ' Show MessageBox if error occurs
       MessageBox.Show(Ex.Message, "Error Message", MessageBoxButtons.OK, MessageBoxIcon.Error)
   End Try
End Sub
<span class="lang">[C#]</span>
private void DoMove()
{
   //Demonstrate moving Read messages from "INBOX" to a "Deleted Items" box
   try
   {
      //Do synchronous login with AutoList
      imap1.Login("myServer", "myAccount", "myPassword");

      //Create Mailbox objects for easier reference
     Mailbox inboxBox = imap1.CurrentMailbox; //After Login with AutoList, this will be "INBOX"
     Mailbox deletedBox = imap1.Mailboxes["Deleted Items"];

     //Update Messages Count in "Deleted Items" box
     deletedBox.Refresh();

     //Display Messages Count in both boxes
     labelDisplay.Text = inboxBox.Messages.Count.ToString() + "  " + deletedBox.Messages.Count.ToString();

     //Get an array of ImapMessages with just flags
     ImapMessage[] messages = inboxBox.Get(inboxBox.Messages[0], inboxBox.Messages[inboxBox.Messages.Count-1], ImapMessageSections.Flags);

     //Copy Read Messages to "Deleted Items" box and Mark them for Deletion
     foreach (ImapMessage msg in messages)
     {
       if (msg.Seen) //If Seen flag is set
       {
          msg.CopyTo(deletedBox); //Copy to "Deleted Items" box
          msg.Delete = true; //Set deleted flag in "INBOX"
       }
     }

     //Permanently Remove Copied Messages from "INBOX"
     inboxBox.Purge();

     //Update Messages Count in "Deleted Items"
     deletedBox.Refresh();

     //Display new Messages Counts
     labelDisplay.Text = inboxBox.Messages.Count.ToString() + "  " + deletedBox.Messages.Count.ToString();

     //Logout from server
     imap1.Logout();
   }
   catch (Exception ex)
   {
      //Show MessageBox if error occurs
      MessageBox.Show(ex.Message, "Error Message", MessageBoxButtons.OK, MessageBoxIcon.Error);
   }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Imap.#ctor">
            <summary>
				Initializes a new instance of the Imap component.
			</summary><remarks>
				<p>The default constructor initializes a new Imap component. When using Visual Studio.NET, simply add the Imap component 
				to the form and the object will automatically be created and initialized. 
				If working out of the Visual Studio.NET environment (or using the Imap 
				component as a reference), the Imap component will have to be explicitly 
				created and initialized.</p>
				<p>The following table shows initial property values for an instance of Pop.</p>
				<div class="tablediv">
					<table cellspacing="0" class="dtTABLE">
						<tr valign="top">
							<th width="50%">Property</th>
							<th width="50%">Initial Value</th>
						</tr>
						<tr valign="top">
							<td width="50%"> AutoList </td>
							<td width="50%"> true </td>
						</tr>
						<tr valign="top">
							<td width="50%"> AutoPurge </td>
							<td width="50%"> false </td>
						</tr>
						<tr valign="top">
							<td width="50%"> DoEvents </td>
							<td width="50%"> true </td>
						</tr>
						<tr valign="top">
							<td width="50%"> EnableMailboxNameEncoding </td>
							<td width="50%"> true </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Timeout </td>
							<td width="50%"> 30000 </td>
						</tr>
						<tr valign="top">
							<td width="50%"> UseMemoryStreams </td>
							<td width="50%"> false </td>
						</tr>
					</table>
				</div>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Imap.Dispose(System.Boolean)">
            <summary>
			Releases all resources associated with the object.
			</summary><remarks>
				<p>The Object.Dispose method abruptly aborts the connection and releases all resources.</p>
				<p>Object.Dispose should ONLY be used to release all resources used by the
object, and the object should not be used subsequently. If an abort is
desired, then Object.Close or Object.Connection.Close if available should be used to terminate
activity and reset the object. The Object cannot be used once Object.Dispose() or Object.Dispose(true) are called.
</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Imap.#ctor(System.ComponentModel.Container)">
            <summary>
				Initializes a new instance of the Imap component.
			</summary><remarks>
				<p>Use this constructor to add the Imap component to the IContainer 
				container. When using Visual Studio.NET, simply add the Imap component 
				to the form and the object will automatically be created and initialized. 
				If working out of the Visual Studio.NET environment (or using the Imap 
				component as a reference), the Imap component will have to be explicitly 
				created and initialized.</p>
				<p>The following table shows initial property values for an instance of Pop.</p>
				<div class="tablediv">
					<table cellspacing="0" class="dtTABLE">
						<tr valign="top">
							<th width="50%">Property</th>
							<th width="50%">Initial Value</th>
						</tr>
						<tr valign="top">
							<td width="50%"> AutoList </td>
							<td width="50%"> true </td>
						</tr>
						<tr valign="top">
							<td width="50%"> AutoPurge </td>
							<td width="50%"> false </td>
						</tr>
						<tr valign="top">
							<td width="50%"> DoEvents </td>
							<td width="50%"> true </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Timeout </td>
							<td width="50%"> 30000 </td>
						</tr>
						<tr valign="top">
							<td width="50%"> UseMemoryStreams </td>
							<td width="50%"> false </td>
						</tr>
					</table>
				</div>
			</remarks><param name="container">The IContainer which contains the Imap component.</param>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Imap.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Imap.Login(System.String,System.Int32,System.String,System.Int32,System.String,System.String)">
            <summary>Logs into an IMAP server at a specified port using a username and password and specifying a client interface to use.</summary><remarks>
				<p>The Imap.Login method logs into <i>server</i> at the port specified by
				<i>port</i> with the specified <i>username</i> and <i>password</i>.  
				If Imap.AutoList is true, Imap.Login will also perform a list of 
				all top-level mailboxes and will set Imap.CurrentMailbox to the
				Mailbox object representing "INBOX", if one exists.</p>
			</remarks><param name="server">The hostname or dot address of the IMAP server.</param><param name="username">The account username.</param><param name="password">The account password.</param><param name="serverPort">The port to connect to. This defaults to the well-known IMAP port of 143 but can be changed for non-standard implementations.</param><param name="client">The client hostname or address when a specific interface binding is desired</param><param name="clientPort">The client port when a specific local port is desired</param><returns>An ImapResponse object representing the response from the server.</returns><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Imap.BeginLogin(System.String,System.Int32,System.String,System.Int32,System.String,System.String,System.Object)">
            <summary>Begins to asynchronously log into an IMAP server at a specified port using a username and password.</summary><remarks>
				<p>The Imap.BeginLogin method begins to asynchronously log into <i>server</i> at the port specified by
				<i>port</i> with the specified <i>username</i> and <i>password</i>.  Upon completion of this operation the Imap.EndLogin
				event is raised. If Imap.AutoList is true, Imap.Login will also perform a list of 
				all top-level mailboxes and will set Imap.CurrentMailbox to the
				Mailbox object representing "INBOX", if one exists.</p>
			</remarks><param name="server">The hostname or dot address of the IMAP server.</param><param name="username">The account username.</param><param name="password">The account password.</param><param name="serverPort">The port to connect to. This defaults to the well-known IMAP port of 143 but can be changed for non-standard implementations.</param><param name="client">The client hostname or address when a specific interface binding is desired</param><param name="clientPort">The client port when a specific local port is desired</param><param name="state">User state information.</param><returns>An IAsyncResult that represents the asynchronous operation, which could still be pending.</returns><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception><exception cref="T:System.InvalidOperationException">BeginXXX method used without providing an EndXXX event handler.</exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Imap.Login(System.String,System.String,System.String)">
            <overloads>Logs into an IMAP server.</overloads><summary>Logs into an IMAP server at a specified port using a username and password.</summary><remarks>
				<p>The Imap.Login method logs into <i>server</i> at the port specified by
				<i>port</i> with the specified <i>username</i> and <i>password</i>.  
				If Imap.AutoList is true, Imap.Login will also perform a list of 
				all top-level mailboxes and will set Imap.CurrentMailbox to the
				Mailbox object representing "INBOX", if one exists.</p>
			</remarks><param name="server">The hostname or dot address of the IMAP server.</param><param name="username">The account username.</param><param name="password">The account password.</param><returns>An ImapResponse object representing the response from the server.</returns><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception><summary>Logs into an IMAP server using a username and password.</summary><remarks>
				<p>The Imap.Login method logs into <i>server</i> with the specified <i>username</i> and <i>password</i>.  
				If Imap.AutoList is true, Imap.Login will also perform a list of 
				all top-level mailboxes and will set Imap.CurrentMailbox to the
				Mailbox object representing "INBOX", if one exists.</p>
			</remarks><returns>An ImapResponse object representing the response from the server.</returns><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates logging into an IMAP server, copying read messages to a Deleted mailbox, and deleting them.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub DoMove()
   ' Demonstrate moving Read messages from "INBOX" to a "Deleted Items" box
   Try
      ' Do synchronous login with AutoList
      Imap1.Login("myServer", "myAccount", "myPassword")

      ' Create Mailbox objects for easier reference
      Dim InboxBox As Mailbox = Imap1.CurrentMailbox ' After Login with AutoList, this will be "INBOX"
      Dim DeletedBox As Mailbox = Imap1.Mailboxes("Deleted Items")

      ' Update Messages Count in "Deleted Items" box
      DeletedBox.Refresh()

      ' Display Messages Count in both boxes
      LabelDisplay.Text = InboxBox.Messages.Count.ToString() + "  " + DeletedBox.Messages.Count.ToString()

      ' Get an array of ImapMessages with just flags
      Dim Messages As ImapMessage() = InboxBox.Get(InboxBox.Messages(0), InboxBox.Messages(InboxBox.Messages.Count-1), ImapMessageSections.Flags)

      ' Copy Read Messages to "Deleted Items" box and Mark them for Deletion
      Dim Msg as ImapMessage
      For Each Msg in Messages
        If Msg.Seen Then 'If Seen flag is set 
           Msg.CopyTo(DeletedBox) ' Copy to "Deleted Items" box
           Msg.Delete = Grue ' Set deleted flag in "INBOX"
        End If
      Next

      'Permanently Remove Copied Messages from "INBOX"
      InboxBox.Purge()

      'Update Messages Count in "Deleted Items"
      DeletedBox.Refresh()

      'Display new Messages Counts
      LabelDisplay.Text = InboxBox.Messages.Count.ToString() + "  " + DeletedBox.Messages.Count.ToString()

      'Logout from server
      Imap1.Logout()
   
   Catch Ex As Exception
       ' Show MessageBox if error occurs
       MessageBox.Show(Ex.Message, "Error Message", MessageBoxButtons.OK, MessageBoxIcon.Error)
   End Try
End Sub
<span class="lang">[C#]</span>
private void DoMove()
{
   //Demonstrate moving Read messages from "INBOX" to a "Deleted Items" box
   try
   {
      //Do synchronous login with AutoList
      imap1.Login("myServer", "myAccount", "myPassword");

      //Create Mailbox objects for easier reference
     Mailbox inboxBox = imap1.CurrentMailbox; //After Login with AutoList, this will be "INBOX"
     Mailbox deletedBox = imap1.Mailboxes["Deleted Items"];

     //Update Messages Count in "Deleted Items" box
     deletedBox.Refresh();

     //Display Messages Count in both boxes
     labelDisplay.Text = inboxBox.Messages.Count.ToString() + "  " + deletedBox.Messages.Count.ToString();

     //Get an array of ImapMessages with just flags
     ImapMessage[] messages = inboxBox.Get(inboxBox.Messages[0], inboxBox.Messages[inboxBox.Messages.Count-1], ImapMessageSections.Flags);

     //Copy Read Messages to "Deleted Items" box and Mark them for Deletion
     foreach (ImapMessage msg in messages)
     {
       if (msg.Seen) //If Seen flag is set
       {
          msg.CopyTo(deletedBox); //Copy to "Deleted Items" box
          msg.Delete = true; //Set deleted flag in "INBOX"
       }
     }

     //Permanently Remove Copied Messages from "INBOX"
     inboxBox.Purge();

     //Update Messages Count in "Deleted Items"
     deletedBox.Refresh();

     //Display new Messages Counts
     labelDisplay.Text = inboxBox.Messages.Count.ToString() + "  " + deletedBox.Messages.Count.ToString();

     //Logout from server
     imap1.Logout();
   }
   catch (Exception ex)
   {
      //Show MessageBox if error occurs
      MessageBox.Show(ex.Message, "Error Message", MessageBoxButtons.OK, MessageBoxIcon.Error);
   }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Imap.BeginLogin(System.String,System.String,System.String,System.Object)">
            <summary>Begins to asynchronously log into an IMAP server using a username and password.</summary><remarks>
				<p>The Imap.BeginLogin method begins to asynchronously log into <i>server</i> at the port specified by
				<i>port</i> with the specified <i>username</i> and <i>password</i>.  Upon completion of this operation the Imap.EndLogin
				event is raised. If Imap.AutoList is true, Imap.Login will also perform a list of 
				all top-level mailboxes and will set Imap.CurrentMailbox to the
				Mailbox object representing "INBOX", if one exists.</p>
			</remarks><returns>An IAsyncResult that represents the asynchronous operation, which could still be pending.</returns><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception><exception cref="T:System.InvalidOperationException">BeginXXX method used without providing an EndXXX event handler.</exception><summary>Begins to asynchronously log into an IMAP server using a username and password.</summary><remarks>
				<p>The Imap.BeginLogin method begins to asynchronously log into <i>server</i> with the specified <i>username</i> and <i>password</i>.  Upon completion of this operation the Imap.EndLogin
				event is raised. If Imap.AutoList is true, Imap.Login will also perform a list of 
				all top-level mailboxes and will set Imap.CurrentMailbox to the
				Mailbox object representing "INBOX", if one exists.</p>
			</remarks><param name="server">The hostname or dot address of the IMAP server.</param><param name="username">The account username.</param><param name="password">The account password.</param><param name="state">User state information.</param><returns>An IAsyncResult that represents the asynchronous operation, which could still be pending.</returns><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception><exception cref="T:System.InvalidOperationException">BeginXXX method used without providing an EndXXX event handler.</exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Imap.Logout">
            <summary>Logs out and closes the connection.</summary><remarks>
				<p>The Imap.Logout command issues the IMAP LOGOUT command, gracefully logging out 
				of the server and closing the connection.</p>
			</remarks><returns>An ImapResponse object representing the response from the server.</returns><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates logging into an IMAP server, copying read messages to a Deleted mailbox, and deleting them.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub DoMove()
   ' Demonstrate moving Read messages from "INBOX" to a "Deleted Items" box
   Try
      ' Do synchronous login with AutoList
      Imap1.Login("myServer", "myAccount", "myPassword")

      ' Create Mailbox objects for easier reference
      Dim InboxBox As Mailbox = Imap1.CurrentMailbox ' After Login with AutoList, this will be "INBOX"
      Dim DeletedBox As Mailbox = Imap1.Mailboxes("Deleted Items")

      ' Update Messages Count in "Deleted Items" box
      DeletedBox.Refresh()

      ' Display Messages Count in both boxes
      LabelDisplay.Text = InboxBox.Messages.Count.ToString() + "  " + DeletedBox.Messages.Count.ToString()

      ' Get an array of ImapMessages with just flags
      Dim Messages As ImapMessage() = InboxBox.Get(InboxBox.Messages(0), InboxBox.Messages(InboxBox.Messages.Count-1), ImapMessageSections.Flags)

      ' Copy Read Messages to "Deleted Items" box and Mark them for Deletion
      Dim Msg as ImapMessage
      For Each Msg in Messages
        If Msg.Seen Then 'If Seen flag is set 
           Msg.CopyTo(DeletedBox) ' Copy to "Deleted Items" box
           Msg.Delete = Grue ' Set deleted flag in "INBOX"
        End If
      Next

      'Permanently Remove Copied Messages from "INBOX"
      InboxBox.Purge()

      'Update Messages Count in "Deleted Items"
      DeletedBox.Refresh()

      'Display new Messages Counts
      LabelDisplay.Text = InboxBox.Messages.Count.ToString() + "  " + DeletedBox.Messages.Count.ToString()

      'Logout from server
      Imap1.Logout()
   
   Catch Ex As Exception
       ' Show MessageBox if error occurs
       MessageBox.Show(Ex.Message, "Error Message", MessageBoxButtons.OK, MessageBoxIcon.Error)
   End Try
End Sub
<span class="lang">[C#]</span>
private void DoMove()
{
   //Demonstrate moving Read messages from "INBOX" to a "Deleted Items" box
   try
   {
      //Do synchronous login with AutoList
      imap1.Login("myServer", "myAccount", "myPassword");

      //Create Mailbox objects for easier reference
     Mailbox inboxBox = imap1.CurrentMailbox; //After Login with AutoList, this will be "INBOX"
     Mailbox deletedBox = imap1.Mailboxes["Deleted Items"];

     //Update Messages Count in "Deleted Items" box
     deletedBox.Refresh();

     //Display Messages Count in both boxes
     labelDisplay.Text = inboxBox.Messages.Count.ToString() + "  " + deletedBox.Messages.Count.ToString();

     //Get an array of ImapMessages with just flags
     ImapMessage[] messages = inboxBox.Get(inboxBox.Messages[0], inboxBox.Messages[inboxBox.Messages.Count-1], ImapMessageSections.Flags);

     //Copy Read Messages to "Deleted Items" box and Mark them for Deletion
     foreach (ImapMessage msg in messages)
     {
       if (msg.Seen) //If Seen flag is set
       {
          msg.CopyTo(deletedBox); //Copy to "Deleted Items" box
          msg.Delete = true; //Set deleted flag in "INBOX"
       }
     }

     //Permanently Remove Copied Messages from "INBOX"
     inboxBox.Purge();

     //Update Messages Count in "Deleted Items"
     deletedBox.Refresh();

     //Display new Messages Counts
     labelDisplay.Text = inboxBox.Messages.Count.ToString() + "  " + deletedBox.Messages.Count.ToString();

     //Logout from server
     imap1.Logout();
   }
   catch (Exception ex)
   {
      //Show MessageBox if error occurs
      MessageBox.Show(ex.Message, "Error Message", MessageBoxButtons.OK, MessageBoxIcon.Error);
   }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Imap.BeginLogout(System.Object)">
            <summary>Begins to asynchronously log out and closes the connection.</summary><remarks>
				<p>The Imap.BeginLogout command issues the IMAP LOGOUT command, gracefully logging out 
				of the server and closing the connection. Upon completion of this operation, the Imap.EndLogout 
				event is raised.</p>
			</remarks><param name="state">User state information.</param><returns>An IAsyncResult that represents the asynchronous operation, which could still be pending.</returns><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception><exception cref="T:System.InvalidOperationException">BeginXXX method used without providing an EndXXX event handler.</exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Imap.Noop">
            <summary>Sends a NOOP command to keep the user logged in and to poll for changes.</summary><remarks>
				<p>The Imap.Noop method sends an IMAP NOOP command.  The IMAP NOOP command allows the user to keep the 
				connection with the server alive as well as poll for changes in the 
				current mailbox with minimum impact on the server.</p>
				<p>The IMAP IDLE command was implemented to provide a better way for
				the client to be notified of changes to the mailbox. See the Imap.Idle
				for a description of using this command.</p>
			</remarks><returns>An ImapResponse object representing the response from the server.</returns><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates sending a NOOP command and checking the response.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Login to the mail server
Imap1.Login(Server, User, Pass)

' Send a NOOP command
Dim Response As ImapResponse = Imap1.Noop()

' Check the response
If Response.Status = ImapStatus.Ok Then
   Debug.WriteLine("Good response from server")
Else
   Debug.WriteLine("Response from server: " + Response.Status)
End

' Logout
Imap1.Logout()
<span class="lang">[C#]</span>
// Login to the mail server
imap1.Login(server, user, pass);

// Send a NOOP command
ImapResponse response = imap1.Noop();

// Check the response
if(response.Status == ImapStatus.Ok)
   Debug.WriteLine("Good response from server");
else
   Debug.WriteLine("Response from server: " + response.Status);

// Logout
imap1.Logout();
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Imap.BeginNoop(System.Object)">
            <summary>Begins to asynchronously send a NOOP command to keep the user logged in and to poll for changes.</summary><remarks>
				<p>The Imap.BeginNoop command begins to asynchronously send an IMAP NOOP command.  
				Upon completion of this operation the Imap.EndNoop event is raised. The IMAP NOOP command enables the user to keep the 
				connection with the server alive as well as poll for changes in the 
				current mailbox with minimum impact on the server.</p>
				<p>The IMAP IDLE command was implemented to provide a better way for
				the client to be notified of changes to the mailbox. See the Imap.Idle
				for a description of using this command.</p>
			</remarks><param name="state">User state information.</param><returns>An IAsyncResult that represents the asynchronous operation, which could still be pending.</returns><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception><exception cref="T:System.InvalidOperationException">BeginXXX method used without providing an EndXXX event handler.</exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Imap.Invoke(System.String)">
            <summary>Sends the specified user command.</summary><remarks>
				<p>The Imap.Invoke method sends out the specified <i>command</i>. This is useful for enabling communication with servers that 
				recognize proprietary commands not included in the Imap component model.</p>
			</remarks><param name="command">The command to issue to the server.</param><returns>An ImapResponse object representing the response from the server.</returns><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Imap.BeginInvoke(System.String,System.Object)">
            <summary>Begins to send the specified user command.</summary><remarks>
				<p>The Imap.BeginInvoke method begins to send out the specified <i>command</i>. Upon completion
				the Imap.EndInvoke event is raised. This is useful for enabling communication with servers that 
				recognize proprietary commands not included in the Imap component model.</p>
			</remarks><param name="command">The command to issue to the server.</param><param name="state">User state information.</param><returns>An IAsyncResult that represents the asynchronous operation, which could still be pending.</returns><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception><exception cref="T:System.InvalidOperationException">BeginXXX method used without providing an EndXXX event handler.</exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Imap.Invoke(System.String,System.Byte[])">
            <summary>Sends the specified user command.</summary><remarks>
				<p>The Imap.Invoke method sends out the specified <i>command</i>. The 
				contents of the <i>data</i> are sent as a literal 
				following any continuation responses from the IMAP server.
				This follows the APPEND command model, where the APPEND command is issued, the server
				issues a continuation response, and the actual message data is then sent
				</p>
				<p>The Imap.Invoke method is useful for enabling communication with servers that 
				recognize proprietary commands not included in the Imap component model.</p>
			</remarks><param name="command">The command to issue to the server.</param><param name="data">The data to send after the server responds to the command.</param><returns>An ImapResponse object representing the response from the server.</returns><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Imap.BeginInvoke(System.String,System.Byte[],System.Object)">
            <summary>Begins to asynchronously send the specified user command.</summary><remarks>
				<p>The Imap.BeginInvoke method begins to asynchronously send out the specified <i>command</i>.
				The contents of <i>data</i> are sent as a literal 
				following any continuation responses from the IMAP server. Upon completion, the Imap.EndInvoke event is raised.
				This follows the APPEND command model, where the APPEND command is issued, the server
				issues a continuation response, and the actual message data is then sent
				</p>
				<p>The Imap.BeginInvoke method is useful for enabling communication with servers that 
				recognize proprietary commands not included in the Imap component model.</p>
			</remarks><param name="command">The command to issue to the server.</param><param name="data">The data to send after the server responds to the command.</param><param name="state">User state information.</param><returns>An IAsyncResult that represents the asynchronous operation, which could still be pending.</returns><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception><exception cref="T:System.InvalidOperationException">BeginXXX method used without providing an EndXXX event handler.</exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Imap.List(System.String,System.String,System.Boolean)">
            <summary>Lists a subset of mailboxes found on the IMAP server.</summary><remarks>
				<p>The Imap.List method lists a subset of mailboxes found on the IMAP server and 
			returns an array containing Mailbox objects that represent those mailboxes by using the
			IMAP LIST command.  
			<i>reference</i>
			refers to the directory in which to execute the command. <i>searchTerm</i> 
			checks against all mailboxes for matches, and may include wildcards.  If 
			<i>unsubscribed</i> is false, the result listing will only contain the Mailboxes the user 
			is subscribed to (using the IMAP LSUB command). If true, the Imap.List command
			will return all unsubscribed and subscribed mailboxes which meet the criteria.</p>
			</remarks><param name="reference">The directory in which to execute the command.</param><param name="searchTerm">The string to match.</param><param name="unsubscribed">true if unsubscribed and subscribed mailboxes are to be returned by the listing, false if only subscribed are to be returned.</param><returns>An ImapResponse object representing the response from the server.</returns><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Imap.BeginList(System.String,System.String,System.Boolean,System.Object)">
            <summary>Begins to asynchronously list a subset of mailboxes found on the IMAP server.</summary><remarks>
				<p>The Imap.BeginList method begins to asynchronously list a subset of mailboxes found on the IMAP server 
			by using the IMAP LIST command. Upon completion of this operation, the Imap.EndList event is raised.
			<i>reference</i> refers to the directory in which to execute the command. <i>searchTerm</i> 
			checks against all mailboxes for matches, and may include wildcards.  If 
			<i>unsubscribed</i> is false, the result listing will only contain the Mailboxes the user 
			is subscribed to (using the IMAP LSUB command). If true, the Imap.List command
			will return all unsubscribed and subscribed mailboxes which meet the criteria.
			This version of the List method 
			does NOT populate the Imap.Mailboxes collection.</p>
			</remarks><param name="reference">The directory in which to execute the command.</param><param name="searchTerm">The string to match.</param><param name="unsubscribed">true if unsubscribed and subscribed mailboxes are to be returned by the listing, false if only subscribed are to be returned.</param><param name="state">User state information.</param><returns>An IAsyncResult that represents the asynchronous operation, which could still be pending.</returns><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception><exception cref="T:System.InvalidOperationException">BeginXXX method used without providing an EndXXX event handler.</exception>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates performing an asynchronous listing.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub AsynchronousListTest()
   ' Set Autolist to false. We will explicitly call for a listing.
   Imap1.AutoList = False

   ' Login to the server.
   Imap1.Login(Server, User, Pass)

   ' Begin an asynchronous listing.
   Imap1.BeginList(Nothing)
End Sub

Private Sub Imap1_EndList(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureMail.MailboxEventArgs) Handles Imap1.EndList
   If e.Exception Is Nothing Then
      Debug.WriteLine("The following mailboxes were reported.")
      Dim Box As Mailbox
      For Each Box In E.Mailboxes
         Debug.WriteLine(Box.Name)
      End If
   End If
End Sub
<span class="lang">[C#]</span>
private void AsynchronousListTest()
{
   // Set Autolist to false. We will explicitly call for a listing.
   imap1.AutoList = false;

   // Login to the server.
   imap1.Login(Server, User, Pass);

   // Begin an asynchronous listing.
   imap1.BeginList(null);
}

private void imap1_EndList(object sender, Dart.PowerTCP.SecureMail.MailboxEventArgs e)
{
   if(e.Exception == null)
   {
      Debug.WriteLine("The following mailboxes were reported.");
      foreach(Mailbox box in e.Mailboxes)
         Debug.WriteLine(box.Name);
   }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Imap.Examine(System.String)">
            <summary>Select a mailbox by using the EXAMINE command.</summary><remarks>
				<p>The Imap.Examine method selects a mailbox by issuing the EXAMINE command to 
			the server, setting the current mailbox to the mailbox specified by <i>mailboxName</i>.  If successful, 
			the Imap.CurrentMailbox is set to an instance of a Mailbox object.  This method opens 
			the mailbox for reading only (Mailbox.Readonly = true).</p>
			</remarks><param name="mailboxName">The name of the mailbox to open.</param><returns>An ImapResponse object representing the response from the server.</returns><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the LineReceived event to detect values of RECENT and EXISTS responses.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub ExamineTest()
   ' Login to the server.
   Imap1.Login(Server, User, Pass)

   ' Examine a mailbox.
   Dim Response As ImapResponse = Imap1.Examine("TestBox")

   ' Display the entire response from the server.
   Debug.WriteLine("Entire response from server: " + Response.ToString())
End Sub

Private Sub Imap1_LineReceived(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureMail.ImapResponseEventArgs) Handles Imap1.LineReceived
   Dim Response As ImapResponse
   For Each Response in e.Responses
      If Response.Operation = "EXISTS" Then
         Debug.WriteLine("Value of EXISTS: " + Response.Value)
      End If
      If Response.Operation = "RECENT" Then
         Debug.WriteLine("Value of RECENT: " + Response.Value)
      End If
   Next
End Sub
<span class="lang">[C#]</span>
private void ExamineTest()
{
   // Login to the server.
   imap1.Login(Server, User, Pass);

   // Examine a mailbox.
   ImapResponse response = imap1.Examine("TestBox");

   // Display the entire response from the server.
   Debug.WriteLine("Entire response from server: " + response.ToString());
}

private void imap1_LineReceived(object sender, Dart.PowerTCP.SecureMail.ImapResponseEventArgs e)
{
   foreach(ImapResponse response in e.Responses)
   {
      if(response.Operation == "EXISTS")
         Debug.WriteLine("Value of EXISTS: " + response.Value);
      if(response.Operation == "RECENT")
         Debug.WriteLine("Value of RECENT: " + response.Value);
   }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Imap.BeginExamine(System.String,System.Object)">
            <summary>Begin to asynchronously select a mailbox by using the EXAMINE command.</summary><remarks>
				<p>The Imap.BeginExamine method selects a mailbox by issuing the EXAMINE command to 
			the server, setting the current mailbox to the mailbox specified by <i>mailboxName</i>.  
			Upon completion of this operation, the Imap.EndExamine event is raised.
			If successful, the Imap.CurrentMailbox is set to an instance of a Mailbox object.  This method opens 
			the mailbox for reading only (Mailbox.Readonly = true).</p>
			</remarks><param name="mailboxName">The name of the mailbox to open.</param><param name="state">User state information.</param><returns>An IAsyncResult that represents the asynchronous operation, which could still be pending.</returns><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception><exception cref="T:System.InvalidOperationException">BeginXXX method used without providing an EndXXX event handler.</exception>
        </member>
        <member name="E:Dart.PowerTCP.Mail.Imap.ConnectedChanged">
            <summary>
            Raised when the value of the Object.Connected property changes.
            </summary><remarks>
				<p>This event is raised when the value of the Object.Connected property changes. The value of the Object.Connected property changes whenever a TCP connection to a resource
				is either made or closed.</p>
				<p>This event is useful in several scenarios, for example:</p>
				<ul>
					<li>Displaying the user when a connection has been terminated.</li>
					<li>Notifying the application if a connection has been terminated.</li>
				</ul>
				<p>If you are using the PowerTCP component as a reference, you must create a method to handle the event yourself. For more information on using events using PowerTCP.NET within the Visual Studio.NET environment, see Using Events In PowerTCP.</p>
			</remarks>
        </member>
        <member name="E:Dart.PowerTCP.Mail.Imap.ConnectedChangedEx">
            <summary>
            Raised when the value of the Object.Connected property changes. Supercedes the ConnectedChanged event.
            </summary><remarks>
				<p>This event is raised when the value of the Object.Connected property changes. The value of the Object.Connected property changes whenever a TCP connection to a resource
				is either made or closed.</p>
				<p>This event is useful in several scenarios, for example:</p>
				<ul>
					<li>Displaying the user when a connection has been terminated.</li>
					<li>Notifying the application if a connection has been terminated.</li>
				</ul>
				<p>If you are using the PowerTCP component as a reference, you must create a method to handle the event yourself. For more information on using events using PowerTCP.NET within the Visual Studio.NET environment, see Using Events In PowerTCP.</p>
			</remarks>
        </member>
        <member name="E:Dart.PowerTCP.Mail.Imap.BusyChanged">
            <summary>
			Raised when the value of the Object.Busy property changes.
			</summary><remarks>
				<p>This event is fired when the value of the Object.Busy property changes. The Object.Busy property changes
			when a method is executing that is occupying the TCP connection.
			</p>
				<p>This event is useful in several scenarios, for example:</p>
				<ul>
					<li>Displaying to the user when the PowerTCP component is busy.</li>
					<li>Taking action within your application when the PowerTCP component is no longer busy.</li>
				</ul>
				<p>If you are using the PowerTCP component as a reference, you must create a method to handle the event yourself.
			For more information on using events using PowerTCP.NET within the Visual Studio.NET environment, see Using Events In PowerTCP.</p>
			</remarks>
        </member>
        <member name="E:Dart.PowerTCP.Mail.Imap.Trace">
            <summary>
            Raised when data has been sent/received.
            </summary><remarks>
				<p>This event is raised when commands or data has been sent/received. If you are using a component which uses TCP as the
				transport protocol a SegmentEventArgs object is passed into the event containing any commands or data sent or received.
				If you are using a component which uses UDP as the transport protocol a DatagramEventArgs object is passed into the event containing any commands
				or data sent or received.</p>
				<p>The Object.RawTrace event always reports actual data sent/received over the socket. The Count
				of each segment reflects the number of bytes actually written and received.
				The Object.Trace event reports data sent/received at a higher level. For example, for the
				Telnet component, Object.Trace reports data sent/received, but does not report
				IAC option sequences that are processed by TelnetStream, whereas Object.RawTrace
				allows you to trace the actual data sent/received, including Telnet option
				commands.
				</p>
				<p>If you are using the PowerTCP component as a reference, you must create a method to handle the event yourself. For more information on using events using PowerTCP.NET within the Visual Studio.NET environment, see Using Events In PowerTCP.</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Imap.Editor">
            <summary>
				In Visual Studio.NET, displays an interactive form to use to test real time protocol operations.
			</summary><value>
				An EditorForm to use in VS.NET to test protocol operations. 
			</value><remarks>
				<p>This property can only be used by clicking this property in the Properties Window in Visual Studio.NET. This will open an application which can be used to test protocol operation. The EditorForm will not be available if the PowerTCP component is being used as a reference.</p>
				<p>The Object.Editor property can ONLY be used at design time in the Visual Studio.NET environment.</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Imap.Idle">
            <summary>Controls the current idle state of the Imap component</summary><remarks>
				<p>RFC 2177 defines an idle state for IMAP, in which the client can send an
			IDLE command to the server, notifying the server that the client is ready to accept
			unsolicited updates.</p>
				<p>The Imap.Idle property gets or sets the current idle state of the Imap component.  
			When Imap.Idle is set to true, the IDLE command is sent to the server. The Imap component
			will remain in this state until the server sends an update. This will cause the Imap.Update 
			event to be raised. The Imap component will remain in the idle state until Imap.Idle is set
			to false or any command is sent from the client.</p>
			</remarks><value>true if the Imap component is currently in the idle state; false otherwise.</value>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Imap.Busy">
            <summary>
				Returns true if a method is currently in use. 
			</summary><remarks>
				<p>When used in PowerTCP Zip Compression for .NET, this property provides protection against accessing a method that is still processing a command.</p>
				<p>When used in an Internet communications component, this property provides protection against sending commands over a busy socket. For example, if the PowerTCP component is engaged in sending or receiving data, and another method is called that
				requires use of the same socket, a BusyException is thrown.</p>
				<p>The Object.BusyChanged event is raised whenever the value of this property changes.</p>
				<p>For Internet communications components, check this property within your code if you feel a new operation could be 
				attempted over a socket that is already engaged in sending or receiving data. This property is also 
				useful for displaying socket status to the user. For example, a "stoplight" could 
				be part of the user interface that would be red when the Object.Busy property is true, and 
				green when false.</p>
			</remarks><value>
				true if a method is currently is use, otherwise false
			</value>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Imap.Connected">
            <summary>
				Gets the connected state of the connection.
			</summary><remarks>
				<p>If the PowerTCP component is connected to a remote resource AND authenticated, this property returns true. If this property is false, the connection was either never connected, is no longer connected, or is connected but not yet authenticated.
				When receiving data from the server, this property is a good way to tell if all data has been received. Keep receiving data in a loop until this property equals false.
				</p>
				<p>When using PowerTCP components which make use of the Tcp component as the underlying connection, this 
				property returns the same value as the Object.Connection.Connected property (where Object.Connection exposes the Tcp object used for the connection).</p>
				<p>The Object.ConnectedChanged and Object.ConnectedChangedEx events are raised whenever this property changes.</p>
			</remarks><value>
				true if the TCP connection is connected to a remote resource and authenticated; otherwise, false.
			</value>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Imap.Connection">
            <summary>
				Gets the Tcp component instance used for the connection.
			</summary><remarks>
				<p>Many PowerTCP components use the Tcp component for the connection. This property exposes that object, allowing such actions as sending server requests directly over the TCP connection or getting information about the socket (such as local/remote IP addresses).
				If you need to communicate with a proxy server, set the properties of Object.Connection.Proxy to enable proxy communication.
				In addition, Object.Connection.Send can be used to send any command to the server.</p>
				<p>Use the Object.Connection property to directly access the TCP connection. This could be useful if:</p>
				<ul>
					<li>You need to use the Tcp.Proxy object to communicate with proxy servers.</li>
					<li>You wish to display information about the socket endpoints to the user (local/remote IP addresses, for example).</li>
					<li>You want to use the Tcp object used by the PowerTCP component as an initializer for the TraceForm.</li>
					<li>You wish to capture trace information by using the Tcp.Trace event.</li>
					<li>You wish to close the connection.</li>
				</ul>
			</remarks><value>
				The Tcp instance that the PowerTCP component uses for the connection. 
			</value>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Imap.Mailboxes">
            <summary>Gets a MailboxCollection containing representations of mailboxes that are available on the server.</summary><remarks>
				<p>The Imap.Mailboxes property returns a MailboxCollection object of mailboxes that are 
				available on the 
				server.  The contents of this collection are based on the execution of the 
				Imap.List method, if Imap.AutoList is true it will automatically be populated
				after logging in.  The collection should be sorted alphabetically, but with 
				the delimiter counted as a higher value than any other character.</p>
				<p>The Imap.Mailboxes property includes top-level mailboxes only.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates logging into an IMAP server, copying read messages to a Deleted mailbox, and deleting them.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub DoMove()
   ' Demonstrate moving Read messages from "INBOX" to a "Deleted Items" box
   Try
      ' Do synchronous login with AutoList
      Imap1.Login("myServer", "myAccount", "myPassword")

      ' Create Mailbox objects for easier reference
      Dim InboxBox As Mailbox = Imap1.CurrentMailbox ' After Login with AutoList, this will be "INBOX"
      Dim DeletedBox As Mailbox = Imap1.Mailboxes("Deleted Items")

      ' Update Messages Count in "Deleted Items" box
      DeletedBox.Refresh()

      ' Display Messages Count in both boxes
      LabelDisplay.Text = InboxBox.Messages.Count.ToString() + "  " + DeletedBox.Messages.Count.ToString()

      ' Get an array of ImapMessages with just flags
      Dim Messages As ImapMessage() = InboxBox.Get(InboxBox.Messages(0), InboxBox.Messages(InboxBox.Messages.Count-1), ImapMessageSections.Flags)

      ' Copy Read Messages to "Deleted Items" box and Mark them for Deletion
      Dim Msg as ImapMessage
      For Each Msg in Messages
        If Msg.Seen Then 'If Seen flag is set 
           Msg.CopyTo(DeletedBox) ' Copy to "Deleted Items" box
           Msg.Delete = Grue ' Set deleted flag in "INBOX"
        End If
      Next

      'Permanently Remove Copied Messages from "INBOX"
      InboxBox.Purge()

      'Update Messages Count in "Deleted Items"
      DeletedBox.Refresh()

      'Display new Messages Counts
      LabelDisplay.Text = InboxBox.Messages.Count.ToString() + "  " + DeletedBox.Messages.Count.ToString()

      'Logout from server
      Imap1.Logout()
   
   Catch Ex As Exception
       ' Show MessageBox if error occurs
       MessageBox.Show(Ex.Message, "Error Message", MessageBoxButtons.OK, MessageBoxIcon.Error)
   End Try
End Sub
<span class="lang">[C#]</span>
private void DoMove()
{
   //Demonstrate moving Read messages from "INBOX" to a "Deleted Items" box
   try
   {
      //Do synchronous login with AutoList
      imap1.Login("myServer", "myAccount", "myPassword");

      //Create Mailbox objects for easier reference
     Mailbox inboxBox = imap1.CurrentMailbox; //After Login with AutoList, this will be "INBOX"
     Mailbox deletedBox = imap1.Mailboxes["Deleted Items"];

     //Update Messages Count in "Deleted Items" box
     deletedBox.Refresh();

     //Display Messages Count in both boxes
     labelDisplay.Text = inboxBox.Messages.Count.ToString() + "  " + deletedBox.Messages.Count.ToString();

     //Get an array of ImapMessages with just flags
     ImapMessage[] messages = inboxBox.Get(inboxBox.Messages[0], inboxBox.Messages[inboxBox.Messages.Count-1], ImapMessageSections.Flags);

     //Copy Read Messages to "Deleted Items" box and Mark them for Deletion
     foreach (ImapMessage msg in messages)
     {
       if (msg.Seen) //If Seen flag is set
       {
          msg.CopyTo(deletedBox); //Copy to "Deleted Items" box
          msg.Delete = true; //Set deleted flag in "INBOX"
       }
     }

     //Permanently Remove Copied Messages from "INBOX"
     inboxBox.Purge();

     //Update Messages Count in "Deleted Items"
     deletedBox.Refresh();

     //Display new Messages Counts
     labelDisplay.Text = inboxBox.Messages.Count.ToString() + "  " + deletedBox.Messages.Count.ToString();

     //Logout from server
     imap1.Logout();
   }
   catch (Exception ex)
   {
      //Show MessageBox if error occurs
      MessageBox.Show(ex.Message, "Error Message", MessageBoxButtons.OK, MessageBoxIcon.Error);
   }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Imap.SynchronizingObject">
            <summary>Set this object to automatically control thread marshalling between worker threads and the main UI thread.</summary><value>
				If used, the main UI thread object; null if unused.
			</value><remarks>
				<p>Any application that (1) uses multithreading (for example, an application which uses an asynchronous BeginXXX method)
				and (2) must update a shared UI element on the main UI thread (such as a ListView object) from one of these worker threads must set this
				property to the value of the main UI thread object. If the application meets both of these requirements and
				this property is NOT set, you may see strange behavior in your application (such as strange exceptions or improper UI element values).</p>
				<p>If you do not know whether or not you need to use this property, simply take the failsafe
				approach when programming Windows applications and always set this property to the Main Form object.
				If any thread marshalling has to occur between a worker thread and the UI thread, it will occur automatically.</p>
				<p>Provides data for the CollectionChanged event.


					<b>NOTE for server implementations:</b> If you are using a PowerTCP server component to build a server application, you
				do not want to set this property (as it will cause the server application to become single-threaded). Instead, you want to use
				the Control.BeginInvoke method to thread-marshall to the main UI thread (see any of the installed sample server applications for an example of this).</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Imap.EnableMailboxNameEncoding">
            <summary>Gets or sets a value which detemines if mailbox names are encoded/decoded.</summary><remarks>
				<p>
				While mail servers should use mod utf-7 for mailbox names as specified in RFC 2060,
				some mail servers are noncompliant.
				The Imap component will autodetect whether the server is using 
				proper mod UTF-7 encoding or non encoded 8-bit for mailbox names. 
				If 8-bit, this property is set to false and it will skip 
				the decoding/encoding calls. This property must be set before login.
				</p>
			</remarks><value>true by default. Automatically set to false if the mail server uses non encoded 8-bit for mailbox names.</value>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Imap.Timeout">
            <summary>
				Specifies the maximum number of milliseconds to wait for responses to commands.
			</summary><remarks>
				<p>Gets or sets the time a client should wait for a reply from the IMAP 
				server. When commands are not executing, the connection will be kept open without 
				the possibility of timeout.</p>
			</remarks><value>
				 An integer specifying the maximum number of milliseconds to wait for responses to commands.
			</value>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Imap.DoEvents">
            <summary>
				  Gets or sets a value that controls the processing of events during blocking method calls.
			</summary><remarks>
				<p>When performing a synchronous (blocking) method, PowerTCP will process user-interface events (such as window painting)
            if this property is set to true AND the current thread has an event message queue.
            If no message queue is present (such as on an ASP page or under any worker thread), the value of this property has no effect.
            This property is used only for synchronous methods. Object.DoEvents is not needed if using asynchronous methods because the asynchronous method will execute on a different thread, allowing the UI thread to continue working unblocked.</p>
				<p>For example, this property is beneficial when an interactive application is being used and the user may want to abort a currently processing operation by clicking an "Abort" button.
			If Object.DoEvents is set to false, this will not be possible.
			Set the Object.DoEvents property to true and the application will respond to other events (such as button clicks) during synchronous operations.
			</p>
			</remarks><value>
				true if user-interface events should be processed during synchronous method calls; otherwise, false. The default value is true.
			</value>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Imap.UseMemoryStreams">
            <summary>
				Controls whether attachments are decoded and stored as FileStreams or as MemoryStreams when a message is retrieved.
			</summary><remarks>
				<p>
					When this property is true, all attachments of messages retrieved will automatically be decoded and
					saved as files in the system temp directory. This property is useful because it may be desirable to keep attachments in 
					memory instead of writing them to the file system. A good example of this is in the case of web applications.
				</p>
				<p>When this property is set to true, make sure that enough memory is available to hold all messages being downloaded.</p>
			</remarks><value>
				true if attachments should be decoded and stored as MemoryStreams when a message is retrieved; false if they should be decoded and stored as files.
			</value>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Imap.AutoPurge">
            <summary>Gets or sets a value which determines if messages are automatically expunged.</summary><remarks>
				<p>The Imap.AutoPurge property, when set to true, causes the component to automatically 
				send an EXPUNGE command whenever commands cause a change in the current 
				mailbox.  This will cause all messages with ImapMessage.Delete = true to be deleted 
				from the server.</p>
			</remarks><value>true if you desire all deleted messages to be purged; false otherwise. The default value is false.</value>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Imap.AutoList">
            <summary>Gets or sets a value which determines if a list is performed upon login.</summary><remarks>
				<p>The Imap.AutoList property, when true, causes the component to 
				automatically send an IMAP LIST “%” command on login to get all the top 
				level mailboxes and sets the Imap.CurrentMailbox to “INBOX” if such a 
				mailbox exists.  When set to false, no initial list command is issued.  
				This might be useful when a list other than a hierarchical one is needed 
				for the initial set of mailboxes or if writing a scripting application that
				does not depend on a list.</p>
			</remarks><value>true if you desire an automatic listing upon logging in; false otherwise. The default value is true.</value>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Imap.CurrentMailbox">
            <summary>Gets or sets the Mailbox object representing the currently selected mailbox.</summary><remarks>
				<p>Gets or sets the Mailbox object that represents the currently selected 
				mailbox. Developers can set this property to enter a 
				mailbox, causing the Imap component to send an EXAMINE command.  
				Note that when this property is set, this object is in 
				the Selected state.</p>
				<p>Any method that involves accessing messages within a mailbox will cause that Mailbox to be set to
				the Imap.CurrentMailbox.</p>
				<p>If Imap.AutoList is true, after logging in the Imap.CurrentMailbox is set to "INBOX" if such a mailbox exists. If this 
				mailbox does not exist, Imap.CurrentMailbox will return null.</p>
			</remarks><returns>If a mailbox is in the selected state, this property returns the Mailbox object representing the mailbox;
			null otherwise.</returns>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates logging into an IMAP server, copying read messages to a Deleted mailbox, and deleting them.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub DoMove()
   ' Demonstrate moving Read messages from "INBOX" to a "Deleted Items" box
   Try
      ' Do synchronous login with AutoList
      Imap1.Login("myServer", "myAccount", "myPassword")

      ' Create Mailbox objects for easier reference
      Dim InboxBox As Mailbox = Imap1.CurrentMailbox ' After Login with AutoList, this will be "INBOX"
      Dim DeletedBox As Mailbox = Imap1.Mailboxes("Deleted Items")

      ' Update Messages Count in "Deleted Items" box
      DeletedBox.Refresh()

      ' Display Messages Count in both boxes
      LabelDisplay.Text = InboxBox.Messages.Count.ToString() + "  " + DeletedBox.Messages.Count.ToString()

      ' Get an array of ImapMessages with just flags
      Dim Messages As ImapMessage() = InboxBox.Get(InboxBox.Messages(0), InboxBox.Messages(InboxBox.Messages.Count-1), ImapMessageSections.Flags)

      ' Copy Read Messages to "Deleted Items" box and Mark them for Deletion
      Dim Msg as ImapMessage
      For Each Msg in Messages
        If Msg.Seen Then 'If Seen flag is set 
           Msg.CopyTo(DeletedBox) ' Copy to "Deleted Items" box
           Msg.Delete = Grue ' Set deleted flag in "INBOX"
        End If
      Next

      'Permanently Remove Copied Messages from "INBOX"
      InboxBox.Purge()

      'Update Messages Count in "Deleted Items"
      DeletedBox.Refresh()

      'Display new Messages Counts
      LabelDisplay.Text = InboxBox.Messages.Count.ToString() + "  " + DeletedBox.Messages.Count.ToString()

      'Logout from server
      Imap1.Logout()
   
   Catch Ex As Exception
       ' Show MessageBox if error occurs
       MessageBox.Show(Ex.Message, "Error Message", MessageBoxButtons.OK, MessageBoxIcon.Error)
   End Try
End Sub
<span class="lang">[C#]</span>
private void DoMove()
{
   //Demonstrate moving Read messages from "INBOX" to a "Deleted Items" box
   try
   {
      //Do synchronous login with AutoList
      imap1.Login("myServer", "myAccount", "myPassword");

      //Create Mailbox objects for easier reference
     Mailbox inboxBox = imap1.CurrentMailbox; //After Login with AutoList, this will be "INBOX"
     Mailbox deletedBox = imap1.Mailboxes["Deleted Items"];

     //Update Messages Count in "Deleted Items" box
     deletedBox.Refresh();

     //Display Messages Count in both boxes
     labelDisplay.Text = inboxBox.Messages.Count.ToString() + "  " + deletedBox.Messages.Count.ToString();

     //Get an array of ImapMessages with just flags
     ImapMessage[] messages = inboxBox.Get(inboxBox.Messages[0], inboxBox.Messages[inboxBox.Messages.Count-1], ImapMessageSections.Flags);

     //Copy Read Messages to "Deleted Items" box and Mark them for Deletion
     foreach (ImapMessage msg in messages)
     {
       if (msg.Seen) //If Seen flag is set
       {
          msg.CopyTo(deletedBox); //Copy to "Deleted Items" box
          msg.Delete = true; //Set deleted flag in "INBOX"
       }
     }

     //Permanently Remove Copied Messages from "INBOX"
     inboxBox.Purge();

     //Update Messages Count in "Deleted Items"
     deletedBox.Refresh();

     //Display new Messages Counts
     labelDisplay.Text = inboxBox.Messages.Count.ToString() + "  " + deletedBox.Messages.Count.ToString();

     //Logout from server
     imap1.Logout();
   }
   catch (Exception ex)
   {
      //Show MessageBox if error occurs
      MessageBox.Show(ex.Message, "Error Message", MessageBoxButtons.OK, MessageBoxIcon.Error);
   }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Imap.Capabilities">
            <summary>Gets an array of strings representing the capabilites of the IMAP server.</summary><remarks>
				<p>After successfully logging in, the Imap component automatically issues the 
				IMAP CAPABILITY command, which the server responds to by listing it's capabilities.
				The Imap.Capabilites property returns this list. For example, if "IDLE" is part
				of this collection this indicates support for the IMAP IDLE command.</p>
			</remarks><value>An array of strings representing the capabilites as reported by the IMAP server.</value>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Imap.Delimiter">
            <summary>Gets the delimiter used to separate mailbox levels.</summary><remarks>
				<p>Returns the delimiter character which is used by the server to 
				indicate mailbox hierarchy (ex. for a mailbox name "INBOX\spam", 
				the delimiter "\" might be used).</p>
			</remarks><value>A string representing the hierarchy delimiter used by the server.</value>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Imap.Tag">
            <summary>
			Gets or sets an object reference that can be used to associate this instance with any other.
		</summary><remarks>
			Use this property to associate any type derived from Object class with the component. 
			A common use for the <B>Tag</B> property is to store data that is closely associated with the component.
		</remarks><value>
		Any object that is associated with the component; null if no objects are 
		associated with the component.
		</value><summary>
            Gets or sets an object reference that can be used to associate this instance with any other.
            </summary><value>
            Any object that is associated with the object, <b>null</b> if no objects are associated with the object
            </value><remarks>
				<p>
			 Use this property to associate any object with the object.				
            </p>
			</remarks>
        </member>
        <member name="E:Dart.PowerTCP.Mail.Imap.EndLogin">
            <summary>Raised when the asynchronous operation started by the Imap.BeginLogin method completes.</summary><remarks>
				<p>This event is raised when the asynchronous operation started by the Imap.BeginLogin method completes. An ImapResponseEventArgs object is passed into the event handler,  encapsulating the 
				response(s) from the server. If an exception occurred during the asynchronous operation, it would also be returned in the ImapResponseEventArgs object in the ImapResponseEventArgs.Exception property. 
				If an exception is present, it will be thrown if you access any member of the ImapResponseEventArgs object.</p>
				<p>This event MUST be implemented if you are using the Imap.BeginLogin method. See the topic Using EndXXX Events for more information.</p>
				<p>For more information on using PowerTCP events, see the topic Using Events In PowerTCP.</p>
			</remarks>
        </member>
        <member name="E:Dart.PowerTCP.Mail.Imap.EndLogout">
            <summary>Raised when the asynchronous operation started by the Imap.BeginLogout method completes.</summary><remarks>
				<p>This event is raised when the asynchronous operation started by the Imap.BeginLogout method completes. An ImapResponseEventArgs object is passed into the event handler,  encapsulating the 
				response(s) from the server. If an exception occurred during the asynchronous operation, it would also be returned in the ImapResponseEventArgs object in the ImapResponseEventArgs.Exception property. 
				If an exception is present, it will be thrown if you access any member of the ImapResponseEventArgs object.</p>
				<p>This event MUST be implemented if you are using the Imap.BeginLogout method. See the topic Using EndXXX Events for more information.</p>
				<p>For more information on using PowerTCP events, see the topic Using Events In PowerTCP.</p>
			</remarks>
        </member>
        <member name="E:Dart.PowerTCP.Mail.Imap.EndNoop">
            <summary>Raised when the asynchronous operation started by the Imap.BeginNoop method completes.</summary><remarks>
				<p>This event is raised when the asynchronous operation started by the Imap.BeginNoop method completes. An ImapResponseEventArgs object is passed into the event handler,  encapsulating the 
				response(s) from the server. If an exception occurred during the asynchronous operation, it would also be returned in the ImapResponseEventArgs object in the ImapResponseEventArgs.Exception property. 
				If an exception is present, it will be thrown if you access any member of the ImapResponseEventArgs object.</p>
				<p>This event MUST be implemented if you are using the Imap.BeginNoop method. See the topic Using EndXXX Events for more information.</p>
				<p>For more information on using PowerTCP events, see the topic Using Events In PowerTCP.</p>
			</remarks>
        </member>
        <member name="E:Dart.PowerTCP.Mail.Imap.EndInvoke">
            <summary>Raised when the asynchronous operation started by the Imap.BeginInvoke method completes.</summary><remarks>
				<p>This event is raised when the asynchronous operation started by the Imap.BeginInvoke method completes. An ImapResponseEventArgs object is passed into the event handler,  encapsulating the 
				response(s) from the server. If an exception occurred during the asynchronous operation, it would also be returned in the ImapResponseEventArgs object in the ImapResponseEventArgs.Exception property. 
				If an exception is present, it will be thrown if you access any member of the ImapResponseEventArgs object.</p>
				<p>This event MUST be implemented if you are using the Imap.BeginInvoke method. See the topic Using EndXXX Events for more information.</p>
				<p>For more information on using PowerTCP events, see the topic Using Events In PowerTCP.</p>
			</remarks>
        </member>
        <member name="E:Dart.PowerTCP.Mail.Imap.EndList">
            <summary>Raised when the asynchronous operation started by the Imap.BeginList method completes.</summary><remarks>
				<p>This event is raised when the asynchronous operation started by the Imap.BeginList method completes. A MailboxEventArgs object is passed into the event handler,  encapsulating any
				Mailbox objects affected by the operation. If an exception occurred during the asynchronous operation, it would also be returned in the MailboxEventArgs object in the MailboxEventArgs.Exception property. 
				If an exception is present, it will be thrown if you access any member of the MailboxEventArgs object.</p>
				<p>This event MUST be implemented if you are using the Imap.BeginList method. See the topic Using EndXXX Events for more information.</p>
				<p>For more information on using PowerTCP events, see the topic Using Events In PowerTCP.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates performing an asynchronous listing.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub AsynchronousListTest()
   ' Set Autolist to false. We will explicitly call for a listing.
   Imap1.AutoList = False

   ' Login to the server.
   Imap1.Login(Server, User, Pass)

   ' Begin an asynchronous listing.
   Imap1.BeginList(Nothing)
End Sub

Private Sub Imap1_EndList(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureMail.MailboxEventArgs) Handles Imap1.EndList
   If e.Exception Is Nothing Then
      Debug.WriteLine("The following mailboxes were reported.")
      Dim Box As Mailbox
      For Each Box In E.Mailboxes
         Debug.WriteLine(Box.Name)
      End If
   End If
End Sub
<span class="lang">[C#]</span>
private void AsynchronousListTest()
{
   // Set Autolist to false. We will explicitly call for a listing.
   imap1.AutoList = false;

   // Login to the server.
   imap1.Login(Server, User, Pass);

   // Begin an asynchronous listing.
   imap1.BeginList(null);
}

private void imap1_EndList(object sender, Dart.PowerTCP.SecureMail.MailboxEventArgs e)
{
   if(e.Exception == null)
   {
      Debug.WriteLine("The following mailboxes were reported.");
      foreach(Mailbox box in e.Mailboxes)
         Debug.WriteLine(box.Name);
   }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="E:Dart.PowerTCP.Mail.Imap.EndMailboxAdd">
            <summary>Raised when the asynchronous operation started by the MailboxCollection.BeginAdd method completes.</summary><remarks>
				<p>This event is raised when the asynchronous operation started by the MailboxCollection.BeginAdd method completes. A MailboxEventArgs object is passed into the event handler,  encapsulating the 
				Mailbox objects affected by the operation. If an exception occurred during the asynchronous operation, it would also be returned in the MailboxEventArgs object in the MailboxEventArgs.Exception property. 
				If an exception is present, it will be thrown if you access any member of the MailboxEventArgs object.</p>
				<p>This event MUST be implemented if you are using the MailboxCollection.BeginAdd method. See the topic Using EndXXX Events for more information.</p>
				<p>For more information on using PowerTCP events, see the topic Using Events In PowerTCP.</p>
			</remarks>
        </member>
        <member name="E:Dart.PowerTCP.Mail.Imap.EndExamine">
            <summary>Raised when the asynchronous operation started by the Imap.BeginExamine method completes.</summary><remarks>
				<p>This event is raised when the asynchronous operation started by the Imap.BeginExamine method completes. An ImapResponseEventArgs object is passed into the event handler,  encapsulating the 
				response(s) from the server. If an exception occurred during the asynchronous operation, it would also be returned in the ImapResponseEventArgs object in the ImapResponseEventArgs.Exception property. 
				If an exception is present, it will be thrown if you access any member of the ImapResponseEventArgs object.</p>
				<p>This event MUST be implemented if you are using the Imap.BeginExamine method. See the topic Using EndXXX Events for more information.</p>
				<p>For more information on using PowerTCP events, see the topic Using Events In PowerTCP.</p>
			</remarks>
        </member>
        <member name="E:Dart.PowerTCP.Mail.Imap.LineReceived">
            <summary>Raised each time a line response is received from the server.</summary><remarks>
				<p>This event is raised each time a line response is received from the server. An ImapResponse object which encapsulates the update received from the server is passed into
			the event handler.</p>
				<p>For more information on using PowerTCP events, see the topic Using Events In PowerTCP.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the LineReceived event to detect Status responses.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub DoSomething()
   ' Log in. The Imap.LineReceived event will be raised when data is received
   Imap1.Login(Server, User, Pass)

   ' Send a NOOP
   Imap1.Noop()

   ' Log out
   Imap1.Logout()
End Sub

Private Sub Imap1_LineReceived(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureMail.ImapResponseEventArgs) Handles Imap1.LineReceived
   Dim Response As ImapResponse
   ' Iterate through all responses.
   For Each Response In e.Responses
      ' Check if it is a status response. 
      If Response.ResponseType = ImapResponseType.Status Then 
         Debug.WriteLine("The server has returned a status response")
         Debug.WriteLine("Status: " + Response.Status)
         Debug.WriteLine("Explanation: " + Response.Explanation)
      End If
   Next
End Sub
<span class="lang">[C#]</span>
private void DoSomething()
{
   // Log in. The Imap.LineReceived event will be raised when data is received
   imap1.Login(Server, User, Pass);

   // Send a NOOP
   imap1.Noop();

   // Log out
   imap1.Logout();
}

private void imap1_LineReceived(object sender, Dart.PowerTCP.SecureMail.ImapResponseEventArgs e)
{
   // Iterate through all responses.
   foreach(ImapResponse response in e.Responses)
   {
      // Check if it is a status response.
      if(response.ResponseType == ImapResponseType.Status)
      {
         Debug.WriteLine("The server has returned a status response");
         Debug.WriteLine("Status: " + response.Status);
         Debug.WriteLine("Explanation: " + response.Explanation);
      }
   }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="E:Dart.PowerTCP.Mail.Imap.Mailbox">
            <summary>Raised when information about a mailbox is received while performing a listing.</summary><remarks>
				<p>The Imap.List method requests a listing from the server (this also occurs immediately after using Imap.Login
				if Imap.AutoList is true). This method causes the server to return a listing. Whenever mailbox information
				is retrieved while getting the listing, the Imap.Mailbox event is raised. A MailboxEventArgs object which encapulates the mailbox is passed into
				the event handler.</p>
				<p>For more information on using PowerTCP events, see the topic Using Events In PowerTCP.</p>
			</remarks>
        </member>
        <member name="E:Dart.PowerTCP.Mail.Imap.Progress">
            <summary>Raised repeatedly while a message or message section is retrieved.</summary><remarks>
				<p>When a message or message section is retrieved from the server, the Imap.Progress event 
				will be raised in the frequency specified by Tcp.ReceiveBufferSize. 
				This event will contain data useful for displaying progress to the user. 
				For example, if you wish to display progress for the retrieval of data using
				a ProgressBar, you could use 0 for ProgressBar.Minimum, ImapProgressEventArgs.Length for 
				ProgressBar.Maximum, and ImapProgressEventArgs.Position as ProgressBar.Value.</p>
			</remarks>
        </member>
        <member name="E:Dart.PowerTCP.Mail.Imap.Alert">
            <summary>Raised when an alert that must be shown to the user is received.</summary><remarks>
				<p>Raised when an alert that must be shown to the user arrives.  
				Responses of this type from the server are indicated by the 
				ImapCode.Alert value (ImapResponse.Code = ImapCode.Alert).</p>
			</remarks>
        </member>
        <member name="E:Dart.PowerTCP.Mail.Imap.EndGetMessage">
            <summary>Raised when any asynchronous operation which retrieves messages completes.</summary><remarks>
				<p>This event is raised when any asynchronous operation which retrieves messages completes (ex. use of the Mailbox.BeginGet or ImapMessage.BeginGet methods). An ImapMessageEventArgs object is passed into the event handler,  encapsulating the 
				ImapMessage objects affected by this operation. If an exception occurred during the asynchronous operation, it would also be returned in the ImapMessageEventArgs object in the ImapMessageEventArgs.Exception property. 
				If an exception is present, it will be thrown if you access any member of the ImapMessageEventArgs object.</p>
				<p>Since this event can be raised by either Mailbox.BeginGet or ImapMessage.BeginGet, you may want to check the <i>sender</i> to determine
				which caused the event to be raised.</p>
				<p>This event MUST be implemented if you are using any method which prompts the asynchronous retrieval of messages. See the topic Using EndXXX Events for more information.</p>
				<p>For more information on using PowerTCP events, see the topic Using Events In PowerTCP.</p>
			</remarks>
        </member>
        <member name="E:Dart.PowerTCP.Mail.Imap.EndGetPart">
            <summary>Raised when the asynchronous operation started by the ImapMessage.BeginGetPart method completes.</summary><remarks>
				<p>This event is raised when the asynchronous operation started by the ImapMessage.BeginGetPart method completes. A MessagePartEventArgs object is passed into the event handler, containing a Stream
				object filled with the data for the retrieved part (accessable via the MessagePartEventArgs.Part property). If an exception occurred during the asynchronous operation, it would also be returned in the MessagePartEventArgs object in the MessagePartEventArgs.Exception property. 
				If an exception is present, it will be thrown if you access any member of the MessagePartEventArgs object.</p>
				<p>This event MUST be implemented if you are using the ImapMessage.BeginGetPart method. See the topic Using EndXXX Events for more information.</p>
				<p>For more information on using PowerTCP events, see the topic Using Events In PowerTCP.</p>
			</remarks>
        </member>
        <member name="E:Dart.PowerTCP.Mail.Imap.EndMailboxRemove">
            <summary>Raised when the asynchronous operation started by the MailboxCollection.BeginRemove or Mailbox.BeginDelete method completes.</summary><remarks>
				<p>This event is raised when the asynchronous operation started by the MailboxCollection.BeginRemove or Mailbox.BeginDelete method completes. An ImapResponseEventArgs object is passed into the event handler,  encapsulating the 
				response(s) from the server. If an exception occurred during the asynchronous operation, it would also be returned in the ImapResponseEventArgs object in the ImapResponseEventArgs.Exception property. 
				If an exception is present, it will be thrown if you access any member of the ImapResponseEventArgs object.</p>
				<p>This event MUST be implemented if you are using the MailboxCollection.BeginRemove or Mailbox.BeginDelete method. See the topic Using EndXXX Events for more information.</p>
				<p>For more information on using PowerTCP events, see the topic Using Events In PowerTCP.</p>
			</remarks>
        </member>
        <member name="E:Dart.PowerTCP.Mail.Imap.EndUnsubscribe">
            <summary>Raised when the asynchronous operation started by the Mailbox.BeginUnsubscribe method completes.</summary><remarks>
				<p>This event is raised when the asynchronous operation started by the Mailbox.BeginUnsubscribe method completes. An ImapResponseEventArgs object is passed into the event handler,  encapsulating the 
				response(s) from the server. If an exception occurred during the asynchronous operation, it would also be returned in the ImapResponseEventArgs object in the ImapResponseEventArgs.Exception property. 
				If an exception is present, it will be thrown if you access any member of the ImapResponseEventArgs object.</p>
				<p>This event MUST be implemented if you are using the Mailbox.BeginUnsubscribe method. See the topic Using EndXXX Events for more information.</p>
				<p>For more information on using PowerTCP events, see the topic Using Events In PowerTCP.</p>
			</remarks>
        </member>
        <member name="E:Dart.PowerTCP.Mail.Imap.EndSubscribe">
            <summary>Raised when the asynchronous operation started by the Mailbox.BeginSubscribe method completes.</summary><remarks>
				<p>This event is raised when the asynchronous operation started by the Mailbox.BeginSubscribe method completes. An ImapResponseEventArgs object is passed into the event handler,  encapsulating the 
				response(s) from the server. If an exception occurred during the asynchronous operation, it would also be returned in the ImapResponseEventArgs object in the ImapResponseEventArgs.Exception property. 
				If an exception is present, it will be thrown if you access any member of the ImapResponseEventArgs object.</p>
				<p>This event MUST be implemented if you are using the Mailbox.BeginSubscribe method. See the topic Using EndXXX Events for more information.</p>
				<p>For more information on using PowerTCP events, see the topic Using Events In PowerTCP.</p>
			</remarks>
        </member>
        <member name="E:Dart.PowerTCP.Mail.Imap.EndRefresh">
            <summary>Raised when the asynchronous operation which refreshes the state of an object completes.</summary><remarks>
				<p>This event is raised when the asynchronous operation which refreshes the state of an object completes (ex.Mailbox.BeginRefresh and MailboxCollection.BeginRefresh). An ImapResponseEventArgs object is passed into the event handler,  encapsulating the 
				response(s) from the server. If an exception occurred during the asynchronous operation, it would also be returned in the ImapResponseEventArgs object in the ImapResponseEventArgs.Exception property. 
				If an exception is present, it will be thrown if you access any member of the ImapResponseEventArgs object.</p>
				<p>The <i>state</i> object (which is passed in to the BeginRefresh method) should be used to differentiate between MailBox and MailBoxCollection classes.</p>
				<p>This event MUST be implemented if you are using either the Mailbox.BeginRefresh or MailboxCollection.BeginRefresh method. See the topic Using EndXXX Events for more information.</p>
				<p>For more information on using PowerTCP events, see the topic Using Events In PowerTCP.</p>
			</remarks>
        </member>
        <member name="E:Dart.PowerTCP.Mail.Imap.EndMessageAdd">
            <summary>Raised when any asynchronous operation started by the ImapMessageCollection.BeginAdd method completes.</summary><remarks>
				<p>This event is raised when the asynchronous operation started by the ImapMessageCollection.BeginAdd method completes. An ImapMessageEventArgs object is passed into the event handler,  encapsulating the 
				ImapMessage objects affected by this operation. If an exception occurred during the asynchronous operation, it would also be returned in the ImapMessageEventArgs object in the ImapMessageEventArgs.Exception property. 
				If an exception is present, it will be thrown if you access any member of the ImapMessageEventArgs object.</p>
				<p>This event MUST be implemented if you are using the ImapMessageCollection.BeginAdd method. See the topic Using EndXXX Events for more information.</p>
				<p>For more information on using PowerTCP events, see the topic Using Events In PowerTCP.</p>
			</remarks>
        </member>
        <member name="E:Dart.PowerTCP.Mail.Imap.EndClear">
            <summary>Raised when the asynchronous operation started by the ImapMessageCollection.BeginClear method completes.</summary><remarks>
				<p>This event is raised when the asynchronous operation started by the ImapMessageCollection.BeginClear method completes. An ImapResponseEventArgs object is passed into the event handler,  encapsulating the 
				response(s) from the server. If an exception occurred during the asynchronous operation, it would also be returned in the ImapResponseEventArgs object in the ImapResponseEventArgs.Exception property. 
				If an exception is present, it will be thrown if you access any member of the ImapResponseEventArgs object.</p>
				<p>This event MUST be implemented if you are using the ImapMessageCollection.BeginClear method. See the topic Using EndXXX Events for more information.</p>
				<p>For more information on using PowerTCP events, see the topic Using Events In PowerTCP.</p>
			</remarks>
        </member>
        <member name="E:Dart.PowerTCP.Mail.Imap.EndPurge">
            <summary>Raised when the asynchronous operation started by the Mailbox.BeginPurge method completes.</summary><remarks>
				<p>This event is raised when the asynchronous operation started by the Mailbox.BeginPurge method completes. An ImapResponseEventArgs object is passed into the event handler,  encapsulating the 
				response(s) from the server. If an exception occurred during the asynchronous operation, it would also be returned in the ImapResponseEventArgs object in the ImapResponseEventArgs.Exception property. 
				If an exception is present, it will be thrown if you access any member of the ImapResponseEventArgs object.</p>
				<p>This event MUST be implemented if you are using the Mailbox.BeginPurge method. See the topic Using EndXXX Events for more information.</p>
				<p>For more information on using PowerTCP events, see the topic Using Events In PowerTCP.</p>
			</remarks>
        </member>
        <member name="E:Dart.PowerTCP.Mail.Imap.EndSet">
            <summary>Raised when the asynchronous operation started by the Mailbox.BeginSet  method completes.</summary><remarks>
				<p>This event is raised when the asynchronous operation started by the Mailbox.BeginSet  method completes. An ImapResponseEventArgs object is passed into the event handler,  encapsulating the 
				response(s) from the server. If an exception occurred during the asynchronous operation, it would also be returned in the ImapResponseEventArgs object in the ImapResponseEventArgs.Exception property. 
				If an exception is present, it will be thrown if you access any member of the ImapResponseEventArgs object.</p>
				<p>This event MUST be implemented if you are using the Mailbox.BeginSet method. See the topic Using EndXXX Events for more information.</p>
				<p>For more information on using PowerTCP events, see the topic Using Events In PowerTCP.</p>
			</remarks>
        </member>
        <member name="E:Dart.PowerTCP.Mail.Imap.Update">
            <summary>Raised when an update is received from the server.</summary><remarks>
				<p>The Imap.Update event is raised when an update is received from the server. This can happen
				at any time, but there are two scenarios where this is most likely to occur. The first is when the 
				Imap component is in IDLE mode and received an update from the server. See the Imap.Idle property for more information
				about using IDLE mode. The second is when an update is received as response to a NOOP command. See the Imap.Noop
				or Imap.BeginNoop method for more info.</p>
				<p>When this event is raised, an ImapResponseEventArgs object which encapsulates the update received is passed into the event handler.</p>
				<p>For more information on using PowerTCP events, see the topic Using Events In PowerTCP.</p>
			</remarks>
        </member>
        <member name="E:Dart.PowerTCP.Mail.Imap.EndCopy">
            <summary>Raised when the asynchronous operation started by the Mailbox.BeginCopy method completes.</summary><remarks>
				<p>This event is raised when the asynchronous operation started by the Mailbox.BeginCopy method completes. An ImapResponseEventArgs object is passed into the event handler,  encapsulating the 
				response(s) from the server. If an exception occurred during the asynchronous operation, it would also be returned in the ImapResponseEventArgs object in the ImapResponseEventArgs.Exception property. 
				If an exception is present, it will be thrown if you access any member of the ImapResponseEventArgs object.</p>
				<p>This event MUST be implemented if you are using the Mailbox.BeginCopy method. See the topic Using EndXXX Events for more information.</p>
				<p>For more information on using PowerTCP events, see the topic Using Events In PowerTCP.</p>
			</remarks>
        </member>
        <member name="E:Dart.PowerTCP.Mail.Imap.EndSearch">
            <summary>Raised when any asynchronous operation started by the Mailbox.BeginSearch method completes.</summary><remarks>
				<p>This event is raised when the asynchronous operation started by the Mailbox.BeginSearch method completes. An ImapMessageEventArgs object is passed into the event handler,  encapsulating the 
				ImapMessage objects affected by this operation. If an exception occurred during the asynchronous operation, it would also be returned in the ImapMessageEventArgs object in the ImapMessageEventArgs.Exception property. 
				If an exception is present, it will be thrown if you access any member of the ImapMessageEventArgs object.</p>
				<p>This event MUST be implemented if you are using the Mailbox.BeginSearch method. See the topic Using EndXXX Events for more information.</p>
				<p>For more information on using PowerTCP events, see the topic Using Events In PowerTCP.</p>
			</remarks>
        </member>
        <member name="T:Dart.PowerTCP.Mail.ImapAppendCommand">
            <summary>
            Summary description for ImapAppendCommand.
            </summary>
        </member>
        <member name="T:Dart.PowerTCP.Mail.ImapMailboxCommand">
            <summary>
            cwd 2002-11-21
            ImapMailboxCommand is the base class for all commands 
            that operate on a mailbox, just wrapping up the 
            members needed for that.
            </summary>
        </member>
        <member name="T:Dart.PowerTCP.Mail.ImapCommand">
            <summary>
            cwd 2002-11-21
            ImapCommand is the base class for all command objects 
            in the system.  This is based upon the Command design 
            pattern (Design Patterns, Gamma et al.).  This derives from 
            ThreadSafe in order to take advantage of the thread-safe
            blocking capabilities of that object.
            </summary>
        </member>
        <member name="T:Dart.PowerTCP.Mail.ThreadSafe">
            <summary>
            Summary description for ThreadSafe.
            </summary>
        </member>
        <member name="T:Dart.PowerTCP.Mail.ImapCapabilityCommand">
            <summary>
            Summary description for ImapCapabilityCommand.
            </summary>
        </member>
        <member name="T:Dart.PowerTCP.Mail.ImapCheckMailboxCommand">
            <summary>
            Summary description for ImapCheckMailboxCommand.
            </summary>
        </member>
        <member name="T:Dart.PowerTCP.Mail.ImapSelectedStateCommand">
            <summary>
            cwd 2002-11-21
            ImapSelectedStateCommand is the base class for all command 
            objects that require a given mailbox to be SELECTed before
            they can be executed.  Before the command is executed, 
            InternalPreprocess is called and a SELECT command is 
            sent if necessary.
            </summary>
        </member>
        <member name="T:Dart.PowerTCP.Mail.ImapCloseMailboxCommand">
            <summary>
            Summary description for ImapCloseMailboxCommand.
            </summary>
        </member>
        <member name="T:Dart.PowerTCP.Mail.ImapCopyCommand">
            <summary>
            Summary description for ImapCopyCommand.
            </summary>
        </member>
        <member name="T:Dart.PowerTCP.Mail.ImapCreateMailboxCommand">
            <summary>
            Summary description for ImapCreateMailboxCommand.
            </summary>
        </member>
        <member name="T:Dart.PowerTCP.Mail.ImapCustomCommand">
            <summary>
            Summary description for ImapCustomCommand.
            </summary>
        </member>
        <member name="T:Dart.PowerTCP.Mail.ImapDeleteMailboxCommand">
            <summary>
            Summary description for ImapDeleteMailboxCommand.
            </summary>
        </member>
        <member name="T:ImapEditor">
            <summary>
            Summary description for ImapEditor.
            </summary>
        </member>
        <member name="T:ImapEditorForm">
            <summary>
            Summary description for ImapEditorForm.
            </summary>
        </member>
        <member name="F:ImapEditorForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ImapEditorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:ImapEditorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Dart.PowerTCP.Mail.ImapExamineMailboxCommand">
            <summary>
            Summary description for ImapExamineMailboxCommand.
            </summary>
        </member>
        <member name="T:Dart.PowerTCP.Mail.ImapExpungeCommand">
            <summary>
            Summary description for ImapExpungeCommand.
            </summary>
        </member>
        <member name="T:Dart.PowerTCP.Mail.ImapFetchCommand">
            <summary>
            Summary description for ImapFetchCommand.
            </summary>
        </member>
        <member name="T:Dart.PowerTCP.Mail.ImapIdleCommand">
            <summary>
            Summary description for ImapIdleCommand.
            </summary>
        </member>
        <member name="T:ImapLicenseProvider">
            <summary>
            Summary description for ImapLicenseProvider.
            </summary>
        </member>
        <member name="T:PowerTcpLicenseProvider">
            <summary>
            Base class for all PowerTCP classes
            </summary>
        </member>
        <member name="M:PowerTcpLicenseProvider.GetKeyValue(System.String)">
            <summary>
            This method checks CurrentUser first and LocalMachine seconds, looking for the string value for "name"
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Dart.PowerTCP.Mail.ImapListCommand">
            <summary>
            Summary description for ImapListCommand.
            </summary>
        </member>
        <member name="T:Dart.PowerTCP.Mail.ImapLoginCommand">
            <summary>
            Summary description for ImapLoginCommand.
            </summary>
        </member>
        <member name="T:Dart.PowerTCP.Mail.ImapLogoutCommand">
            <summary>
            Summary description for ImapLogoutCommand.
            </summary>
        </member>
        <member name="T:Dart.PowerTCP.Mail.ImapMessage">
            <summary>Represents an IMAP message on the server.</summary><remarks>
				<p>The ImapMessage class represents an IMAP message on the server.  
				When setting properties in this object, the 
				component actually executes a blocking call to the server to update the 
				property in question (using the IMAP STORE command).  For bulk operations 
				that set properties on ImapMessage objects, consider using the Mailbox.Set 
				command for better performance. Operations performed using ImapMessage 
				objects use the UID over the ID whenever possible for performance and 
				consistency.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates logging into an IMAP server, copying read messages to a Deleted mailbox, and deleting them.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub DoMove()
   ' Demonstrate moving Read messages from "INBOX" to a "Deleted Items" box
   Try
      ' Do synchronous login with AutoList
      Imap1.Login("myServer", "myAccount", "myPassword")

      ' Create Mailbox objects for easier reference
      Dim InboxBox As Mailbox = Imap1.CurrentMailbox ' After Login with AutoList, this will be "INBOX"
      Dim DeletedBox As Mailbox = Imap1.Mailboxes("Deleted Items")

      ' Update Messages Count in "Deleted Items" box
      DeletedBox.Refresh()

      ' Display Messages Count in both boxes
      LabelDisplay.Text = InboxBox.Messages.Count.ToString() + "  " + DeletedBox.Messages.Count.ToString()

      ' Get an array of ImapMessages with just flags
      Dim Messages As ImapMessage() = InboxBox.Get(InboxBox.Messages(0), InboxBox.Messages(InboxBox.Messages.Count-1), ImapMessageSections.Flags)

      ' Copy Read Messages to "Deleted Items" box and Mark them for Deletion
      Dim Msg as ImapMessage
      For Each Msg in Messages
        If Msg.Seen Then 'If Seen flag is set 
           Msg.CopyTo(DeletedBox) ' Copy to "Deleted Items" box
           Msg.Delete = Grue ' Set deleted flag in "INBOX"
        End If
      Next

      'Permanently Remove Copied Messages from "INBOX"
      InboxBox.Purge()

      'Update Messages Count in "Deleted Items"
      DeletedBox.Refresh()

      'Display new Messages Counts
      LabelDisplay.Text = InboxBox.Messages.Count.ToString() + "  " + DeletedBox.Messages.Count.ToString()

      'Logout from server
      Imap1.Logout()
   
   Catch Ex As Exception
       ' Show MessageBox if error occurs
       MessageBox.Show(Ex.Message, "Error Message", MessageBoxButtons.OK, MessageBoxIcon.Error)
   End Try
End Sub
<span class="lang">[C#]</span>
private void DoMove()
{
   //Demonstrate moving Read messages from "INBOX" to a "Deleted Items" box
   try
   {
      //Do synchronous login with AutoList
      imap1.Login("myServer", "myAccount", "myPassword");

      //Create Mailbox objects for easier reference
     Mailbox inboxBox = imap1.CurrentMailbox; //After Login with AutoList, this will be "INBOX"
     Mailbox deletedBox = imap1.Mailboxes["Deleted Items"];

     //Update Messages Count in "Deleted Items" box
     deletedBox.Refresh();

     //Display Messages Count in both boxes
     labelDisplay.Text = inboxBox.Messages.Count.ToString() + "  " + deletedBox.Messages.Count.ToString();

     //Get an array of ImapMessages with just flags
     ImapMessage[] messages = inboxBox.Get(inboxBox.Messages[0], inboxBox.Messages[inboxBox.Messages.Count-1], ImapMessageSections.Flags);

     //Copy Read Messages to "Deleted Items" box and Mark them for Deletion
     foreach (ImapMessage msg in messages)
     {
       if (msg.Seen) //If Seen flag is set
       {
          msg.CopyTo(deletedBox); //Copy to "Deleted Items" box
          msg.Delete = true; //Set deleted flag in "INBOX"
       }
     }

     //Permanently Remove Copied Messages from "INBOX"
     inboxBox.Purge();

     //Update Messages Count in "Deleted Items"
     deletedBox.Refresh();

     //Display new Messages Counts
     labelDisplay.Text = inboxBox.Messages.Count.ToString() + "  " + deletedBox.Messages.Count.ToString();

     //Logout from server
     imap1.Logout();
   }
   catch (Exception ex)
   {
      //Show MessageBox if error occurs
      MessageBox.Show(ex.Message, "Error Message", MessageBoxButtons.OK, MessageBoxIcon.Error);
   }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="T:Dart.PowerTCP.Mail.MessageBase">
            <summary>Abstract base class for all server-side mail messages.</summary><value>
				<p>ImapMessage and PopMessage derive from this class, providing shared functionality
				to both classes.</p>
			</value>
        </member>
        <member name="P:Dart.PowerTCP.Mail.MessageBase.Delete">
            <summary>
				Gets a value indicating if the message has been marked for deletion.
			</summary><remarks>
				<p>Set this property to mark a message for deletion. How the message is deleted is dependent on
				the protocol. If using the Pop component, all messages will be deleted upon logout. If using the
				Imap component, all messages will be deleted when Mailbox.Refresh is called, if Imap.AutoPurge is 
				false and automatically with any change in the mailbox when Imap.AutoPurge is true.</p>
			</remarks><value>
				true if the message has been marked for deletion, false otherwise; The default value is false;
			</value>
        </member>
        <member name="P:Dart.PowerTCP.Mail.MessageBase.Size">
            <summary>
				Returns the size of the message in bytes.
			</summary><remarks>
				<p>This property returns the size of the message in bytes.</p>
			</remarks><value>
				An integer representing the size of the message in bytes.
			</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates retrieving partial messages.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Login to the server
Imap1.Login(Server, User, Pass)

' Get the current mailbox in a short variable name so we don't have to type as much
Dim Box As Mailbox = Imap1.CurrentMailbox

Dim First As ImapMessage = Box.Messages(0)
Dim Last As ImapMessage = Box.Messages(box.Messages.Count - 1)

' Get all message headers and messages sizes
Box.Get(First, Last, ImapMessageSections.Header | ImapMessageSections.Size)

' Display Results.
Dim Msg as ImapMessage
For Each Msg in Box.Messages
   Debug.WriteLine("Size: " + Msg.Size)
   Debug.WriteLine("Subject: " + Msg.Message.Subject)
Next

' Logout
Imap1.Logout()
<span class="lang">[C#]</span>
// Login to the server
imap1.Login(Server, User, Pass);

// Get the current mailbox in a short variable name so we don't have to type as much
Mailbox box = imap1.CurrentMailbox;

ImapMessage first = box.Messages[0];
ImapMessage last = box.Messages[box.Messages.Count - 1];

// Get all message headers and messages sizes
box.Get(first, last, ImapMessageSections.Header | ImapMessageSections.Size);

// Display Results.
foreach(ImapMessage msg in box.Messages)
{
   Debug.WriteLine("Size: " + msg.Size);
   Debug.WriteLine("Subject: " + msg.Message.Subject);
}

// Logout
imap1.Logout();
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.MessageBase.Complete">
            <summary>
				Gets a value indicating if the message has been downloaded from the server.
			</summary><value>
				true if the message has been downloaded from the server; otherwise false.
			</value><remarks>
				<p>When the actual message that is encapsulated by this object has been downloaded, this property will return true.</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.MessageBase.Tag">
            <summary>
			Gets or sets an object reference that can be used to associate this instance with any other.
		</summary><remarks>
			Use this property to associate any type derived from Object class with the component. 
			A common use for the <B>Tag</B> property is to store data that is closely associated with the component.
		</remarks><value>
		Any object that is associated with the component; null if no objects are 
		associated with the component.
		</value><summary>
            Gets or sets an object reference that can be used to associate this instance with any other.
            </summary><value>
            Any object that is associated with the object, <b>null</b> if no objects are associated with the object
            </value><remarks>
				<p>
			 Use this property to associate any object with the object.				
            </p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.MessageBase.Stream">
            <summary>
				Provides access to the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> object containing the encoded message.
			</summary><remarks>
				<p>This property differs from the Object.Message property in that the Object.Message
				 returns a MessageStream object containing decoded data, where
				the Object.Stream property always returns a <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> object containing encoded data.</p>
			</remarks><value>
				A <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> object containing the encoded message.
			</value>
        </member>
        <member name="P:Dart.PowerTCP.Mail.MessageBase.Message">
            <summary>
				Provides access to the MessageStream object representing the actual message.
			</summary><remarks>
				<p>
					The Object.Message property returns the MessageStream object representing the 
					actual message. If a user-defined <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> was used
					to retrieve the message data (ex. by using PopMessage.Get, passing in a Stream), this property would return null.
				</p>
			</remarks><value>A MessageStream object representing the actual message.</value>
        </member>
        <member name="P:Dart.PowerTCP.Mail.MessageBase.Id">
            <summary>
				Returns the id of the message.
			</summary><remarks>
				<p>MessageBase.Id is initialized at login to an auto-incremented integer,
				ranging from 1 to number of messages. This property is useful for referring to a particular
				message within your application. <b>Note:</b> MessageBase.Id is 1-based and MessageBase.Messages is 0-based, so
				to access the message with id "1" you will have to access MessageBase.Messages[0].</p>
				<p>This value may change as messages are added or removed.</p>
			</remarks><value>An integer representing the identification number of the message.</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates logging into a POP server and retrieving all messages.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Automatically remove files after getting them from the server
Pop1.AutoDelete = True

' Login. The default settings will cause the Pop component to
' automatically retrieve all messages, delete them from the
' server, and logout.
Pop1.Login("mail.test.com", "testuser", "testpass")

' All message retrieved. Iterate through the collection
' and display data.
Dim msg As PopMessage
For Each msg In Pop1.Messages
   Debug.WriteLine("Message ID: " + msg.Id)
   Debug.WriteLine("Message UID: " + msg.Uid)
   Debug.WriteLine("Messge Size: " + msg.Size)
   Debug.WriteLine("From: " + msg.Message.From.Address)
   Debug.WriteLine("Subject: " + msg.Message.Subject)
Next
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Automatically remove files after getting them from the server
pop1.AutoDelete = true;

// Login. The default settings will cause the Pop component to
// automatically retrieve all messages, delete them from the
// server, and logout.
pop1.Login("mail.test.com", "testuser", "testpass");

// All message retrieved. Iterate through the collection
// and display data.
foreach(PopMessage msg in pop1.Messages)
{
   Debug.WriteLine("Message ID: " + msg.Id);
   Debug.WriteLine("Message UID: " + msg.Uid);
   Debug.WriteLine("Messge Size: " + msg.Size);
   Debug.WriteLine("From: " + msg.Message.From.Address);
   Debug.WriteLine("Subject: " + msg.Message.Subject);
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.MessageBase.Uid">
            <summary>
				Returns the unique identifier of the message.
			</summary><remarks>
				<p>The unique ID of this message.  This is used for accessing this 
				message in a manner which cannot be affected by server-side removal of 
				other messages (The Object.Id property does not guarantee this).  The uniqueness of the identifier varies depending on the 
				mail protocol used for this message (ex. IMAP UIDs are quaranteed unique 
				on a per-mailbox basis only).</p>
			</remarks><value>
				A string representing the server-defined unique identifier for the message. 
			</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates logging into a POP server and retrieving all messages.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Automatically remove files after getting them from the server
Pop1.AutoDelete = True

' Login. The default settings will cause the Pop component to
' automatically retrieve all messages, delete them from the
' server, and logout.
Pop1.Login("mail.test.com", "testuser", "testpass")

' All message retrieved. Iterate through the collection
' and display data.
Dim msg As PopMessage
For Each msg In Pop1.Messages
   Debug.WriteLine("Message ID: " + msg.Id)
   Debug.WriteLine("Message UID: " + msg.Uid)
   Debug.WriteLine("Messge Size: " + msg.Size)
   Debug.WriteLine("From: " + msg.Message.From.Address)
   Debug.WriteLine("Subject: " + msg.Message.Subject)
Next
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Automatically remove files after getting them from the server
pop1.AutoDelete = true;

// Login. The default settings will cause the Pop component to
// automatically retrieve all messages, delete them from the
// server, and logout.
pop1.Login("mail.test.com", "testuser", "testpass");

// All message retrieved. Iterate through the collection
// and display data.
foreach(PopMessage msg in pop1.Messages)
{
   Debug.WriteLine("Message ID: " + msg.Id);
   Debug.WriteLine("Message UID: " + msg.Uid);
   Debug.WriteLine("Messge Size: " + msg.Size);
   Debug.WriteLine("From: " + msg.Message.From.Address);
   Debug.WriteLine("Subject: " + msg.Message.Subject);
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.MessageBase.UseMemoryStreams">
            <summary>
				Controls whether attachments are decoded and stored as FileStreams or as MemoryStreams when a message is retrieved.
			</summary><remarks>
				<p>
				Returns true if memory streams will be used to represent streams associated with this message.  This is overridden in derived classes because the use of memory streams is often determined by the choice of implementation, and may be directly linked to it.  
				</p>
			</remarks><value>
				true if attachments should be decoded and stored as MemoryStreams when a message is retrieved; false if they should be decoded and stored as files.
			</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates logging into a POP server and retrieving all messages.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Automatically remove files after getting them from the server
Pop1.AutoDelete = True

' Login. The default settings will cause the Pop component to
' automatically retrieve all messages, delete them from the
' server, and logout.
Pop1.Login("mail.test.com", "testuser", "testpass")

' All message retrieved. Iterate through the collection
' and display data.
Dim msg As PopMessage
For Each msg In Pop1.Messages
   Debug.WriteLine("Message ID: " + msg.Id)
   Debug.WriteLine("Message UID: " + msg.Uid)
   Debug.WriteLine("Messge Size: " + msg.Size)
   Debug.WriteLine("From: " + msg.Message.From.Address)
   Debug.WriteLine("Subject: " + msg.Message.Subject)
Next
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Automatically remove files after getting them from the server
pop1.AutoDelete = true;

// Login. The default settings will cause the Pop component to
// automatically retrieve all messages, delete them from the
// server, and logout.
pop1.Login("mail.test.com", "testuser", "testpass");

// All message retrieved. Iterate through the collection
// and display data.
foreach(PopMessage msg in pop1.Messages)
{
   Debug.WriteLine("Message ID: " + msg.Id);
   Debug.WriteLine("Message UID: " + msg.Uid);
   Debug.WriteLine("Messge Size: " + msg.Size);
   Debug.WriteLine("From: " + msg.Message.From.Address);
   Debug.WriteLine("Subject: " + msg.Message.Subject);
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.MessageBase.Connected">
            <summary>
				Gets a value indicating if the message has an active connection.
			</summary><remarks>
				<p>Returns true if this message has an active connection back to the server.  
				This is overridden in derived classes because the connection is determined by 
				the protocol of the message, and may be directly linked to it.  See Imap.Connected 
				and Pop.Connected.</p>
			</remarks><value>true if the message has an active connection; otherwise false.</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates logging into a POP server and retrieving all messages.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Automatically remove files after getting them from the server
Pop1.AutoDelete = True

' Login. The default settings will cause the Pop component to
' automatically retrieve all messages, delete them from the
' server, and logout.
Pop1.Login("mail.test.com", "testuser", "testpass")

' All message retrieved. Iterate through the collection
' and display data.
Dim msg As PopMessage
For Each msg In Pop1.Messages
   Debug.WriteLine("Message ID: " + msg.Id)
   Debug.WriteLine("Message UID: " + msg.Uid)
   Debug.WriteLine("Messge Size: " + msg.Size)
   Debug.WriteLine("From: " + msg.Message.From.Address)
   Debug.WriteLine("Subject: " + msg.Message.Subject)
Next
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Automatically remove files after getting them from the server
pop1.AutoDelete = true;

// Login. The default settings will cause the Pop component to
// automatically retrieve all messages, delete them from the
// server, and logout.
pop1.Login("mail.test.com", "testuser", "testpass");

// All message retrieved. Iterate through the collection
// and display data.
foreach(PopMessage msg in pop1.Messages)
{
   Debug.WriteLine("Message ID: " + msg.Id);
   Debug.WriteLine("Message UID: " + msg.Uid);
   Debug.WriteLine("Messge Size: " + msg.Size);
   Debug.WriteLine("From: " + msg.Message.From.Address);
   Debug.WriteLine("Subject: " + msg.Message.Subject);
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.MessageBase.Exception">
            <summary>
				Gets any exception which occurred during the asynchronous operation.
			</summary><remarks>
				<p>Check this property to tell if an exception occurred during the asynchronous operation. If this property is null, no exception occurred.</p>
				<p>The exception property is useful for checking exceptions and handling them appropriately. For example, if a bad command was sent to the server, a ProtocolException may be thrown. You could check this property to see if it was of type ProtocolException, than handle appropriately.</p>
			</remarks><value>
				If any exception occurred during the asynchronous operation, this property will contain an Exception object describing the exception.
			</value>
        </member>
        <member name="M:Dart.PowerTCP.Mail.ImapMessage.Get(System.IO.Stream)">
            <summary>Gets the entire message into a user-defined stream.</summary><remarks>
				<p>The ImapMessage.Get method gets the full message, including flags, internal date, and UID.  
				The Stream parameter is used as the internal Stream representation of the 
				message.  If the parameter is null, a new MessageStream object will be created 
				and used as the internal Stream.</p>
				<p>The stream passed in is accessable as ImapMessage.Stream.</p>
				<p>For bulk operations, use Mailbox.Get which gets all messages in a mailbox.</p>
			</remarks><returns>An ImapMessage object representing the retrieved message.</returns><param name="message">The Stream to use to contain the message data.</param><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.ImapMessage.BeginGet(System.IO.Stream,System.Object)">
            <overloads>Begins to asynchronously get the entire message.</overloads><summary>Begins to asynchronously get the entire message into a user-defined stream.</summary><remarks>
				<p>The ImapMessage.BeginGet method begins to asynchronously get the full message, including flags, internal date, and UID.  
				Upon completion, the Imap.EndGet event will be raised.
				The Stream parameter is used as the internal Stream representation of the 
				message.  If the parameter is null, a new MessageStream object will be created 
				and used as the internal Stream.</p>
				<p>The stream passed in is accessable as ImapMessage.Stream.</p>
				<p>For bulk operations, use Mailbox.BeginGet which gets all messages in a mailbox.</p>
			</remarks><returns>An IAsyncResult that represents the asynchronous operation, which could still be pending.</returns><param name="message">The Stream to use to contain the message data.</param><param name="state">User state information.</param><exception cref="T:System.InvalidOperationException">BeginXXX method used without providing an EndXXX event handler.</exception><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.ImapMessage.Get">
            <summary>Gets the entire message.</summary><remarks>
				<p>The ImapMessage.Get method gets the full message, including flags, internal date, and UID.  
				The message itself is represented by a MessageStream object and accessable as ImapMessage.Message.</p>
				<p>For bulk operations, use Mailbox.Get which gets all messages in a mailbox.</p>
			</remarks><returns>An ImapMessage object representing the retrieved message.</returns><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.ImapMessage.BeginGet(System.Object)">
            <summary>Begins to asynchronously get the entire message.</summary><remarks>
				<p>The ImapMessage.BeginGet method begins to asynchronously get the full message, including flags, internal date, and UID.  
				Upon completion, the Imap.EndGet event is raised.
				The message itself is represented by a MessageStream object and accessable as ImapMessage.Message.</p>
				<p>For bulk operations, use Mailbox.BeginGet which gets all messages in a mailbox.</p>
			</remarks><returns>An IAsyncResult that represents the asynchronous operation, which could still be pending.</returns><param name="state">User state information.</param><exception cref="T:System.InvalidOperationException">BeginXXX method used without providing an EndXXX event handler.</exception><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.ImapMessage.GetPart(System.IO.Stream,System.Boolean)">
            <summary>Gets a single part of the message.</summary><remarks>
				<p>The ImapMessage.GetPart method gets a single part of the message.  
				<i>part</i> must be an object from the MessageStream.Parts collection of the 
				message. The component retrieves only the portion of the 
				message represented by <i>part</i> and populates the content for this object.  
				This is useful for allowing developers to download an attachment associated 
				with a message without downloading the message itself.</p>
				<p>Typically, before using this method, developers will need to use ImapMessage.GetOutline or ImapMessage.BeginGetOutline, 
				which creates a MessageStream object with Part objects (containing no data) representing the parts contained within
				the message. The developer can then pass the Part object they would like to retrieve into 
				the ImapMessage.GetPart method.</p>
				<p><i>peek</i> indicates whether this operation should mark the message as seen; if <i>peek</i>
				is true, then the Seen flag will not be changed.  If peek is false, the Seen 
				flag will be set to true.</p>
			</remarks><param name="part">The part of the message to retrieve.</param><param name="peek">Determines whether or not to mark the message as Seen when retrieving the part.</param><returns>The Stream containing the data for the specified <i>part</i>.</returns><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.ImapMessage.BeginGetPart(System.IO.Stream,System.Boolean,System.Object)">
            <summary>Begins to asynchronously get a single part of the message.</summary><remarks>
				<p>The ImapMessage.BeginGetPart method begins to get a single part of the message.
				Upon completion, the Imap.EndGetPart event will be raised.
				<i>part</i> must be an object from the MessageStream.Parts collection of the 
				message. The component retrieves only the portion of the 
				message represented by <i>part</i> and populates the content for this object.  
				This is useful for allowing developers to download an attachment associated 
				with a message without downloading the message itself.</p>
				<p>Typically, before using this method, developers will need to call ImapMessage.GetOutline or ImapMessage.BeginGetOutline, 
				which creates a MessageStream object with Part objects (containing no data) representing the parts contained within
				the message. The developer can then pass the Part object they would like to retrieve into 
				the ImapMessage.GetPart method.</p>
				<p><i>peek</i> indicates whether this operation should mark the message as seen; if <i>peek</i>
				is true, then the Seen flag will not be changed.  If peek is false, the Seen 
				flag will be set to true.</p>
			</remarks><param name="part">The part of the message to retrieve.</param><param name="peek">Determines whether or not to mark the message as Seen when retrieving the part.</param><param name="state">User state information.</param><returns>An IAsyncResult that represents the asynchronous operation, which could still be pending.</returns><exception cref="T:System.InvalidOperationException">BeginXXX method used without providing an EndXXX event handler.</exception><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates asynchronously retrieving a part of a message.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub AsynchronousGetPartTest()
   ' Login 
   Imap1.Login(Server, User, Pass)

   ' Retrieve message outlines for INBOX.
   Imap1.CurrentMailbox.Get(Imap1.CurrentMailbox.Messages(0), Imap1.CurrentMailbox.Messages(Imap1.CurrentMailbox.Messages.Count - 1), ImapMessageSections.BodyStructure Or ImapMessageSections.Envelope)

   ' Find the first message with an attachment
   Dim Attach As MimeAttachmentStream
   Dim AttachMessage As ImapMessage
   Dim Msg As ImapMessage
   For Each Msg In Imap1.CurrentMailbox.Messages	
      If (Msg.Message.Attachments.Count &gt; 0) Then
         Attach = Msg.Message.Attachments(0)
         AttachMessage = Msg
         Exit For
       End If
   Next
   
   ' Get the attachment. When complete the Imap.EndGetPart event will be raised
   AttachMessage.BeginGetPart(Attach, Nothing)
End Sub

Private Sub Imap1_EndGetPart(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureMail.MessagePartEventArgs) Handles Imap1.EndGetPart
   If e.Exception Is Nothing Then
      Debug.WriteLine("Part of message: " + e.Message.Id + " retrieved")
      Debug.WriteLine("Part Size = " &amp; e.Part.Length)
   End If
End Sub
<span class="lang">[C#]</span>
private void AsynchronousGetPartTest()
{
   // Login 
   imap1.Login(Server, User, Pass);

   // Retrieve message outlines for INBOX.
   imap1.CurrentMailbox.Get(imap1.CurrentMailbox.Messages[0], 
      imap1.CurrentMailbox.Messages[imap1.CurrentMailbox.Messages.Count - 1], 
      ImapMessageSections.BodyStructure | ImapMessageSections.Envelope);


   // Find the first message with an attachment
   MimeAttachmentStream attach = null;
   ImapMessage attachMessage = null;
   foreach(ImapMessage msg in imap1.CurrentMailbox.Messages)
   {
      if(msg.Message.Attachments.Count &gt; 0)
      {
         // Save a reference to the attachment and message and break from the loop
         attach = (MimeAttachmentStream)msg.Message.Attachments[0];
         attachMessage = msg;
         break;
      }
   }
   
   // Get the attachment. When complete the Imap.EndGetPart event will be raised
   attachMessage.BeginGetPart(attach, null);
}

private void imap1_EndGetPart(object sender, Dart.PowerTCP.SecureMail.MessagePartEventArgs e)
{
   if(e.Exception == null)
   {
      Debug.WriteLine("Part of message: " + e.Message.Id + " retrieved");
      Debug.WriteLine("Part Size = " + e.Part.Length);
   }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.ImapMessage.GetOutline">
            <summary>Gets the structure of the message without getting any actual message data.</summary><remarks>
				<p>The ImapMessage.GetOutline method gets the overall outline of the message 
			(ImapMessageSections.BodyStructure), 
			and fills in an outline Message object, with parts containing no data.  Different 
			part objects are created based on the type and disposition of the definition returned 
			by this command.  In order to retrieve a single portion of this Message which has been 
			created with empty parts, use the ImapMessage.GetPart or ImapMessage.BeginGetPart method, passing in as the 
			part an object from the MessageStream.Parts collection.</p>
			</remarks><returns>An ImapMessage object representing the message.</returns><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.ImapMessage.BeginGetOutline(System.Object)">
            <summary>Begins to asynchronously get the structure of the message without getting any actual message data.</summary><remarks>
				<p>The ImapMessage.BeginGetOutline method gets the overall outline of the message 
			(ImapMessageSections.BodyStructure), 
			and fills in an outline Message object, with parts containing no data.  
			Upon completion, the Imap.EndGetMessage event is raised. Different 
			part objects are created based on the type and disposition of the definition returned 
			by this command.  In order to retrieve a single portion of this Message which has been 
			created with empty parts, use the ImapMessage.GetPart or ImapMessage.BeginGetPart method, passing in as the 
			part an object from the MessageStream.Parts collection.</p>
			</remarks><param name="state">User state information.</param><returns>An IAsyncResult that represents the asynchronous operation, which could still be pending.</returns><exception cref="T:System.InvalidOperationException">BeginXXX method used without providing an EndXXX event handler.</exception><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.ImapMessage.CopyTo(Dart.PowerTCP.Mail.Mailbox)">
            <summary>Copies a message to another mailbox.</summary><remarks>
				<p>The ImapMessage.CopyTo method copies the message to the mailbox specified
				by <i>destination</i> using the IMAP COPY command.  The UID of the message is used when executing the 
				IMAP COPY command.</p>
			</remarks><param name="destination">The name of the destination mailbox.</param><returns>An ImapResponse object encapsulating the response from the server.</returns><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates logging into an IMAP server, copying read messages to a Deleted mailbox, and deleting them.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub DoMove()
   ' Demonstrate moving Read messages from "INBOX" to a "Deleted Items" box
   Try
      ' Do synchronous login with AutoList
      Imap1.Login("myServer", "myAccount", "myPassword")

      ' Create Mailbox objects for easier reference
      Dim InboxBox As Mailbox = Imap1.CurrentMailbox ' After Login with AutoList, this will be "INBOX"
      Dim DeletedBox As Mailbox = Imap1.Mailboxes("Deleted Items")

      ' Update Messages Count in "Deleted Items" box
      DeletedBox.Refresh()

      ' Display Messages Count in both boxes
      LabelDisplay.Text = InboxBox.Messages.Count.ToString() + "  " + DeletedBox.Messages.Count.ToString()

      ' Get an array of ImapMessages with just flags
      Dim Messages As ImapMessage() = InboxBox.Get(InboxBox.Messages(0), InboxBox.Messages(InboxBox.Messages.Count-1), ImapMessageSections.Flags)

      ' Copy Read Messages to "Deleted Items" box and Mark them for Deletion
      Dim Msg as ImapMessage
      For Each Msg in Messages
        If Msg.Seen Then 'If Seen flag is set 
           Msg.CopyTo(DeletedBox) ' Copy to "Deleted Items" box
           Msg.Delete = Grue ' Set deleted flag in "INBOX"
        End If
      Next

      'Permanently Remove Copied Messages from "INBOX"
      InboxBox.Purge()

      'Update Messages Count in "Deleted Items"
      DeletedBox.Refresh()

      'Display new Messages Counts
      LabelDisplay.Text = InboxBox.Messages.Count.ToString() + "  " + DeletedBox.Messages.Count.ToString()

      'Logout from server
      Imap1.Logout()
   
   Catch Ex As Exception
       ' Show MessageBox if error occurs
       MessageBox.Show(Ex.Message, "Error Message", MessageBoxButtons.OK, MessageBoxIcon.Error)
   End Try
End Sub
<span class="lang">[C#]</span>
private void DoMove()
{
   //Demonstrate moving Read messages from "INBOX" to a "Deleted Items" box
   try
   {
      //Do synchronous login with AutoList
      imap1.Login("myServer", "myAccount", "myPassword");

      //Create Mailbox objects for easier reference
     Mailbox inboxBox = imap1.CurrentMailbox; //After Login with AutoList, this will be "INBOX"
     Mailbox deletedBox = imap1.Mailboxes["Deleted Items"];

     //Update Messages Count in "Deleted Items" box
     deletedBox.Refresh();

     //Display Messages Count in both boxes
     labelDisplay.Text = inboxBox.Messages.Count.ToString() + "  " + deletedBox.Messages.Count.ToString();

     //Get an array of ImapMessages with just flags
     ImapMessage[] messages = inboxBox.Get(inboxBox.Messages[0], inboxBox.Messages[inboxBox.Messages.Count-1], ImapMessageSections.Flags);

     //Copy Read Messages to "Deleted Items" box and Mark them for Deletion
     foreach (ImapMessage msg in messages)
     {
       if (msg.Seen) //If Seen flag is set
       {
          msg.CopyTo(deletedBox); //Copy to "Deleted Items" box
          msg.Delete = true; //Set deleted flag in "INBOX"
       }
     }

     //Permanently Remove Copied Messages from "INBOX"
     inboxBox.Purge();

     //Update Messages Count in "Deleted Items"
     deletedBox.Refresh();

     //Display new Messages Counts
     labelDisplay.Text = inboxBox.Messages.Count.ToString() + "  " + deletedBox.Messages.Count.ToString();

     //Logout from server
     imap1.Logout();
   }
   catch (Exception ex)
   {
      //Show MessageBox if error occurs
      MessageBox.Show(ex.Message, "Error Message", MessageBoxButtons.OK, MessageBoxIcon.Error);
   }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.ImapMessage.BeginCopyTo(Dart.PowerTCP.Mail.Mailbox,System.Object)">
            <summary>Begins to asynchronously copy a message to another mailbox.</summary><remarks>
				<p>The ImapMessage.BeginCopyTo method begins to asynchronously copy the message to the mailbox specified
				by <i>destination</i> using the IMAP COPY command. Upon completion, the Imap.EndCopy event is raised.
				The UID of the message is used when executing the 
				IMAP COPY command.</p>
			</remarks><param name="destination">The name of the destination mailbox.</param><param name="state">User state information.</param><returns>An IAsyncResult that represents the asynchronous operation, which could still be pending.</returns><exception cref="T:System.InvalidOperationException">BeginXXX method used without providing an EndXXX event handler.</exception><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception>
        </member>
        <member name="P:Dart.PowerTCP.Mail.ImapMessage.UseMemoryStreams">
            <summary>
				Controls whether attachments are decoded and stored as FileStreams or as MemoryStreams when a message is retrieved.
			</summary><remarks>
				<p>
				Returns true if memory streams will be used to represent streams associated with this message.  This is overridden in derived classes because the use of memory streams is often determined by the choice of implementation, and may be directly linked to it.  
				</p>
			</remarks><value>
				true if attachments should be decoded and stored as MemoryStreams when a message is retrieved; false if they should be decoded and stored as files.
			</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates logging into a POP server and retrieving all messages.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Automatically remove files after getting them from the server
Pop1.AutoDelete = True

' Login. The default settings will cause the Pop component to
' automatically retrieve all messages, delete them from the
' server, and logout.
Pop1.Login("mail.test.com", "testuser", "testpass")

' All message retrieved. Iterate through the collection
' and display data.
Dim msg As PopMessage
For Each msg In Pop1.Messages
   Debug.WriteLine("Message ID: " + msg.Id)
   Debug.WriteLine("Message UID: " + msg.Uid)
   Debug.WriteLine("Messge Size: " + msg.Size)
   Debug.WriteLine("From: " + msg.Message.From.Address)
   Debug.WriteLine("Subject: " + msg.Message.Subject)
Next
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Automatically remove files after getting them from the server
pop1.AutoDelete = true;

// Login. The default settings will cause the Pop component to
// automatically retrieve all messages, delete them from the
// server, and logout.
pop1.Login("mail.test.com", "testuser", "testpass");

// All message retrieved. Iterate through the collection
// and display data.
foreach(PopMessage msg in pop1.Messages)
{
   Debug.WriteLine("Message ID: " + msg.Id);
   Debug.WriteLine("Message UID: " + msg.Uid);
   Debug.WriteLine("Messge Size: " + msg.Size);
   Debug.WriteLine("From: " + msg.Message.From.Address);
   Debug.WriteLine("Subject: " + msg.Message.Subject);
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.ImapMessage.Connected">
            <summary>Gets a value which determines if the message has an active connection back to the server.</summary><remarks>
				<p>This value is equal to the Imap.Connected property of the Imap component.</p>
			</remarks><value>If the message has an active connection back to the server, this property returns true; otherwise false.</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates logging into a POP server and retrieving all messages.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Automatically remove files after getting them from the server
Pop1.AutoDelete = True

' Login. The default settings will cause the Pop component to
' automatically retrieve all messages, delete them from the
' server, and logout.
Pop1.Login("mail.test.com", "testuser", "testpass")

' All message retrieved. Iterate through the collection
' and display data.
Dim msg As PopMessage
For Each msg In Pop1.Messages
   Debug.WriteLine("Message ID: " + msg.Id)
   Debug.WriteLine("Message UID: " + msg.Uid)
   Debug.WriteLine("Messge Size: " + msg.Size)
   Debug.WriteLine("From: " + msg.Message.From.Address)
   Debug.WriteLine("Subject: " + msg.Message.Subject)
Next
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Automatically remove files after getting them from the server
pop1.AutoDelete = true;

// Login. The default settings will cause the Pop component to
// automatically retrieve all messages, delete them from the
// server, and logout.
pop1.Login("mail.test.com", "testuser", "testpass");

// All message retrieved. Iterate through the collection
// and display data.
foreach(PopMessage msg in pop1.Messages)
{
   Debug.WriteLine("Message ID: " + msg.Id);
   Debug.WriteLine("Message UID: " + msg.Uid);
   Debug.WriteLine("Messge Size: " + msg.Size);
   Debug.WriteLine("From: " + msg.Message.From.Address);
   Debug.WriteLine("Subject: " + msg.Message.Subject);
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.ImapMessage.Delete">
            <summary>
				Gets a value indicating if the message has been marked for deletion.
			</summary><remarks>
				<p>Set this property to mark a message for deletion. How the message is deleted is dependent on
				the protocol. If using the Pop component, all messages will be deleted upon logout. If using the
				Imap component, all messages will be deleted when Mailbox.Refresh is called, if Imap.AutoPurge is 
				false and automatically with any change in the mailbox when Imap.AutoPurge is true.</p>
			</remarks><value>
				true if the message has been marked for deletion, false otherwise; The default value is false;
			</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates logging into an IMAP server, copying read messages to a Deleted mailbox, and deleting them.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub DoMove()
   ' Demonstrate moving Read messages from "INBOX" to a "Deleted Items" box
   Try
      ' Do synchronous login with AutoList
      Imap1.Login("myServer", "myAccount", "myPassword")

      ' Create Mailbox objects for easier reference
      Dim InboxBox As Mailbox = Imap1.CurrentMailbox ' After Login with AutoList, this will be "INBOX"
      Dim DeletedBox As Mailbox = Imap1.Mailboxes("Deleted Items")

      ' Update Messages Count in "Deleted Items" box
      DeletedBox.Refresh()

      ' Display Messages Count in both boxes
      LabelDisplay.Text = InboxBox.Messages.Count.ToString() + "  " + DeletedBox.Messages.Count.ToString()

      ' Get an array of ImapMessages with just flags
      Dim Messages As ImapMessage() = InboxBox.Get(InboxBox.Messages(0), InboxBox.Messages(InboxBox.Messages.Count-1), ImapMessageSections.Flags)

      ' Copy Read Messages to "Deleted Items" box and Mark them for Deletion
      Dim Msg as ImapMessage
      For Each Msg in Messages
        If Msg.Seen Then 'If Seen flag is set 
           Msg.CopyTo(DeletedBox) ' Copy to "Deleted Items" box
           Msg.Delete = Grue ' Set deleted flag in "INBOX"
        End If
      Next

      'Permanently Remove Copied Messages from "INBOX"
      InboxBox.Purge()

      'Update Messages Count in "Deleted Items"
      DeletedBox.Refresh()

      'Display new Messages Counts
      LabelDisplay.Text = InboxBox.Messages.Count.ToString() + "  " + DeletedBox.Messages.Count.ToString()

      'Logout from server
      Imap1.Logout()
   
   Catch Ex As Exception
       ' Show MessageBox if error occurs
       MessageBox.Show(Ex.Message, "Error Message", MessageBoxButtons.OK, MessageBoxIcon.Error)
   End Try
End Sub
<span class="lang">[C#]</span>
private void DoMove()
{
   //Demonstrate moving Read messages from "INBOX" to a "Deleted Items" box
   try
   {
      //Do synchronous login with AutoList
      imap1.Login("myServer", "myAccount", "myPassword");

      //Create Mailbox objects for easier reference
     Mailbox inboxBox = imap1.CurrentMailbox; //After Login with AutoList, this will be "INBOX"
     Mailbox deletedBox = imap1.Mailboxes["Deleted Items"];

     //Update Messages Count in "Deleted Items" box
     deletedBox.Refresh();

     //Display Messages Count in both boxes
     labelDisplay.Text = inboxBox.Messages.Count.ToString() + "  " + deletedBox.Messages.Count.ToString();

     //Get an array of ImapMessages with just flags
     ImapMessage[] messages = inboxBox.Get(inboxBox.Messages[0], inboxBox.Messages[inboxBox.Messages.Count-1], ImapMessageSections.Flags);

     //Copy Read Messages to "Deleted Items" box and Mark them for Deletion
     foreach (ImapMessage msg in messages)
     {
       if (msg.Seen) //If Seen flag is set
       {
          msg.CopyTo(deletedBox); //Copy to "Deleted Items" box
          msg.Delete = true; //Set deleted flag in "INBOX"
       }
     }

     //Permanently Remove Copied Messages from "INBOX"
     inboxBox.Purge();

     //Update Messages Count in "Deleted Items"
     deletedBox.Refresh();

     //Display new Messages Counts
     labelDisplay.Text = inboxBox.Messages.Count.ToString() + "  " + deletedBox.Messages.Count.ToString();

     //Logout from server
     imap1.Logout();
   }
   catch (Exception ex)
   {
      //Show MessageBox if error occurs
      MessageBox.Show(ex.Message, "Error Message", MessageBoxButtons.OK, MessageBoxIcon.Error);
   }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.ImapMessage.Answered">
            <summary>Gets or sets a value which determines if the message has been answered.</summary><remarks>
				<p>Returns true if the current message has been answered (server-side flag \Answered). 
				 This property is controlled by the developer, not the server (ie. the server does not decide when a message has been answered).</p>
				<p>When setting this property the Imap component will send a STORE command to the server to update
				the flags of the message.</p>
			</remarks><value>If the message's Answered flag is set, this property returns true; otherwise false.</value>
        </member>
        <member name="P:Dart.PowerTCP.Mail.ImapMessage.Flagged">
            <summary>Gets or sets a value which determines if the message has been flagged.</summary><remarks>
				<p>Returns true if the current message has been flagged for urgent or 
				special attention (server-side flag \Flagged).  This property is controlled 
				by the developer, not the server (ie. the server does not decide when 
				messages deserve attention).</p>
				<p>When setting this property the Imap component will send a STORE command to the server to update
				the flags of the message.</p>
			</remarks><value>If the message's Flagged flag is set, this property returns true; otherwise false.</value>
        </member>
        <member name="P:Dart.PowerTCP.Mail.ImapMessage.Draft">
            <summary>Gets or sets a value which determines if the message is a draft.</summary><remarks>
				<p>Returns true if the current message has an incomplete composition 
				(server-side flag \Draft).  This property is controlled by the developer, 
				not the server (ie. the server does not decide when composition is complete).</p>
				<p>When setting this property the Imap component will send a STORE command to the server to update
				the flags of the message.</p>
			</remarks><value>If the message's Draft flag is set, this property returns true; otherwise false.</value>
        </member>
        <member name="P:Dart.PowerTCP.Mail.ImapMessage.Recent">
            <summary>Gets a value which determines if the message is recent.</summary><remarks>
				<p>Returns true if the current message has arrived recently in the mailbox 
				(server-side flag \Recent).  This property is controlled by the server, not 
				the developer, and the definition of "recent" may vary according to server implementation.</p>
			</remarks><value>If the message's Recent flag is set, this property returns true; otherwise false.</value>
        </member>
        <member name="P:Dart.PowerTCP.Mail.ImapMessage.Seen">
            <summary>Gets or sets a value which determines if the message has been seen.</summary><remarks>
				<p>Returns true if the current message has been read (server-side flag \Seen).  
				This property is controlled both by the developer and the server.  The server changes this flag
				in response to the IMAP FETCH command, but it can be changed by the developer as well.</p>
				<p>When setting this property the Imap component will send a STORE command to the server to update
				the flags of the message.</p>
			</remarks><value>If the message's Seen flag is set, this property returns true; otherise false.</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates logging into an IMAP server, copying read messages to a Deleted mailbox, and deleting them.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub DoMove()
   ' Demonstrate moving Read messages from "INBOX" to a "Deleted Items" box
   Try
      ' Do synchronous login with AutoList
      Imap1.Login("myServer", "myAccount", "myPassword")

      ' Create Mailbox objects for easier reference
      Dim InboxBox As Mailbox = Imap1.CurrentMailbox ' After Login with AutoList, this will be "INBOX"
      Dim DeletedBox As Mailbox = Imap1.Mailboxes("Deleted Items")

      ' Update Messages Count in "Deleted Items" box
      DeletedBox.Refresh()

      ' Display Messages Count in both boxes
      LabelDisplay.Text = InboxBox.Messages.Count.ToString() + "  " + DeletedBox.Messages.Count.ToString()

      ' Get an array of ImapMessages with just flags
      Dim Messages As ImapMessage() = InboxBox.Get(InboxBox.Messages(0), InboxBox.Messages(InboxBox.Messages.Count-1), ImapMessageSections.Flags)

      ' Copy Read Messages to "Deleted Items" box and Mark them for Deletion
      Dim Msg as ImapMessage
      For Each Msg in Messages
        If Msg.Seen Then 'If Seen flag is set 
           Msg.CopyTo(DeletedBox) ' Copy to "Deleted Items" box
           Msg.Delete = Grue ' Set deleted flag in "INBOX"
        End If
      Next

      'Permanently Remove Copied Messages from "INBOX"
      InboxBox.Purge()

      'Update Messages Count in "Deleted Items"
      DeletedBox.Refresh()

      'Display new Messages Counts
      LabelDisplay.Text = InboxBox.Messages.Count.ToString() + "  " + DeletedBox.Messages.Count.ToString()

      'Logout from server
      Imap1.Logout()
   
   Catch Ex As Exception
       ' Show MessageBox if error occurs
       MessageBox.Show(Ex.Message, "Error Message", MessageBoxButtons.OK, MessageBoxIcon.Error)
   End Try
End Sub
<span class="lang">[C#]</span>
private void DoMove()
{
   //Demonstrate moving Read messages from "INBOX" to a "Deleted Items" box
   try
   {
      //Do synchronous login with AutoList
      imap1.Login("myServer", "myAccount", "myPassword");

      //Create Mailbox objects for easier reference
     Mailbox inboxBox = imap1.CurrentMailbox; //After Login with AutoList, this will be "INBOX"
     Mailbox deletedBox = imap1.Mailboxes["Deleted Items"];

     //Update Messages Count in "Deleted Items" box
     deletedBox.Refresh();

     //Display Messages Count in both boxes
     labelDisplay.Text = inboxBox.Messages.Count.ToString() + "  " + deletedBox.Messages.Count.ToString();

     //Get an array of ImapMessages with just flags
     ImapMessage[] messages = inboxBox.Get(inboxBox.Messages[0], inboxBox.Messages[inboxBox.Messages.Count-1], ImapMessageSections.Flags);

     //Copy Read Messages to "Deleted Items" box and Mark them for Deletion
     foreach (ImapMessage msg in messages)
     {
       if (msg.Seen) //If Seen flag is set
       {
          msg.CopyTo(deletedBox); //Copy to "Deleted Items" box
          msg.Delete = true; //Set deleted flag in "INBOX"
       }
     }

     //Permanently Remove Copied Messages from "INBOX"
     inboxBox.Purge();

     //Update Messages Count in "Deleted Items"
     deletedBox.Refresh();

     //Display new Messages Counts
     labelDisplay.Text = inboxBox.Messages.Count.ToString() + "  " + deletedBox.Messages.Count.ToString();

     //Logout from server
     imap1.Logout();
   }
   catch (Exception ex)
   {
      //Show MessageBox if error occurs
      MessageBox.Show(ex.Message, "Error Message", MessageBoxButtons.OK, MessageBoxIcon.Error);
   }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.ImapMessage.Mailbox">
            <summary>Gets the "parent" mailbox for this message.</summary><remarks>
				<p>The ImapMessage.Mailbox property returns the mailbox that contains the
				message represented by this ImapMessage object.</p>
			</remarks><value>A Mailbox object representing the "parent" mailbox for this message.</value>
        </member>
        <member name="P:Dart.PowerTCP.Mail.ImapMessage.InternalDate">
            <summary>Returns the internal date of the message.</summary><remarks>
				<p>Returns the internal date property of the message as tracked by 
				the server, indicating when the server received the message.</p>
				<p>The internal date is assigned by the server upon receipt of the
				message. This is not to be confused with the date header of the message
				itself, which typically indicates the date the message was sent.</p>
			</remarks><value>A string representation of the messages internal date.</value>
        </member>
        <member name="T:Dart.PowerTCP.Mail.ImapMessageCollection">
            <summary>Contains ImapMessage objects.</summary><remarks>
				<p>The ImapMessageCollection class is used to contain ImapMessage objects which are located in the same mailbox.
				Since this collection is representing server-side objects, using the methods of this class causes IMAP commands to be sent to the server. For example, 
				ImapMessageCollection.Add causes an "APPEND" command to be sent.
				</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates appending mailboxes to the server.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub MailboxCollectionTest()
   ' Login
   Imap1.Login(Server, User, Pass)

   ' Create a new mailbox.
   Imap1.Mailboxes.Add("MyNewBox")

   ' Get the Mailbox in a short variable name to reduce typing.
   Dim Box As New Mailbox = Imap1.Mailboxes("MyNewBox")

   ' APPEND some test messages
   Dim i As Integer
   For i = 0 To 5
      ' Dynamically create a new message
      Dim Msg As New MessageStream()
      Msg.To.Add(New MailAddress("me@test.com"))
      Msg.From = New MailAddress("you@test.com")
      Msg.Subject = "test # " + i
      Msg.Text = "Hello, how are you?"

      ' Append the message
      Box.Messages.Add(msg)
   Next

   ' Refresh the mail box so new messages will be included
   Box.Refresh()

   ' Display a list of the message identifiers.
   Debug.WriteLine(Box.Messages.ToString())

   ' Clear all messages
   Box.Messages.Clear()

   ' Logout
   Imap1.Logout()
End Sub
<span class="lang">[C#]</span>
private void MailboxCollectionTest()
{
   // Login
   imap1.Login(Server, User, Pass);

   // Create a new mailbox.
   imap1.Mailboxes.Add("MyNewBox");

   // Get the Mailbox in a short variable name to reduce typing.
   Mailbox box = imap1.Mailboxes["MyNewBox"];

   // APPEND some test messages
   for(int i=0; i &lt; 5; i++)
   {
      // Dynamically create a new message
      MessageStream msg = new MessageStream();
      msg.To.Add(new MailAddress("me@test.com"));
      msg.From = new MailAddress("you@test.com");
      msg.Subject = "test # " + i;
      msg.Text = "Hello, how are you?";

      // Append the message
      box.Messages.Add(msg);
   }

   // Refresh the mail box so new messages will be included
   box.Refresh();

   // Display a list of the message identifiers.
   Debug.WriteLine(box.Messages.ToString());

   // Clear all messages
   box.Messages.Clear();

   // Logout
   imap1.Logout();
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="T:Dart.PowerTCP.Mail.SimpleCollectionBase">
            <summary>Collection class that provides basic functionality for the 
				server-side collections.</summary><remarks>
				<p>Collection class that provides basic functionality for the 
				server-side collections.  It provides an implementation of ICollection 
				and IEnumerable, but not IList.  IListSource is implemented to allow 
				collections that derive from this to function as data sources for components 
				such as the Microsoft Data Grid.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.SimpleCollectionBase.#ctor">
            <summary>Create a new instance of SimpleCollectionBase</summary>
        </member>
        <member name="M:Dart.PowerTCP.Mail.SimpleCollectionBase.GetList">
            <summary>Returns an IList that can be bound to a data source from an object that does not implement an IList itself.</summary>
        </member>
        <member name="P:Dart.PowerTCP.Mail.SimpleCollectionBase.ContainsListCollection">
            <summary>Gets a value indicating whether the collection is a collection of IList objects.</summary>
        </member>
        <member name="M:Dart.PowerTCP.Mail.ImapMessageCollection.Add(System.IO.Stream,Dart.PowerTCP.Mail.ImapFlags,System.DateTime)">
            <summary>Add a new message with customized attributes to the mailbox using APPEND.</summary><remarks>
				<p>Using the ImapMessageCollection.Add method causes an APPEND command
				to be sent to the IMAP server, adding the message contained in <i>message</i>
				to the mailbox represented by Imap.CurrentMailbox. Typically, <i>message</i>
				will be a MessageStream object, but can be any Stream object. <i>flags</i> determines
				which flags are set on the new message. <i>internalDate</i> sets the internal date (the date
				the message arrived) of the message on the server.</p>
			</remarks><param name="message">A Stream object containing message data.</param><param name="flags">An ImapFlags value representing the flags to set on the message.</param><param name="internalDate">A System.Datetime representing the internal date to use for the message.</param><returns>An ImapMessage object representing the newly added message.</returns><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates some of the methods of MailboxCollection.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub MailboxCollectionDemo()
   ' Login
   Imap1.Login(Server, User, Pass)

   ' Create a test mailbox
   Imap1.Mailboxes.Add("MyNewMailbox")

   ' Get the name into a short variable name for less typing
   Dim Box As New Mailbox = imap1.Mailboxes("MyNewMailbox")

   ' Create a message from a message stored on file.
   Dim Msg as new MessageStream(New FileStream("C:\mymsg.txt", FileMode.Open))

   ' Add a new message with flags and an internal date
   Dim InternalDate As New System.DateTime(2000, 1, 1)
   ImapMessage ImapMsg = Box.Messages.Add(Msg, ImapFlags.Flagged, internalDate);

   ' Remove the mailbox
   Imap1.Mailboxes.Remove(box)

   ' Logout
   imap1.Logout()
End Sub
<span class="lang">[C#]</span>
private void MailboxCollectionDemo()
{
   // Login
   imap1.Login(Server, User, Pass);

   // Create a test mailbox
   imap1.Mailboxes.Add("MyNewMailbox");

   // Get the name into a short variable name for less typing
   Mailbox box = imap1.Mailboxes["MyNewMailbox"];

   // Create a message from a message stored on file.
   MessageStream msg = new MessageStream(new FileStream("C:\\mymsg.txt", FileMode.Open));

   // Add a new message with flags and an internal date
   System.DateTime internalDate = new System.DateTime(2000, 1, 1);
   ImapMessage imapMsg = box.Messages.Add(msg, ImapFlags.Flagged, internalDate);

   // Remove the mailbox
   imap1.Mailboxes.Remove(box);

   // Logout
   imap1.Logout();
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.ImapMessageCollection.BeginAdd(System.IO.Stream,Dart.PowerTCP.Mail.ImapFlags,System.DateTime,System.Object)">
            <summary>Begin to add a new message with customized attributes to the mailbox using APPEND.</summary><remarks>
				<p>Using the ImapMessageCollection.BeginAdd method causes an APPEND command
				to be asynchronously sent to the IMAP server, adding the message contained in <i>message</i>
				to the mailbox represented by Imap.CurrentMailbox. When this method completes, the
				Imap.EndMessageAdd event will be raised. Typically, <i>message</i>
				will be a MessageStream object, but can be any Stream object. <i>flags</i> determines
				which flags are set on the new message. <i>internalDate</i> sets the internal date (the date
				the message arrived) of the message on the server.</p>
			</remarks><param name="message">A Stream object containing message data.</param><param name="flags">An ImapFlags value representing the flags to set on the message.</param><param name="internalDate">A System.Datetime representing the internal date to use for the message.</param><param name="state">User state information.</param><returns>An IAsyncResult that represents the asynchronous operation, which could still be pending.</returns><exception cref="T:System.InvalidOperationException">BeginXXX method used without providing an EndXXX event handler.</exception><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.ImapMessageCollection.Add(System.IO.Stream)">
            <summary>Add a new message to the mailbox using APPEND.</summary><remarks>
				<p>Using the ImapMessageCollection.Add method causes an APPEND command
				to be sent to the IMAP server, adding the message contained in <i>message</i>
				to the mailbox represented by Imap.CurrentMailbox. Typically, <i>message</i>
				will be a MessageStream object, but can be any Stream object.</p>
			</remarks><param name="message">A Stream object containing message data.</param><returns>An ImapMessage object representing the newly added message.</returns><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates appending mailboxes to the server.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub MailboxCollectionTest()
   ' Login
   Imap1.Login(Server, User, Pass)

   ' Create a new mailbox.
   Imap1.Mailboxes.Add("MyNewBox")

   ' Get the Mailbox in a short variable name to reduce typing.
   Dim Box As New Mailbox = Imap1.Mailboxes("MyNewBox")

   ' APPEND some test messages
   Dim i As Integer
   For i = 0 To 5
      ' Dynamically create a new message
      Dim Msg As New MessageStream()
      Msg.To.Add(New MailAddress("me@test.com"))
      Msg.From = New MailAddress("you@test.com")
      Msg.Subject = "test # " + i
      Msg.Text = "Hello, how are you?"

      ' Append the message
      Box.Messages.Add(msg)
   Next

   ' Refresh the mail box so new messages will be included
   Box.Refresh()

   ' Display a list of the message identifiers.
   Debug.WriteLine(Box.Messages.ToString())

   ' Clear all messages
   Box.Messages.Clear()

   ' Logout
   Imap1.Logout()
End Sub
<span class="lang">[C#]</span>
private void MailboxCollectionTest()
{
   // Login
   imap1.Login(Server, User, Pass);

   // Create a new mailbox.
   imap1.Mailboxes.Add("MyNewBox");

   // Get the Mailbox in a short variable name to reduce typing.
   Mailbox box = imap1.Mailboxes["MyNewBox"];

   // APPEND some test messages
   for(int i=0; i &lt; 5; i++)
   {
      // Dynamically create a new message
      MessageStream msg = new MessageStream();
      msg.To.Add(new MailAddress("me@test.com"));
      msg.From = new MailAddress("you@test.com");
      msg.Subject = "test # " + i;
      msg.Text = "Hello, how are you?";

      // Append the message
      box.Messages.Add(msg);
   }

   // Refresh the mail box so new messages will be included
   box.Refresh();

   // Display a list of the message identifiers.
   Debug.WriteLine(box.Messages.ToString());

   // Clear all messages
   box.Messages.Clear();

   // Logout
   imap1.Logout();
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.ImapMessageCollection.BeginAdd(System.IO.Stream,System.Object)">
            <summary>Begin to add a new message to the mailbox using APPEND.</summary><remarks>
				<p>Using the ImapMessageCollection.BeginAdd method causes an APPEND command
				to be asynchronously sent to the IMAP server, adding the message contained in <i>message</i>
				to the mailbox represented by Imap.CurrentMailbox. When this method completes, the
				Imap.EndMessageAdd event will be raised. Typically, <i>message</i>
				will be a MessageStream object, but can be any Stream object.</p>
			</remarks><param name="message">A Stream object containing message data.</param><param name="state">User state information.</param><returns>An IAsyncResult that represents the asynchronous operation, which could still be pending.</returns><exception cref="T:System.InvalidOperationException">BeginXXX method used without providing an EndXXX event handler.</exception><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.ImapMessageCollection.Clear">
            <summary>Clears all messages in the current mailbox.</summary><remarks>
				<p>This method clears all messages in the currently selected mailbox (the mailbox
				represented by Imap.CurrentMailbox). The messages are cleared by first setting their MessageBase.Delete flag
				to true then sending an "EXPUNGE" command by calling Mailbox.Purge.</p>
			</remarks><returns>
				An array of ImapResponse objects representing the deleted messages.
			</returns><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates appending mailboxes to the server.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub MailboxCollectionTest()
   ' Login
   Imap1.Login(Server, User, Pass)

   ' Create a new mailbox.
   Imap1.Mailboxes.Add("MyNewBox")

   ' Get the Mailbox in a short variable name to reduce typing.
   Dim Box As New Mailbox = Imap1.Mailboxes("MyNewBox")

   ' APPEND some test messages
   Dim i As Integer
   For i = 0 To 5
      ' Dynamically create a new message
      Dim Msg As New MessageStream()
      Msg.To.Add(New MailAddress("me@test.com"))
      Msg.From = New MailAddress("you@test.com")
      Msg.Subject = "test # " + i
      Msg.Text = "Hello, how are you?"

      ' Append the message
      Box.Messages.Add(msg)
   Next

   ' Refresh the mail box so new messages will be included
   Box.Refresh()

   ' Display a list of the message identifiers.
   Debug.WriteLine(Box.Messages.ToString())

   ' Clear all messages
   Box.Messages.Clear()

   ' Logout
   Imap1.Logout()
End Sub
<span class="lang">[C#]</span>
private void MailboxCollectionTest()
{
   // Login
   imap1.Login(Server, User, Pass);

   // Create a new mailbox.
   imap1.Mailboxes.Add("MyNewBox");

   // Get the Mailbox in a short variable name to reduce typing.
   Mailbox box = imap1.Mailboxes["MyNewBox"];

   // APPEND some test messages
   for(int i=0; i &lt; 5; i++)
   {
      // Dynamically create a new message
      MessageStream msg = new MessageStream();
      msg.To.Add(new MailAddress("me@test.com"));
      msg.From = new MailAddress("you@test.com");
      msg.Subject = "test # " + i;
      msg.Text = "Hello, how are you?";

      // Append the message
      box.Messages.Add(msg);
   }

   // Refresh the mail box so new messages will be included
   box.Refresh();

   // Display a list of the message identifiers.
   Debug.WriteLine(box.Messages.ToString());

   // Clear all messages
   box.Messages.Clear();

   // Logout
   imap1.Logout();
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.ImapMessageCollection.BeginClear(System.Object)">
            <summary>Begins an asynchronous operation which clears all messages in the currently selected mailbox.</summary><remarks>
				<p>This method begins to asynchronously clear all messages in the currently selected mailbox (the mailbox
				represented by Imap.CurrentMailbox). The messages are cleared by first setting their MessageBase.Delete flag
				to true then sending an "EXPUNGE" command by calling Mailbox.Purge. When this operation is complete, the
				Imap.EndClear event will be raised.</p>
			</remarks><returns>An IAsyncResult that represents the asynchronous operation, which could still be pending.</returns><exception cref="T:System.InvalidOperationException">BeginXXX method used without providing an EndXXX event handler.</exception><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.ImapMessageCollection.ToString">
            <summary>Returns a comma-delimited list of message identifiers.</summary><remarks>
				<p>If the messages have UIDs, this method returns a comma-delimited
				list of all MessageBase.Uid values. If they do not have UIDs, this method
				returns a comma-delimited list of all MessageBase.Id values.</p>
			</remarks><returns>A string of all messages identifiers.</returns>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates appending mailboxes to the server.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub MailboxCollectionTest()
   ' Login
   Imap1.Login(Server, User, Pass)

   ' Create a new mailbox.
   Imap1.Mailboxes.Add("MyNewBox")

   ' Get the Mailbox in a short variable name to reduce typing.
   Dim Box As New Mailbox = Imap1.Mailboxes("MyNewBox")

   ' APPEND some test messages
   Dim i As Integer
   For i = 0 To 5
      ' Dynamically create a new message
      Dim Msg As New MessageStream()
      Msg.To.Add(New MailAddress("me@test.com"))
      Msg.From = New MailAddress("you@test.com")
      Msg.Subject = "test # " + i
      Msg.Text = "Hello, how are you?"

      ' Append the message
      Box.Messages.Add(msg)
   Next

   ' Refresh the mail box so new messages will be included
   Box.Refresh()

   ' Display a list of the message identifiers.
   Debug.WriteLine(Box.Messages.ToString())

   ' Clear all messages
   Box.Messages.Clear()

   ' Logout
   Imap1.Logout()
End Sub
<span class="lang">[C#]</span>
private void MailboxCollectionTest()
{
   // Login
   imap1.Login(Server, User, Pass);

   // Create a new mailbox.
   imap1.Mailboxes.Add("MyNewBox");

   // Get the Mailbox in a short variable name to reduce typing.
   Mailbox box = imap1.Mailboxes["MyNewBox"];

   // APPEND some test messages
   for(int i=0; i &lt; 5; i++)
   {
      // Dynamically create a new message
      MessageStream msg = new MessageStream();
      msg.To.Add(new MailAddress("me@test.com"));
      msg.From = new MailAddress("you@test.com");
      msg.Subject = "test # " + i;
      msg.Text = "Hello, how are you?";

      // Append the message
      box.Messages.Add(msg);
   }

   // Refresh the mail box so new messages will be included
   box.Refresh();

   // Display a list of the message identifiers.
   Debug.WriteLine(box.Messages.ToString());

   // Clear all messages
   box.Messages.Clear();

   // Logout
   imap1.Logout();
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.ImapMessageCollection.IndexOf(Dart.PowerTCP.Mail.ImapMessage)">
            <summary>
				Searches for the specified <i>value</i> and returns the zero-based index of the first occurrence within the entire collection.
			</summary><remarks>
				<p>The collection is searched forward starting at the first element and ending at the last element.</p>
				<p>This method performs a linear search. On average, this is an O(n/2) operation, where n is Count. The longest search is an O(n) operation.</p>
				<p>This method determines equality by calling Object.Equals.</p>
			</remarks><returns>
				The zero-based index of the first occurrence of value within the entire collection, if found; otherwise, -1.
			</returns><param name="value">The Object to locate in the collection.</param>
        </member>
        <member name="M:Dart.PowerTCP.Mail.ImapMessageCollection.Contains(Dart.PowerTCP.Mail.ImapMessage)">
            <summary>
				Determines whether an element is in the collection.
			</summary><remarks>
				<p>This method performs a linear search; therefore, the average execution time is proportional to Count. That is, this method is an O(n) operation, where n is Count.</p>
				<p>This method determines equality by calling Object.Equals.</p>
			</remarks><param name="value">The Object to locate in the collection. The element to locate can be a null reference (Nothing in Visual Basic). </param><returns>
				true if item is found in the collection; otherwise, false.
			</returns>
        </member>
        <member name="P:Dart.PowerTCP.Mail.ImapMessageCollection.Item(System.Int32)">
            <summary>
				Gets or sets the element at the specified index.
			</summary><param name="index">The zero-based index of the element to get or set.</param><value>The element at the specified index.</value><exception cref="T:System.ArgumentOutOfRangeException">
				<I>Index</I> is less than zero. 
<P>-or-</P>
				<P>
					<I>Index</I> is equal to or greater than <A href="frlrfsystemcollectionsarraylistclasscounttopic.htm">Count</A>.</P>
			</exception><remarks>
				<p>This property provides the ability to access a specific element in the 
collection by using the following syntax: <CODE class="ce">myCollection[Index]</CODE>.</p>
				<p>
				Note, intellisense may not work on members of objects referenced by using this indexer.
				If you would like intellisense to work, get the object referenced by the indexer into 
				it's own variable.
				</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.ImapMessageCollection.Item(System.String)">
            <summary>Gets the element with the matching UID.</summary><remarks>
				<p>This method performs a linear search, returning the ImapMessage with
			the MessageBase.Uid equal to <i>uid</i>.</p>
			</remarks><returns>If a message matching the <i>uid</i> is found, this method returns the ImapMessage object
			representing that message; null otherwise.</returns><param name="uid">The message uid to search for.</param>
        </member>
        <member name="T:Dart.PowerTCP.Mail.ImapNoopCommand">
            <summary>
            Summary description for ImapNoopCommand.
            </summary>
        </member>
        <member name="T:Dart.PowerTCP.Mail.ImapParser">
            <summary>
            Summary description for ImapParser.
            </summary>
        </member>
        <member name="T:Dart.PowerTCP.Mail.EndEventArgs">
            <summary>
				Provides data for asynchronous completion events.
			</summary><remarks>
				<p>The EndEventArgs.Exception property returns any Exception which occurred during the asynchronous operation. The EndEventArgs.Stats property 
				returns any object passed in to the accompanying BeginXXX method.</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.EndEventArgs.Exception">
            <summary>
				Gets any exception which occurred during the asynchronous operation.
			</summary><remarks>
				<p>Check this property to tell if an exception occurred during the asynchronous operation. If this property is null, no exception occurred.</p>
				<p>The exception property is useful for checking exceptions and handling them appropriately. For example, if a bad command was sent to the server, a ProtocolException may be thrown. You could check this property to see if it was of type ProtocolException, than handle appropriately.</p>
			</remarks><value>
				If any exception occurred during the asynchronous operation, this property will contain an Exception object describing the exception.
			</value>
        </member>
        <member name="P:Dart.PowerTCP.Mail.EndEventArgs.State">
            <summary>
				Gets the object that was included as part of the associated method call. 
			</summary><remarks>
				<p>The EndEventArgs.State property can be used in the calling asynchronous method to make data accessible
				to the handling event.</p>
				<p>This property is useful for making data accessible to the handling event. Since asynchronous methods are "disconnected" (meaning that when one is called, it executes on it's own and returns in the event handler) data that you were using in the code that called the asynchronous method may not be available in the event handler. Simply pass this data in as <i>state</i> when calling the asynchronous method (usually a BeginXXX method) and it is available in the event handler.
				If you do not wish to make an object accessible in the EndXXX event, simple pass in null as <i>state</i>.</p>
			</remarks><value>
				An object containing data passed into the calling asynchronous method.
			</value>
        </member>
        <member name="T:Dart.PowerTCP.Mail.ImapProgressEventArgs">
            <summary>
				Provides data for the Imap.Progress event.
			</summary><remarks>
				<p>This class provides data for the Imap.Progress event, which is raised
				periodically while a message or message section is being transferred. The ImapProgressEventArgs.Message
				property represents the actual message being transferred.</p>
				<p>The value of ImapProgressEventArgs.Length and ImapProgressEventArgs.Position 
				depends on the operation. For example:</p>
				<ul>
					<li>If downloading headers, ImapProgressEventArgs.Length is the total length of the headers. ImapProgressEventArgs.Position is the count of bytes received.</li>
					<li>If downloading messages, ImapProgressEventArgs.Length is the total length of the message. ImapProgressEventArgs.Position is the count of bytes received.</li>
					<li>If downloading bodystructure or envelope, both of these values will be 0, because the total amount of data beging retrieved is unknown.</li>
				</ul>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates displaying progress when getting messages.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub GetTest()
   ' Login
   Imap1.Login(Server, User, Pass)
   
   ' Get all messages in INBOX, this will cause the Progress event to be raised.
   Imap1.CurrentMailbox.Get()
   
   ' Logout
   Imap1.Logout()
End Sub
    
Private Sub Imap1_Progress(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureMail.ImapProgressEventArgs) Handles Imap1.Progress
   ProgressBar.Minimum = 0
   ProgressBar.Maximum = e.Length
   ProgressBar.Value = e.Position
   LblProgress.Text = "Processing message " + e.Message.Id

   If e.Length = e.Position Then
      LblProgress.Text = "Complete"
   End If
End Sub
<span class="lang">[C#]</span>
private void GetTest()
{
   // Login
   imap1.Login(Server, User, Pass);
   
   // Get all messages in INBOX, this will cause the Progress event to be raised.
   imap1.CurrentMailbox.Get();
   
   // Logout
   imap1.Logout();
}

private void imap1_Progress(object sender, Dart.PowerTCP.SecureMail.ImapProgressEventArgs e)
{
   progressBar.Minimum = 0;
   progressBar.Maximum = (int)e.Length;
   progressBar.Value = (int)e.Position;
   lblProgress.Text = "Processing message " + e.Message.Id;

   if(e.Length == e.Position)
      lblProgress.Text = "Complete";
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.ImapProgressEventArgs.Message">
            <summary>
				Gets the ImapMessage object representing the current message being transferred.
			</summary><value>
				Returns the ImapMessage object representing the current message being transferred.
			</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates displaying progress when getting messages.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub GetTest()
   ' Login
   Imap1.Login(Server, User, Pass)
   
   ' Get all messages in INBOX, this will cause the Progress event to be raised.
   Imap1.CurrentMailbox.Get()
   
   ' Logout
   Imap1.Logout()
End Sub
    
Private Sub Imap1_Progress(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureMail.ImapProgressEventArgs) Handles Imap1.Progress
   ProgressBar.Minimum = 0
   ProgressBar.Maximum = e.Length
   ProgressBar.Value = e.Position
   LblProgress.Text = "Processing message " + e.Message.Id

   If e.Length = e.Position Then
      LblProgress.Text = "Complete"
   End If
End Sub
<span class="lang">[C#]</span>
private void GetTest()
{
   // Login
   imap1.Login(Server, User, Pass);
   
   // Get all messages in INBOX, this will cause the Progress event to be raised.
   imap1.CurrentMailbox.Get();
   
   // Logout
   imap1.Logout();
}

private void imap1_Progress(object sender, Dart.PowerTCP.SecureMail.ImapProgressEventArgs e)
{
   progressBar.Minimum = 0;
   progressBar.Maximum = (int)e.Length;
   progressBar.Value = (int)e.Position;
   lblProgress.Text = "Processing message " + e.Message.Id;

   if(e.Length == e.Position)
      lblProgress.Text = "Complete";
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.ImapProgressEventArgs.Position">
            <summary>Gets the byte count of downloaded data.</summary><remarks>
				<p>The value of ImapProgressEventArgs.Length and ImapProgressEventArgs.Position 
				depends on the operation. For example:</p>
				<ul>
					<li>If downloading headers, ImapProgressEventArgs.Length is the total length of the headers. ImapProgressEventArgs.Position is the count of bytes received.</li>
					<li>If downloading messages, ImapProgressEventArgs.Length is the total length of the message. ImapProgressEventArgs.Position is the count of bytes received.</li>
					<li>If downloading bodystructure or envelope, both of these values will be 0, because the total amount of data beging retrieved is unknown.</li>
				</ul>
			</remarks><value>Returns the byte count of downloaded data. If there is no way to determine how much data to expect (ImapProgressEventArgs.Length = 0), this value will also be 0.</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates displaying progress when getting messages.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub GetTest()
   ' Login
   Imap1.Login(Server, User, Pass)
   
   ' Get all messages in INBOX, this will cause the Progress event to be raised.
   Imap1.CurrentMailbox.Get()
   
   ' Logout
   Imap1.Logout()
End Sub
    
Private Sub Imap1_Progress(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureMail.ImapProgressEventArgs) Handles Imap1.Progress
   ProgressBar.Minimum = 0
   ProgressBar.Maximum = e.Length
   ProgressBar.Value = e.Position
   LblProgress.Text = "Processing message " + e.Message.Id

   If e.Length = e.Position Then
      LblProgress.Text = "Complete"
   End If
End Sub
<span class="lang">[C#]</span>
private void GetTest()
{
   // Login
   imap1.Login(Server, User, Pass);
   
   // Get all messages in INBOX, this will cause the Progress event to be raised.
   imap1.CurrentMailbox.Get();
   
   // Logout
   imap1.Logout();
}

private void imap1_Progress(object sender, Dart.PowerTCP.SecureMail.ImapProgressEventArgs e)
{
   progressBar.Minimum = 0;
   progressBar.Maximum = (int)e.Length;
   progressBar.Value = (int)e.Position;
   lblProgress.Text = "Processing message " + e.Message.Id;

   if(e.Length == e.Position)
      lblProgress.Text = "Complete";
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.ImapProgressEventArgs.Length">
            <summary>Gets the total length of expected data.</summary><remarks>
				<p>The value of ImapProgressEventArgs.Length and ImapProgressEventArgs.Position 
				depends on the operation. For example:</p>
				<ul>
					<li>If downloading headers, ImapProgressEventArgs.Length is the total length of the headers. ImapProgressEventArgs.Position is the count of bytes received.</li>
					<li>If downloading messages, ImapProgressEventArgs.Length is the total length of the message. ImapProgressEventArgs.Position is the count of bytes received.</li>
					<li>If downloading bodystructure or envelope, both of these values will be 0, because the total amount of data beging retrieved is unknown.</li>
				</ul>
			</remarks><value>Returns the total length of expected data. If there is no way to determine how much data to expect, this value will be 0.</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates displaying progress when getting messages.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub GetTest()
   ' Login
   Imap1.Login(Server, User, Pass)
   
   ' Get all messages in INBOX, this will cause the Progress event to be raised.
   Imap1.CurrentMailbox.Get()
   
   ' Logout
   Imap1.Logout()
End Sub
    
Private Sub Imap1_Progress(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureMail.ImapProgressEventArgs) Handles Imap1.Progress
   ProgressBar.Minimum = 0
   ProgressBar.Maximum = e.Length
   ProgressBar.Value = e.Position
   LblProgress.Text = "Processing message " + e.Message.Id

   If e.Length = e.Position Then
      LblProgress.Text = "Complete"
   End If
End Sub
<span class="lang">[C#]</span>
private void GetTest()
{
   // Login
   imap1.Login(Server, User, Pass);
   
   // Get all messages in INBOX, this will cause the Progress event to be raised.
   imap1.CurrentMailbox.Get();
   
   // Logout
   imap1.Logout();
}

private void imap1_Progress(object sender, Dart.PowerTCP.SecureMail.ImapProgressEventArgs e)
{
   progressBar.Minimum = 0;
   progressBar.Maximum = (int)e.Length;
   progressBar.Value = (int)e.Position;
   lblProgress.Text = "Processing message " + e.Message.Id;

   if(e.Length == e.Position)
      lblProgress.Text = "Complete";
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="T:Dart.PowerTCP.Mail.ImapProgressEventHandler">
            <summary>
				Represents the method (event handler) that will be raised when progress information is available.
			</summary><remarks>
				<p>As Microsoft describes in their MSDN documentation, the event model in the .NET Framework is based on having an event delegate that connects an event with its handler. To raise an event, two elements are needed:</p>
				<ul>
					<li>A class that holds the event data. This class must derive from the base class EventArgs.</li>
					<li>A delegate that points to a method that provides the response to the event.</li>
				</ul>
				<p>When asynchronously getting messages, the class that holds the event data is the ImapProgressEventArgs class. A method must be created with the same signature as the delegate. If you are working within the Visual Studio.NET environment, this can be automatically done for you. See the Using Events In PowerTCP topic for more information. If you are not working within the Visual Studio.NET environment, you must do this yourself. In this example that would mean a method would have to be defined to accept two arguments (an object and an ImapProgressEventArgs) and return void. Once this has been done, the delegate must be "connected" to the handling event. This is done by adding an instance of the delegate to the event. 
				For more information about event handler delegates, see the Using Events In PowerTCP topic.</p>
			</remarks>
        </member>
        <member name="T:Dart.PowerTCP.Mail.ImapResponseEventArgs">
            <summary>
				Provides data for the Imap events: Imap.Alert, Imap.EndClear, Imap.EndCopy,
				Imap.EndExamine, Imap.EndInvoke, Imap.EndLogin, Imap.EndLogout, Imap.EndMailboxRemove,
				Imap.EndNoop, Imap.EndPurge, Imap.EndRefresh, Imap.EndSet, Imap.EndSubscribe, Imap.EndSubscribe, Imap.LineReceived,
				Imap.Update.
			</summary><remarks>
				<p>This class provides event data for any event that handles a response from the IMAP server. This
				event could be a reporting-type event (such as the Imap.LineReceived event, which is raised on each line received)
				or a process completed event (such as any of the EndXXX events listed above, which are raised upon completion of the
				associated BeginXXX method).</p>
				<p>
				If multiple responses are expected, these responses will be part of the ImapResponseEventArgs.Responses property.
				ImapResponseEventArgs.Response will reflect the first response.
				For this reason, ImapResponseEventArgs.Response will always equal <a href="Dart.PowerTCP.Mail.ImapResponseEventArgs.Responses.html">Responses[0]</a>.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the LineReceived event to detect Status responses.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub DoSomething()
   ' Log in. The Imap.LineReceived event will be raised when data is received
   Imap1.Login(Server, User, Pass)

   ' Send a NOOP
   Imap1.Noop()

   ' Log out
   Imap1.Logout()
End Sub

Private Sub Imap1_LineReceived(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureMail.ImapResponseEventArgs) Handles Imap1.LineReceived
   Dim Response As ImapResponse
   ' Iterate through all responses.
   For Each Response In e.Responses
      ' Check if it is a status response. 
      If Response.ResponseType = ImapResponseType.Status Then 
         Debug.WriteLine("The server has returned a status response")
         Debug.WriteLine("Status: " + Response.Status)
         Debug.WriteLine("Explanation: " + Response.Explanation)
      End If
   Next
End Sub
<span class="lang">[C#]</span>
private void DoSomething()
{
   // Log in. The Imap.LineReceived event will be raised when data is received
   imap1.Login(Server, User, Pass);

   // Send a NOOP
   imap1.Noop();

   // Log out
   imap1.Logout();
}

private void imap1_LineReceived(object sender, Dart.PowerTCP.SecureMail.ImapResponseEventArgs e)
{
   // Iterate through all responses.
   foreach(ImapResponse response in e.Responses)
   {
      // Check if it is a status response.
      if(response.ResponseType == ImapResponseType.Status)
      {
         Debug.WriteLine("The server has returned a status response");
         Debug.WriteLine("Status: " + response.Status);
         Debug.WriteLine("Explanation: " + response.Explanation);
      }
   }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.ImapResponseEventArgs.Response">
            /<summary>
				Gets an ImapResponse object representing a single line response from the IMAP server.
			</summary><remarks>
				<p>
				The ImapResponseEventArgs.Response property returns the first response (<a href="Dart.PowerTCP.Mail.ImapResponseEventArgs.Responses.html">Responses[0]</a>).  
				If a multiline response is expected, use the ImapResponseEventArgs.Responses property.
				</p>
			</remarks><value>Returns an ImapResponse object representing a single line response from the server.</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the LineReceived event to detect Status responses.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub DoSomething()
   ' Log in. The Imap.LineReceived event will be raised when data is received
   Imap1.Login(Server, User, Pass)

   ' Send a NOOP
   Imap1.Noop()

   ' Log out
   Imap1.Logout()
End Sub

Private Sub Imap1_LineReceived(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureMail.ImapResponseEventArgs) Handles Imap1.LineReceived
   Dim Response As ImapResponse
   ' Iterate through all responses.
   For Each Response In e.Responses
      ' Check if it is a status response. 
      If Response.ResponseType = ImapResponseType.Status Then 
         Debug.WriteLine("The server has returned a status response")
         Debug.WriteLine("Status: " + Response.Status)
         Debug.WriteLine("Explanation: " + Response.Explanation)
      End If
   Next
End Sub
<span class="lang">[C#]</span>
private void DoSomething()
{
   // Log in. The Imap.LineReceived event will be raised when data is received
   imap1.Login(Server, User, Pass);

   // Send a NOOP
   imap1.Noop();

   // Log out
   imap1.Logout();
}

private void imap1_LineReceived(object sender, Dart.PowerTCP.SecureMail.ImapResponseEventArgs e)
{
   // Iterate through all responses.
   foreach(ImapResponse response in e.Responses)
   {
      // Check if it is a status response.
      if(response.ResponseType == ImapResponseType.Status)
      {
         Debug.WriteLine("The server has returned a status response");
         Debug.WriteLine("Status: " + response.Status);
         Debug.WriteLine("Explanation: " + response.Explanation);
      }
   }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.ImapResponseEventArgs.Responses">
            /<summary>
				Gets an array of ImapResponse objects representing all responses from the IMAP server applicable to this event.
			</summary><remarks>
				<p>If a multi-line response is expected from the server, iterate through this collection to access
				each response. If a single line response is expected from the server, access Responses[0] or simply
				access the ImapResponseEventArgs.Response property, which contains the first response received.</p>
			</remarks><value>Returns an array of ImapResponse objects.</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the LineReceived event to detect Status responses.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub DoSomething()
   ' Log in. The Imap.LineReceived event will be raised when data is received
   Imap1.Login(Server, User, Pass)

   ' Send a NOOP
   Imap1.Noop()

   ' Log out
   Imap1.Logout()
End Sub

Private Sub Imap1_LineReceived(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureMail.ImapResponseEventArgs) Handles Imap1.LineReceived
   Dim Response As ImapResponse
   ' Iterate through all responses.
   For Each Response In e.Responses
      ' Check if it is a status response. 
      If Response.ResponseType = ImapResponseType.Status Then 
         Debug.WriteLine("The server has returned a status response")
         Debug.WriteLine("Status: " + Response.Status)
         Debug.WriteLine("Explanation: " + Response.Explanation)
      End If
   Next
End Sub
<span class="lang">[C#]</span>
private void DoSomething()
{
   // Log in. The Imap.LineReceived event will be raised when data is received
   imap1.Login(Server, User, Pass);

   // Send a NOOP
   imap1.Noop();

   // Log out
   imap1.Logout();
}

private void imap1_LineReceived(object sender, Dart.PowerTCP.SecureMail.ImapResponseEventArgs e)
{
   // Iterate through all responses.
   foreach(ImapResponse response in e.Responses)
   {
      // Check if it is a status response.
      if(response.ResponseType == ImapResponseType.Status)
      {
         Debug.WriteLine("The server has returned a status response");
         Debug.WriteLine("Status: " + response.Status);
         Debug.WriteLine("Explanation: " + response.Explanation);
      }
   }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="T:Dart.PowerTCP.Mail.ImapResponseEventHandler">
            <summary>
				Represents the method (event handler) that will be raised when a response is received from an IMAP server.
			</summary><remarks>
				<p>As Microsoft describes in their MSDN documentation, the event model in the .NET Framework is based on having an event delegate that connects an event with its handler. To raise an event, two elements are needed:</p>
				<ul>
					<li>A class that holds the event data. This class must derive from the base class EventArgs.</li>
					<li>A delegate that points to a method that provides the response to the event.</li>
				</ul>
				<p>When asynchronously getting messages, the class that holds the event data is the ImapResponseEventArgs class. A method must be created with the same signature as the delegate. If you are working within the Visual Studio.NET environment, this can be automatically done for you. See the Using Events In PowerTCP topic for more information. If you are not working within the Visual Studio.NET environment, you must do this yourself. In this example that would mean a method would have to be defined to accept two arguments (an object and an ImapResponseEventArgs) and return void. Once this has been done, the delegate must be "connected" to the handling event. This is done by adding an instance of the delegate to the event. 
				For more information about event handler delegates, see the Using Events In PowerTCP topic.</p>
			</remarks>
        </member>
        <member name="T:Dart.PowerTCP.Mail.MailboxEventArgs">
            <summary>Provides data for the Imap.EndMailboxAdd, Imap.EndList, and Imap.Mailbox events.</summary><remarks>
				<p>This class provides data for any event which markes the completion or progress of any
				asynchronous method which manipulates or gathers information about IMAP mailboxes.</p>
				<p>
				If multiple mailboxes are effected, these mailboxes will be part of the MailboxEventArgs.Mailboxes property.
				MailboxEventArgs.Mailbox will reflect the first mailbox effected.
				For this reason, MailBoxEventArgs.Mailbox will always equal MailboxEventArgs.Mailboxes[0].</p>
				<p>If any error occurred during the asynchronous operation, it would be returned in
				the EndEventArgs.Exception property. Be sure to check this property first before
				accessing other members of MailBoxEventArgs.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates asynchronously creating a new mailbox.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
private void AsynchronousMailboxCreateTest()
{
   ' Login to the server.
   Imap1.Login(Server, User, Pass)

   ' Begin to asynchronously create a new mailbox. When
   ' complete, the Imap.EndMailboxAdd event will be raised.
   Imap1.Mailboxes.BeginAdd("MyNewMailbox", Nothing)
}

Private Sub Imap1_EndMailboxAdd(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureMail.MailboxEventArgs) Handles Imap1.EndMailboxAdd
   If e.Exception Is Nothing Then
      Debug.WriteLine("New mailbox " + e.Mailbox.Name + " created.")
   Else
      Debug.WriteLine("Exception received: " + e.Exception.Message)
   End If
End Sub
<span class="lang">[C#]</span>
private void AsynchronousMailboxCreateTest()
{
   // Login to the server.
   imap1.Login(Server, User, Pass);

   // Begin to asynchronously create a new mailbox. When
   // complete, the Imap.EndMailboxAdd event will be raised.
   imap1.Mailboxes.BeginAdd("MyNewMailbox", null);
}

private void imap1_EndMailboxAdd(object sender, Dart.PowerTCP.SecureMail.MailboxEventArgs e)
{
   if(e.Exception == null)
      Debug.WriteLine("New mailbox " + e.Mailbox.Name + " created.");
   else
      Debug.WriteLine("Exception received: " + e.Exception.Message);
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.MailboxEventArgs.Mailbox">
            <summary>Gets the Mailbox object representing the IMAP mailbox for which the event was raised.</summary><remarks>
				<p>If accessing this property from within the Imap.EndMailboxAdd event (notifying completion of the MailboxCollection.BeginAdd method), then this
				property returns the Mailbox object representing the newly created mailbox. If accessing this property
				from within the Imap.Mailbox event (notifying new mailbox data was received from the server) then this property
				returns the Mailbox object representing the mailbox for which new data was received.
				</p>
			</remarks><value>The Mailbox object representing the mailbox.</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates asynchronously creating a new mailbox.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
private void AsynchronousMailboxCreateTest()
{
   ' Login to the server.
   Imap1.Login(Server, User, Pass)

   ' Begin to asynchronously create a new mailbox. When
   ' complete, the Imap.EndMailboxAdd event will be raised.
   Imap1.Mailboxes.BeginAdd("MyNewMailbox", Nothing)
}

Private Sub Imap1_EndMailboxAdd(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureMail.MailboxEventArgs) Handles Imap1.EndMailboxAdd
   If e.Exception Is Nothing Then
      Debug.WriteLine("New mailbox " + e.Mailbox.Name + " created.")
   Else
      Debug.WriteLine("Exception received: " + e.Exception.Message)
   End If
End Sub
<span class="lang">[C#]</span>
private void AsynchronousMailboxCreateTest()
{
   // Login to the server.
   imap1.Login(Server, User, Pass);

   // Begin to asynchronously create a new mailbox. When
   // complete, the Imap.EndMailboxAdd event will be raised.
   imap1.Mailboxes.BeginAdd("MyNewMailbox", null);
}

private void imap1_EndMailboxAdd(object sender, Dart.PowerTCP.SecureMail.MailboxEventArgs e)
{
   if(e.Exception == null)
      Debug.WriteLine("New mailbox " + e.Mailbox.Name + " created.");
   else
      Debug.WriteLine("Exception received: " + e.Exception.Message);
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.MailboxEventArgs.Mailboxes">
            /<summary>
				Gets an array of Mailbox objects representing all mailboxes effected by the operation.
			</summary><remarks>
				<p>If it is expected that multiple mailboxes are effected, iterate through this collection to access
				each mailbox. If it is expected that a single mailbox is effected, access MailboxEventArgs.Mailboxes[0] or simply
				access the MailboxEventArgs.Mailbox property, which contains the first mailbox effected.</p>
			</remarks><value>Returns an array of Mailbox objects.</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates performing an asynchronous listing.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub AsynchronousListTest()
   ' Set Autolist to false. We will explicitly call for a listing.
   Imap1.AutoList = False

   ' Login to the server.
   Imap1.Login(Server, User, Pass)

   ' Begin an asynchronous listing.
   Imap1.BeginList(Nothing)
End Sub

Private Sub Imap1_EndList(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureMail.MailboxEventArgs) Handles Imap1.EndList
   If e.Exception Is Nothing Then
      Debug.WriteLine("The following mailboxes were reported.")
      Dim Box As Mailbox
      For Each Box In E.Mailboxes
         Debug.WriteLine(Box.Name)
      End If
   End If
End Sub
<span class="lang">[C#]</span>
private void AsynchronousListTest()
{
   // Set Autolist to false. We will explicitly call for a listing.
   imap1.AutoList = false;

   // Login to the server.
   imap1.Login(Server, User, Pass);

   // Begin an asynchronous listing.
   imap1.BeginList(null);
}

private void imap1_EndList(object sender, Dart.PowerTCP.SecureMail.MailboxEventArgs e)
{
   if(e.Exception == null)
   {
      Debug.WriteLine("The following mailboxes were reported.");
      foreach(Mailbox box in e.Mailboxes)
         Debug.WriteLine(box.Name);
   }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="T:Dart.PowerTCP.Mail.MailboxEventHandler">
            <summary>
				Represents the method (event handler) that will be raised when mailbox information is available or an asynchronous method involving mailbox manipulation completes.
			</summary><remarks>
				<p>As Microsoft describes in their MSDN documentation, the event model in the .NET Framework is based on having an event delegate that connects an event with its handler. To raise an event, two elements are needed:</p>
				<ul>
					<li>A class that holds the event data. This class must derive from the base class EventArgs.</li>
					<li>A delegate that points to a method that provides the response to the event.</li>
				</ul>
				<p>When asynchronously getting messages, the class that holds the event data is the MailboxEventArgs class. A method must be created with the same signature as the delegate. If you are working within the Visual Studio.NET environment, this can be automatically done for you. See the Using Events In PowerTCP topic for more information. If you are not working within the Visual Studio.NET environment, you must do this yourself. In this example that would mean a method would have to be defined to accept two arguments (an object and an MailboxEventArgs) and return void. Once this has been done, the delegate must be "connected" to the handling event. This is done by adding an instance of the delegate to the event. 
				For more information about event handler delegates, see the Using Events In PowerTCP topic.</p>
			</remarks>
        </member>
        <member name="T:Dart.PowerTCP.Mail.MessagePartEventArgs">
            <summary>Provides data for the Imap.EndGetPart event.</summary><remarks>
				<p>This class provides data for the Imap.EndGetPart event, which is
				raised upon completion of the ImapMessage.BeginGetPart method. The ImapMessage.BeginGetPart method
				is used to get message parts (such as attachments) from the IMAP server. The message part is
				accessable via the MessagePartEvent.Part property. The ImapMessage that contains the part is
				accessble via the MessagePartEvent.Message property.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates asynchronously retrieving a part of a message.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub AsynchronousGetPartTest()
   ' Login 
   Imap1.Login(Server, User, Pass)

   ' Retrieve message outlines for INBOX.
   Imap1.CurrentMailbox.Get(Imap1.CurrentMailbox.Messages(0), Imap1.CurrentMailbox.Messages(Imap1.CurrentMailbox.Messages.Count - 1), ImapMessageSections.BodyStructure Or ImapMessageSections.Envelope)

   ' Find the first message with an attachment
   Dim Attach As MimeAttachmentStream
   Dim AttachMessage As ImapMessage
   Dim Msg As ImapMessage
   For Each Msg In Imap1.CurrentMailbox.Messages	
      If (Msg.Message.Attachments.Count &gt; 0) Then
         Attach = Msg.Message.Attachments(0)
         AttachMessage = Msg
         Exit For
       End If
   Next
   
   ' Get the attachment. When complete the Imap.EndGetPart event will be raised
   AttachMessage.BeginGetPart(Attach, Nothing)
End Sub

Private Sub Imap1_EndGetPart(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureMail.MessagePartEventArgs) Handles Imap1.EndGetPart
   If e.Exception Is Nothing Then
      Debug.WriteLine("Part of message: " + e.Message.Id + " retrieved")
      Debug.WriteLine("Part Size = " &amp; e.Part.Length)
   End If
End Sub
<span class="lang">[C#]</span>
private void AsynchronousGetPartTest()
{
   // Login 
   imap1.Login(Server, User, Pass);

   // Retrieve message outlines for INBOX.
   imap1.CurrentMailbox.Get(imap1.CurrentMailbox.Messages[0], 
      imap1.CurrentMailbox.Messages[imap1.CurrentMailbox.Messages.Count - 1], 
      ImapMessageSections.BodyStructure | ImapMessageSections.Envelope);


   // Find the first message with an attachment
   MimeAttachmentStream attach = null;
   ImapMessage attachMessage = null;
   foreach(ImapMessage msg in imap1.CurrentMailbox.Messages)
   {
      if(msg.Message.Attachments.Count &gt; 0)
      {
         // Save a reference to the attachment and message and break from the loop
         attach = (MimeAttachmentStream)msg.Message.Attachments[0];
         attachMessage = msg;
         break;
      }
   }
   
   // Get the attachment. When complete the Imap.EndGetPart event will be raised
   attachMessage.BeginGetPart(attach, null);
}

private void imap1_EndGetPart(object sender, Dart.PowerTCP.SecureMail.MessagePartEventArgs e)
{
   if(e.Exception == null)
   {
      Debug.WriteLine("Part of message: " + e.Message.Id + " retrieved");
      Debug.WriteLine("Part Size = " + e.Part.Length);
   }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.MessagePartEventArgs.Message">
            <summary>Gets the ImapMessage that contains the part.</summary><remarks>
				<p>The MessagePartEventArgs.Message property returns the ImapMessage object representing
				the message that contains the part for which this event was raised.</p>
			</remarks><value>An ImapMessage object.</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates asynchronously retrieving a part of a message.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub AsynchronousGetPartTest()
   ' Login 
   Imap1.Login(Server, User, Pass)

   ' Retrieve message outlines for INBOX.
   Imap1.CurrentMailbox.Get(Imap1.CurrentMailbox.Messages(0), Imap1.CurrentMailbox.Messages(Imap1.CurrentMailbox.Messages.Count - 1), ImapMessageSections.BodyStructure Or ImapMessageSections.Envelope)

   ' Find the first message with an attachment
   Dim Attach As MimeAttachmentStream
   Dim AttachMessage As ImapMessage
   Dim Msg As ImapMessage
   For Each Msg In Imap1.CurrentMailbox.Messages	
      If (Msg.Message.Attachments.Count &gt; 0) Then
         Attach = Msg.Message.Attachments(0)
         AttachMessage = Msg
         Exit For
       End If
   Next
   
   ' Get the attachment. When complete the Imap.EndGetPart event will be raised
   AttachMessage.BeginGetPart(Attach, Nothing)
End Sub

Private Sub Imap1_EndGetPart(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureMail.MessagePartEventArgs) Handles Imap1.EndGetPart
   If e.Exception Is Nothing Then
      Debug.WriteLine("Part of message: " + e.Message.Id + " retrieved")
      Debug.WriteLine("Part Size = " &amp; e.Part.Length)
   End If
End Sub
<span class="lang">[C#]</span>
private void AsynchronousGetPartTest()
{
   // Login 
   imap1.Login(Server, User, Pass);

   // Retrieve message outlines for INBOX.
   imap1.CurrentMailbox.Get(imap1.CurrentMailbox.Messages[0], 
      imap1.CurrentMailbox.Messages[imap1.CurrentMailbox.Messages.Count - 1], 
      ImapMessageSections.BodyStructure | ImapMessageSections.Envelope);


   // Find the first message with an attachment
   MimeAttachmentStream attach = null;
   ImapMessage attachMessage = null;
   foreach(ImapMessage msg in imap1.CurrentMailbox.Messages)
   {
      if(msg.Message.Attachments.Count &gt; 0)
      {
         // Save a reference to the attachment and message and break from the loop
         attach = (MimeAttachmentStream)msg.Message.Attachments[0];
         attachMessage = msg;
         break;
      }
   }
   
   // Get the attachment. When complete the Imap.EndGetPart event will be raised
   attachMessage.BeginGetPart(attach, null);
}

private void imap1_EndGetPart(object sender, Dart.PowerTCP.SecureMail.MessagePartEventArgs e)
{
   if(e.Exception == null)
   {
      Debug.WriteLine("Part of message: " + e.Message.Id + " retrieved");
      Debug.WriteLine("Part Size = " + e.Part.Length);
   }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.MessagePartEventArgs.Part">
            <summary>Gets the part retrieved.</summary><remarks>
				<p>The MessagePartEventArgs.Part property returns a System.IO.Stream object containing
			the part data. Cast this value into the appropriate stream type. For example, if an 
			attachment was retrieved, you would cast MessagePartEventArgs.Part into a MimeAttachmentStream object.</p>
			</remarks><value>A System.IO.Stream object containing part data.</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates asynchronously retrieving a part of a message.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub AsynchronousGetPartTest()
   ' Login 
   Imap1.Login(Server, User, Pass)

   ' Retrieve message outlines for INBOX.
   Imap1.CurrentMailbox.Get(Imap1.CurrentMailbox.Messages(0), Imap1.CurrentMailbox.Messages(Imap1.CurrentMailbox.Messages.Count - 1), ImapMessageSections.BodyStructure Or ImapMessageSections.Envelope)

   ' Find the first message with an attachment
   Dim Attach As MimeAttachmentStream
   Dim AttachMessage As ImapMessage
   Dim Msg As ImapMessage
   For Each Msg In Imap1.CurrentMailbox.Messages	
      If (Msg.Message.Attachments.Count &gt; 0) Then
         Attach = Msg.Message.Attachments(0)
         AttachMessage = Msg
         Exit For
       End If
   Next
   
   ' Get the attachment. When complete the Imap.EndGetPart event will be raised
   AttachMessage.BeginGetPart(Attach, Nothing)
End Sub

Private Sub Imap1_EndGetPart(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureMail.MessagePartEventArgs) Handles Imap1.EndGetPart
   If e.Exception Is Nothing Then
      Debug.WriteLine("Part of message: " + e.Message.Id + " retrieved")
      Debug.WriteLine("Part Size = " &amp; e.Part.Length)
   End If
End Sub
<span class="lang">[C#]</span>
private void AsynchronousGetPartTest()
{
   // Login 
   imap1.Login(Server, User, Pass);

   // Retrieve message outlines for INBOX.
   imap1.CurrentMailbox.Get(imap1.CurrentMailbox.Messages[0], 
      imap1.CurrentMailbox.Messages[imap1.CurrentMailbox.Messages.Count - 1], 
      ImapMessageSections.BodyStructure | ImapMessageSections.Envelope);


   // Find the first message with an attachment
   MimeAttachmentStream attach = null;
   ImapMessage attachMessage = null;
   foreach(ImapMessage msg in imap1.CurrentMailbox.Messages)
   {
      if(msg.Message.Attachments.Count &gt; 0)
      {
         // Save a reference to the attachment and message and break from the loop
         attach = (MimeAttachmentStream)msg.Message.Attachments[0];
         attachMessage = msg;
         break;
      }
   }
   
   // Get the attachment. When complete the Imap.EndGetPart event will be raised
   attachMessage.BeginGetPart(attach, null);
}

private void imap1_EndGetPart(object sender, Dart.PowerTCP.SecureMail.MessagePartEventArgs e)
{
   if(e.Exception == null)
   {
      Debug.WriteLine("Part of message: " + e.Message.Id + " retrieved");
      Debug.WriteLine("Part Size = " + e.Part.Length);
   }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="T:Dart.PowerTCP.Mail.MessagePartEventHandler">
            <summary>
				Represents the method (event handler) that will be raised when asynchronous methods which retrieve message parts complete.
			</summary><remarks>
				<p>As Microsoft describes in their MSDN documentation, the event model in the .NET Framework is based on having an event delegate that connects an event with its handler. To raise an event, two elements are needed:</p>
				<ul>
					<li>A class that holds the event data. This class must derive from the base class EventArgs.</li>
					<li>A delegate that points to a method that provides the response to the event.</li>
				</ul>
				<p>When asynchronously getting messages, the class that holds the event data is the MessagePartEventArgs class. A method must be created with the same signature as the delegate. If you are working within the Visual Studio.NET environment, this can be automatically done for you. See the Using Events In PowerTCP topic for more information. If you are not working within the Visual Studio.NET environment, you must do this yourself. In this example that would mean a method would have to be defined to accept two arguments (an object and an MessagePartEventArgs) and return void. Once this has been done, the delegate must be "connected" to the handling event. This is done by adding an instance of the delegate to the event. 
				For more information about event handler delegates, see the Using Events In PowerTCP topic.</p>
			</remarks>
        </member>
        <member name="T:Dart.PowerTCP.Mail.ImapMessageEventArgs">
            <summary>Provides data for the Imap events: Imap.EndGetMessage, Imap.EndMessageAdd, Imap.EndSearch.</summary><remarks>
				<p>This class provides event data for any event that handles the completion of any method which
			asynchronously retrieves messages, adds messages, or searches for messages.</p>
				<p>ImapMessageEventArgs.Message will always contain a value. If multiple messages were involved, ImapMessageEventArgs.Messages will contain a value for 
			each message. ImapResponseEventArgs.Message will always equal <a href="Dart.PowerTCP.Mail.ImapMessageEventArgs.Messages.html">Messages[0]</a>.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the Mailbox.BeginSearch method. This example constructs the
				search "SEARCH FLAGGED SINCE 1-Feb-1994 NOT FROM 'Smith'"</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub AsynchronousSearchTest()
   ' Login
   Imap1.Login(Server, User, Pass)

   ' Construct the seach "SEARCH FLAGGED SINCE 1-Feb-1994 NOT FROM 'Smith'"
   Dim Criteria As New ArrayList()
   Criteria.Add(New ImapSearchParameter(ImapCriterion.Flagged, ""))
   Criteria.Add(New ImapSearchParameter(ImapCriterion.Since, "1-Feb-1994"))
   Criteria.Add(New ImapSearchParameter(ImapCriterion.Not, ""))
   Criteria.Add(New ImapSearchParameter(ImapCriterion.From, "Smith"))

   ' Alternatively, ImapSearchParameter objects can be created like so
   ' Dim Param As New ImapSearchParameter()
   ' Param.Criterion = ImapCriterion.Flagged
   ' Param.Paramter = ""
   ' Criteria.Add(Param)

   ' Perform the search. This will occur on the default box INBOX.
   Imap1.CurrentMailbox.BeginSearch(Criteria, Nothing)
End Sub

Private Sub Imap1_EndSearch(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureMail.ImapMessageEventArgs) Handles Imap1.EndSearch
   If e.Exception Is Nothing Then
      ' The following messages meet the criteria
      Dim Msg As ImapMessages
      For Each Msg In e.Messages
         Debug.WriteLine("Message: " + Msg.Id)
      Next
   End Sub
End Sub
<span class="lang">[C#]</span>
private void AsynchronousSearchTest()
{
   // Login
   imap1.Login(Server, User, Pass);

   // Construct the seach "SEARCH FLAGGED SINCE 1-Feb-1994 NOT FROM 'Smith'"
   ArrayList criteria = new ArrayList();
   criteria.Add(new ImapSearchParameter(ImapCriterion.Flagged, ""));
   criteria.Add(new ImapSearchParameter(ImapCriterion.Since, "1-Feb-1994"));
   criteria.Add(new ImapSearchParameter(ImapCriterion.Not, ""));
   criteria.Add(new ImapSearchParameter(ImapCriterion.From, "Smith"));

   /*
   / Alternatively, ImapSearchParameter objects can be created like so
   / ImapSearchParameter param = new ImapSearchParameter();
   / param.Criterion = ImapCriterion.Flagged;
   / param.Paramter = "";
   / criteria.Add(param);
   */

   // Perform the search. This will occur on the default box INBOX.
   imap1.CurrentMailbox.BeginSearch(criteria, null);
}

private void imap1_EndSearch(object sender, Dart.PowerTCP.SecureMail.ImapMessageEventArgs e)
{
   if(e.Exception == null)
   {
      // The following messages meet the criteria
      foreach(ImapMessage msg in e.Messages)
         Debug.WriteLine("Message: " + msg.Id);
   }			
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.ImapMessageEventArgs.Message">
            <summary>
				Gets an ImapMessage object representing the message for which the event was raised.
			</summary><remarks>
				<p>
				The ImapResponseEventArgs.Message property returns the first message (<a href="Dart.PowerTCP.Mail.ImapMessageEventArgs.Messages.html">Messages[0]</a>).  
				If a multiple messages are effected, use the ImapMessageEventArgs.Messages property.
				</p>
			</remarks><value>Returns an ImapMessage object representing the message.</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the Mailbox.BeginSearch method. This example constructs the
				search "SEARCH FLAGGED SINCE 1-Feb-1994 NOT FROM 'Smith'"</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub AsynchronousSearchTest()
   ' Login
   Imap1.Login(Server, User, Pass)

   ' Construct the seach "SEARCH FLAGGED SINCE 1-Feb-1994 NOT FROM 'Smith'"
   Dim Criteria As New ArrayList()
   Criteria.Add(New ImapSearchParameter(ImapCriterion.Flagged, ""))
   Criteria.Add(New ImapSearchParameter(ImapCriterion.Since, "1-Feb-1994"))
   Criteria.Add(New ImapSearchParameter(ImapCriterion.Not, ""))
   Criteria.Add(New ImapSearchParameter(ImapCriterion.From, "Smith"))

   ' Alternatively, ImapSearchParameter objects can be created like so
   ' Dim Param As New ImapSearchParameter()
   ' Param.Criterion = ImapCriterion.Flagged
   ' Param.Paramter = ""
   ' Criteria.Add(Param)

   ' Perform the search. This will occur on the default box INBOX.
   Imap1.CurrentMailbox.BeginSearch(Criteria, Nothing)
End Sub

Private Sub Imap1_EndSearch(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureMail.ImapMessageEventArgs) Handles Imap1.EndSearch
   If e.Exception Is Nothing Then
      ' The following messages meet the criteria
      Dim Msg As ImapMessages
      For Each Msg In e.Messages
         Debug.WriteLine("Message: " + Msg.Id)
      Next
   End Sub
End Sub
<span class="lang">[C#]</span>
private void AsynchronousSearchTest()
{
   // Login
   imap1.Login(Server, User, Pass);

   // Construct the seach "SEARCH FLAGGED SINCE 1-Feb-1994 NOT FROM 'Smith'"
   ArrayList criteria = new ArrayList();
   criteria.Add(new ImapSearchParameter(ImapCriterion.Flagged, ""));
   criteria.Add(new ImapSearchParameter(ImapCriterion.Since, "1-Feb-1994"));
   criteria.Add(new ImapSearchParameter(ImapCriterion.Not, ""));
   criteria.Add(new ImapSearchParameter(ImapCriterion.From, "Smith"));

   /*
   / Alternatively, ImapSearchParameter objects can be created like so
   / ImapSearchParameter param = new ImapSearchParameter();
   / param.Criterion = ImapCriterion.Flagged;
   / param.Paramter = "";
   / criteria.Add(param);
   */

   // Perform the search. This will occur on the default box INBOX.
   imap1.CurrentMailbox.BeginSearch(criteria, null);
}

private void imap1_EndSearch(object sender, Dart.PowerTCP.SecureMail.ImapMessageEventArgs e)
{
   if(e.Exception == null)
   {
      // The following messages meet the criteria
      foreach(ImapMessage msg in e.Messages)
         Debug.WriteLine("Message: " + msg.Id);
   }			
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.ImapMessageEventArgs.Messages">
            <summary>
				Gets an array of ImapMessage objects representing all messages effected by the asynchronous method.
			</summary><remarks>
				<p>If multiple messages were effected by the asynchronous method (ex. using Mailbox.BeginSearch to search for
				multiple messages), iterate through this collection to access
				each message. If a single message was from the server (ex. using Mailbox.BeginAdd to append a single message), access Messages[0] or simply
				access the ImapMessageEventArgs.Message property, which contains the first message effected.</p>
			</remarks><value>Returns an array of ImapMessage objects representing the message.</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the Mailbox.BeginSearch method. This example constructs the
				search "SEARCH FLAGGED SINCE 1-Feb-1994 NOT FROM 'Smith'"</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub AsynchronousSearchTest()
   ' Login
   Imap1.Login(Server, User, Pass)

   ' Construct the seach "SEARCH FLAGGED SINCE 1-Feb-1994 NOT FROM 'Smith'"
   Dim Criteria As New ArrayList()
   Criteria.Add(New ImapSearchParameter(ImapCriterion.Flagged, ""))
   Criteria.Add(New ImapSearchParameter(ImapCriterion.Since, "1-Feb-1994"))
   Criteria.Add(New ImapSearchParameter(ImapCriterion.Not, ""))
   Criteria.Add(New ImapSearchParameter(ImapCriterion.From, "Smith"))

   ' Alternatively, ImapSearchParameter objects can be created like so
   ' Dim Param As New ImapSearchParameter()
   ' Param.Criterion = ImapCriterion.Flagged
   ' Param.Paramter = ""
   ' Criteria.Add(Param)

   ' Perform the search. This will occur on the default box INBOX.
   Imap1.CurrentMailbox.BeginSearch(Criteria, Nothing)
End Sub

Private Sub Imap1_EndSearch(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureMail.ImapMessageEventArgs) Handles Imap1.EndSearch
   If e.Exception Is Nothing Then
      ' The following messages meet the criteria
      Dim Msg As ImapMessages
      For Each Msg In e.Messages
         Debug.WriteLine("Message: " + Msg.Id)
      Next
   End Sub
End Sub
<span class="lang">[C#]</span>
private void AsynchronousSearchTest()
{
   // Login
   imap1.Login(Server, User, Pass);

   // Construct the seach "SEARCH FLAGGED SINCE 1-Feb-1994 NOT FROM 'Smith'"
   ArrayList criteria = new ArrayList();
   criteria.Add(new ImapSearchParameter(ImapCriterion.Flagged, ""));
   criteria.Add(new ImapSearchParameter(ImapCriterion.Since, "1-Feb-1994"));
   criteria.Add(new ImapSearchParameter(ImapCriterion.Not, ""));
   criteria.Add(new ImapSearchParameter(ImapCriterion.From, "Smith"));

   /*
   / Alternatively, ImapSearchParameter objects can be created like so
   / ImapSearchParameter param = new ImapSearchParameter();
   / param.Criterion = ImapCriterion.Flagged;
   / param.Paramter = "";
   / criteria.Add(param);
   */

   // Perform the search. This will occur on the default box INBOX.
   imap1.CurrentMailbox.BeginSearch(criteria, null);
}

private void imap1_EndSearch(object sender, Dart.PowerTCP.SecureMail.ImapMessageEventArgs e)
{
   if(e.Exception == null)
   {
      // The following messages meet the criteria
      foreach(ImapMessage msg in e.Messages)
         Debug.WriteLine("Message: " + msg.Id);
   }			
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="T:Dart.PowerTCP.Mail.ImapMessageEventHandler">
            <summary>
				Represents the method (event handler) that will be raised when an asynchronous method involving message manipulation completes.
			</summary><remarks>
				<p>As Microsoft describes in their MSDN documentation, the event model in the .NET Framework is based on having an event delegate that connects an event with its handler. To raise an event, two elements are needed:</p>
				<ul>
					<li>A class that holds the event data. This class must derive from the base class EventArgs.</li>
					<li>A delegate that points to a method that provides the response to the event.</li>
				</ul>
				<p>When asynchronously getting messages, the class that holds the event data is the ImapMessageEventArgs class. A method must be created with the same signature as the delegate. If you are working within the Visual Studio.NET environment, this can be automatically done for you. See the Using Events In PowerTCP topic for more information. If you are not working within the Visual Studio.NET environment, you must do this yourself. In this example that would mean a method would have to be defined to accept two arguments (an object and an ImapMessageEventArgs) and return void. Once this has been done, the delegate must be "connected" to the handling event. This is done by adding an instance of the delegate to the event. 
				For more information about event handler delegates, see the Using Events In PowerTCP topic.</p>
			</remarks>
        </member>
        <member name="T:Dart.PowerTCP.Mail.ImapRenameMailboxCommand">
            <summary>
            Summary description for ImapRenameMailboxCommand.
            </summary>
        </member>
        <member name="T:Dart.PowerTCP.Mail.ImapResponseType">
            <summary>
			Contains the types of responses returned by an IMAP server.
			</summary><remarks>
				<p>The ImapResponseType enumeration indicates the type of response 
				received from the server. This value is exposed through the 
				ImapResponse.ResponseType property.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the LineReceived event to detect Status responses.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub DoSomething()
   ' Log in. The Imap.LineReceived event will be raised when data is received
   Imap1.Login(Server, User, Pass)

   ' Send a NOOP
   Imap1.Noop()

   ' Log out
   Imap1.Logout()
End Sub

Private Sub Imap1_LineReceived(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureMail.ImapResponseEventArgs) Handles Imap1.LineReceived
   Dim Response As ImapResponse
   ' Iterate through all responses.
   For Each Response In e.Responses
      ' Check if it is a status response. 
      If Response.ResponseType = ImapResponseType.Status Then 
         Debug.WriteLine("The server has returned a status response")
         Debug.WriteLine("Status: " + Response.Status)
         Debug.WriteLine("Explanation: " + Response.Explanation)
      End If
   Next
End Sub
<span class="lang">[C#]</span>
private void DoSomething()
{
   // Log in. The Imap.LineReceived event will be raised when data is received
   imap1.Login(Server, User, Pass);

   // Send a NOOP
   imap1.Noop();

   // Log out
   imap1.Logout();
}

private void imap1_LineReceived(object sender, Dart.PowerTCP.SecureMail.ImapResponseEventArgs e)
{
   // Iterate through all responses.
   foreach(ImapResponse response in e.Responses)
   {
      // Check if it is a status response.
      if(response.ResponseType == ImapResponseType.Status)
      {
         Debug.WriteLine("The server has returned a status response");
         Debug.WriteLine("Status: " + response.Status);
         Debug.WriteLine("Explanation: " + response.Explanation);
      }
   }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapResponseType.Continuation">
            <summary><b>0</b>   The server expects the client to send additional data.  This is not an error, but just a step in a data transfer process for certain commands.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapResponseType.Data">
            <summary><b>1</b>   The response includes data that is sent in response to a command that is being executed (ex. a response to a LIST command).</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapResponseType.Raw">
            <summary><b>2</b>   The server is returning raw information (ex. the contents of a message).</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapResponseType.Status">
            <summary><b>3</b>   The server is indicating the status of a currently executing command.  The ImapResponse.Status property indicates the value of that status.</summary>
        </member>
        <member name="T:Dart.PowerTCP.Mail.ImapStatus">
            <summary>Contains the values of status codes defined by IMAP.</summary><remarks>
				<p>The ImapStatus enumeration indicates the status of a response from the 
				IMAP server.  Not all responses provide status.  Typically, status 
				responses come at the completion of a command execution.  Whether 
				an ImapResponse object contains status information is indicated by the 
				ImapResponse.ResponseType property, in which case it will return ImapResponseType.Status.
				The status itself is exposed by the ImapResponse.Status property of the ImapResponse object.
				</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates sending a NOOP command and checking the response.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Login to the mail server
Imap1.Login(Server, User, Pass)

' Send a NOOP command
Dim Response As ImapResponse = Imap1.Noop()

' Check the response
If Response.Status = ImapStatus.Ok Then
   Debug.WriteLine("Good response from server")
Else
   Debug.WriteLine("Response from server: " + Response.Status)
End

' Logout
Imap1.Logout()
<span class="lang">[C#]</span>
// Login to the mail server
imap1.Login(server, user, pass);

// Send a NOOP command
ImapResponse response = imap1.Noop();

// Check the response
if(response.Status == ImapStatus.Ok)
   Debug.WriteLine("Good response from server");
else
   Debug.WriteLine("Response from server: " + response.Status);

// Logout
imap1.Logout();
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapStatus.None">
            <summary>
				<b>0</b>  No status information was returned.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapStatus.Ok">
            <summary>
				<b>1</b>  Success. Indicates a successful command completion.  Otherwise, this response is informative.  Success can vary in meaning depending on the command executed.  For example, a COPY operation (Mailbox.Copy) will return an OK response even when no messages could be copied.  Review the behavior of the operation in question for further details.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapStatus.No">
            <summary>
				<b>2</b>  Failure. Indicates a unsuccessful command completion.  Otherwise, this response is considered a warning.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapStatus.Bad">
            <summary>
				<b>3</b>  Error. Indicates that the command was not properly formed (ex. the command syntax was incorrect).  Otherwise, this response is considered a protocol-level error or server failure.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapStatus.PreAuth">
            <summary>
				<b>4</b>  Preauthorization.  Through some external mechanism, authentication has occurred without a login, and no login command is necessary.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapStatus.Bye">
            <summary>
				<b>5</b>  Shutdown.  Indicates the server is about to close the connection to the client.  This can occur during logout, inactivity, or as a server warning.
			</summary>
        </member>
        <member name="T:Dart.PowerTCP.Mail.ImapCode">
            <summary>
				Represents the response codes defined by IMAP.
			</summary><remarks>
				<p>Enumerated type used to represent the response code returned 
				by the IMAP server with a line of data. Response codes are optional and
				contain additional information beyond the status information. </p>
				<p>This enumeration is used by the ImapResponse.Code property of the
				ImapResponse object. For example, if the response from the server is</p>
				<pre class="code">
* OK [UIDVALIDITY 3857529045] UIDs valid
</pre>
				<p>then ImapResponse.Code will be ImapCode.UidValidity.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the LineReceived event to detect UIDVALIDITY codes.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub DoSomething()
   ' Log in. The Imap.LineReceived event will be raised when data is received
   Imap1.Login(Server, User, Pass)

   ' Send a NOOP
   Imap1.Noop()

   ' Log out
   Imap1.Logout()
End Sub

Private Sub Imap1_LineReceived(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureMail.ImapResponseEventArgs) Handles Imap1.LineReceived
   Dim Response As ImapResponse
   ' Iterate through all responses.
   For Each Response In e.Responses
	  ' Check if it contained a UIDVALIDITY response.
      If Response.Code = ImapCode.UidValidity Then
         Debug.WriteLine("UIDVALIDITY is " + Response.CodeValue);
      End IF
   Next
End Sub
<span class="lang">[C#]</span>
private void DoSomething()
{
   // Log in. The Imap.LineReceived event will be raised when data is received
   imap1.Login(Server, User, Pass);

   // Send a NOOP
   imap1.Noop();

   // Log out
   imap1.Logout();
}

private void imap1_LineReceived(object sender, Dart.PowerTCP.SecureMail.ImapResponseEventArgs e)
{
   // Iterate through all responses.
   foreach(ImapResponse response in e.Responses)
   {
      // Check if it contained a UIDVALIDITY response.
      if(response.Code == ImapCode.UidValidity)
         Debug.WriteLine("UIDVALIDITY is " + response.CodeValue);
   }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapCode.None">
            <summary><b> 0</b>   No response code was provided.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapCode.Alert">
            <summary><b> 1</b>   The response contains an alert which must be shown to the user.  This also causes the Imap.Alert event to be raised.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapCode.BadCharset">
            <summary><b> 2</b>   The response denotes a SEARCH operation failed due to an unsupported charset.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapCode.Capability">
            <summary><b> 3</b>   The response contains a list of IMAP server capabilities.  This type of response is also used to populate the Imap.Capabilities collection.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapCode.NewName">
            <summary><b> 4</b>   The response denotes an operation failed because the Mailbox was renamed.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapCode.Parse">
            <summary><b> 5</b>   The response denotes an error occurred during the parsing of message headers.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapCode.PermanentFlags">
            <summary><b> 6</b>   The response contains a list of all flags that can be changed permanently within the mailbox and its messages.  Any flags not on this list should not be set.  A value of “\*” means new, non-standard flags can be created.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapCode.ReadOnly">
            <summary><b> 7</b>   The response denotes the selected mailbox is read-only.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapCode.ReadWrite">
            <summary><b> 8</b>   The response denotes the selected mailbox is read-write.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapCode.TryCreate">
            <summary><b> 9</b>   The response denotes an executing command failed because the target mailbox does not exist.  This response code is returned as a hint to the client that the target mailbox should perhaps be created prior to issuing the command that failed.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapCode.UidNext">
            <summary><b>10</b>   The response includes the UIDNEXT value for the selected mailbox, indicating what the UID of the next created message will be.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapCode.UidValidity">
            <summary><b>11</b>   The response includes the UIDVALIDITY value for the selected mailbox.  This value can be used in combination with message UIDs to identify messages uniquely between sessions.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapCode.Unseen">
            <summary><b>12</b>   The response code of the response includes the number (position id) of the first unseen message in the selected mailbox.</summary>
        </member>
        <member name="T:Dart.PowerTCP.Mail.ImapMessageSections">
            <summary>
				Represents the sections of an IMAP message when partial messages are retrieved.
			</summary><remarks>
				<p>The ImapMessageSections enumeration represents the sections of an IMAP message.  
				IMAP allows partial message retrieval, and this enumeration (whose values are additive) 
				is used to indicate what sections of the message should be retrieved.  
				One or more values from this enumeration can be passed to 
				the Get method of either the ImapMessage and Mailbox objects.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates retrieving partial messages.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Login to the server
Imap1.Login(Server, User, Pass)

' Get the current mailbox in a short variable name so we don't have to type as much
Dim Box As Mailbox = Imap1.CurrentMailbox

Dim First As ImapMessage = Box.Messages(0)
Dim Last As ImapMessage = Box.Messages(box.Messages.Count - 1)

' Get all message headers and messages sizes
Box.Get(First, Last, ImapMessageSections.Header | ImapMessageSections.Size)

' Display Results.
Dim Msg as ImapMessage
For Each Msg in Box.Messages
   Debug.WriteLine("Size: " + Msg.Size)
   Debug.WriteLine("Subject: " + Msg.Message.Subject)
Next

' Logout
Imap1.Logout()
<span class="lang">[C#]</span>
// Login to the server
imap1.Login(Server, User, Pass);

// Get the current mailbox in a short variable name so we don't have to type as much
Mailbox box = imap1.CurrentMailbox;

ImapMessage first = box.Messages[0];
ImapMessage last = box.Messages[box.Messages.Count - 1];

// Get all message headers and messages sizes
box.Get(first, last, ImapMessageSections.Header | ImapMessageSections.Size);

// Display Results.
foreach(ImapMessage msg in box.Messages)
{
   Debug.WriteLine("Size: " + msg.Size);
   Debug.WriteLine("Subject: " + msg.Message.Subject);
}

// Logout
imap1.Logout();
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapMessageSections.Body">
            <summary><b>  1  </b>Retrieve the entire message.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapMessageSections.BodyStructure">
            <summary><b>  2  </b>Retrieve the parsed structure of the body of the message. This is used in the ImapMessage.GetOutline method to retrieve the outline of the message without its content.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapMessageSections.Envelope">
            <summary><b>  4  </b>Retrieve the message header, formatted in an IMAP specific fashion.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapMessageSections.Flags">
            <summary><b>  8  </b>Retrieve the message flags (ex. Answered, Delete, etc.).</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapMessageSections.Date">
            <summary><b> 16  </b>Retrieve the internal date of the message, indicating when it was received by the server.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapMessageSections.Header">
            <summary><b> 32  </b>Retrieve the headers for the message.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapMessageSections.Size">
            <summary><b> 64  </b>Retrieve the length of the encoded message, in bytes.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapMessageSections.Text">
            <summary><b>128  </b>Retrieve the text of the message, if applicable.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapMessageSections.Uid">
            <summary><b>256  </b>Retrieve the unique ID (UID) of the message.</summary>
        </member>
        <member name="T:Dart.PowerTCP.Mail.ImapFlagModifier">
            <summary>Represents the method used when modifying flags.</summary><remarks>
				<p>The ImapFlagModifier enumeration represents the method used when modifying 
				flags on the server.  This type is used when calling the Mailbox.Set 
				command to update one or more flags on messages, and it is used in 
				combination with the ImapFlags enumeration.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the Set method to change message flags.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Login to the server
Imap1.Login(Server, User, Pass)

' Get the current mailbox in a short variable name so we don't have to type as much
Dim Box As Mailbox = Imap1.CurrentMailbox

Dim First As ImapMessage = Box.Messages(0)
Dim Last As ImapMessage = Box.Messages(box.Messages.Count - 1)

' Add Flagged and Answered flags to messages 
Box.Set(First, Last, ImapFlagModifier.Add, ImapFlags.Flagged | ImapFlags.Answered)

' Refresh the mailbox.
Box.Refresh()

' Logout
Imap1.Logout()
<span class="lang">[C#]</span>
// Login
imap1.Login(Server, User, Pass);

// Get the current mailbox in a short variable name so we don't have to type as much
Mailbox box = imap1.CurrentMailbox;
ImapMessage first = box.Messages[0];
ImapMessage last = box.Messages[box.Messages.Count - 1];

// Add Flagged and Answered flags to messages 
box.Set(first, last, ImapFlagModifier.Add, ImapFlags.Flagged | ImapFlags.Answered);

// Refresh the mailbox.
box.Refresh();

// Logout
imap1.Logout();
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapFlagModifier.Add">
            <summary><b>1  </b>Adds the specified flags to the message.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapFlagModifier.Remove">
            <summary><b>2  </b>Removes the specified flags from the message.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapFlagModifier.Replace">
            <summary><b>3  </b>Replace the specified flags on the message.</summary>
        </member>
        <member name="T:Dart.PowerTCP.Mail.ImapFlags">
            <summary>Represents the flags defined by IMAP.</summary><remarks>
				<p>The ImapFlags enumeration represents the flags defined by IMAP.  
				These flags can be used with the Mailbox.Set command to update message 
				flags on the server.  These same server flags can be manipulated using 
				the properties of the ImapMessage object (ex. Mailbox.Set command 
				specifying an add of ImapFlags.Delete is equivalent to setting the 
				ImapMessage.Delete property = true), 
				although the use of Mailbox.Set command is more efficient for message groups.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the Set method to change message flags.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Login to the server
Imap1.Login(Server, User, Pass)

' Get the current mailbox in a short variable name so we don't have to type as much
Dim Box As Mailbox = Imap1.CurrentMailbox

Dim First As ImapMessage = Box.Messages(0)
Dim Last As ImapMessage = Box.Messages(box.Messages.Count - 1)

' Add Flagged and Answered flags to messages 
Box.Set(First, Last, ImapFlagModifier.Add, ImapFlags.Flagged | ImapFlags.Answered)

' Refresh the mailbox.
Box.Refresh()

' Logout
Imap1.Logout()
<span class="lang">[C#]</span>
// Login
imap1.Login(Server, User, Pass);

// Get the current mailbox in a short variable name so we don't have to type as much
Mailbox box = imap1.CurrentMailbox;
ImapMessage first = box.Messages[0];
ImapMessage last = box.Messages[box.Messages.Count - 1];

// Add Flagged and Answered flags to messages 
box.Set(first, last, ImapFlagModifier.Add, ImapFlags.Flagged | ImapFlags.Answered);

// Refresh the mailbox.
box.Refresh();

// Logout
imap1.Logout();
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapFlags.None">
            <summary><b> 0  </b> No flags. This is used when a Set is being performed with ImapFlagModifier.Replace to clear all flags from a message.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapFlags.Answered">
            <summary><b> 1  </b> Indicates that a message has been replied to.  This flag is managed entirely by the IMAP client.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapFlags.Deleted">
            <summary><b> 2  </b> Indicates that a message should be deleted when the next EXPUNGE operation occurs.  This flag is managed entirely by the IMAP client, but it is used by the IMAP server during an EXPUNGE operation.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapFlags.Draft">
            <summary><b> 4  </b> Indicates that the composition of a message has not been finished.  This flag is managed entirely by the IMAP client.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapFlags.Flagged">
            <summary><b> 8  </b> Indicates that a message has been marked for special attention.  This flag is managed entirely by the IMAP client.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapFlags.Recent">
            <summary><b>16  </b> Indicates that a message has arrived at the server since the last update.  This flag is managed entirely by the IMAP server.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapFlags.Seen">
            <summary><b>32  </b> Indicates that a message has been read.  This flag is managed both by the IMAP client and the IMAP server.  Clients can update the flag, but the server does as well based on FETCH operations that occur.</summary>
        </member>
        <member name="T:Dart.PowerTCP.Mail.ImapResponse">
            <summary>Represents a single line response from an IMAP server.</summary><remarks>
				<P>The ImapResponse class represents a single line response from an IMAP
				server. A response from an IMAP server may be received as a reply to a
				command, or may be received unprovoked.
				Individual fields of the response are parsed into properties of the 
				ImapResponse class. Whenever a response is received from the server, the data is 
				parsed into an ImapResponse object and the Imap.LineReceived event is 
				raised to allow the user access to the information. This built-in
				response parsing makes Imap.LineReceived superior to Imap.Trace when the user is interested in the contents 
				of the response.</P>
				<p>For example, if the following line was received from the IMAP server,</p>
				<pre class="code">
* OK [UIDVALIDITY 1032904889] UIDs valid
</pre>
				<p>the properties of this object would be as follows:</p>
				<div class="tablediv">
					<table cellspacing="0" class="dtTABLE">
						<tr valign="top">
							<th width="50%">Property</th>
							<th width="50%">Value</th>
						</tr>
						<tr valign="top">
							<td width="50%"> ImapResponse.Code </td>
							<td width="50%"> ImapCode.UidValidity </td>
						</tr>
						<tr valign="top">
							<td width="50%"> ImapResponse.CodeValue </td>
							<td width="50%"> "1032904889" </td>
						</tr>
						<tr valign="top">
							<td width="50%"> ImapResponse.Explanation </td>
							<td width="50%"> "UIDs valid" </td>
						</tr>
						<tr valign="top">
							<td width="50%"> ImapResponse.Operation </td>
							<td width="50%"> "" </td>
						</tr>
						<tr valign="top">
							<td width="50%"> ImapResponse.Status </td>
							<td width="50%"> ImapStatus.Ok </td>
						</tr>
						<tr valign="top">
							<td width="50%"> ImapResponse.Tag </td>
							<td width="50%"> "*" </td>
						</tr>
						<tr valign="top">
							<td width="50%"> ImapResponse.Value </td>
							<td width="50%"> "" </td>
						</tr>
					</table>
				</div>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the LineReceived event to detect Status responses.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub DoSomething()
   ' Log in. The Imap.LineReceived event will be raised when data is received
   Imap1.Login(Server, User, Pass)

   ' Send a NOOP
   Imap1.Noop()

   ' Log out
   Imap1.Logout()
End Sub

Private Sub Imap1_LineReceived(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureMail.ImapResponseEventArgs) Handles Imap1.LineReceived
   Dim Response As ImapResponse
   ' Iterate through all responses.
   For Each Response In e.Responses
      ' Check if it is a status response. 
      If Response.ResponseType = ImapResponseType.Status Then 
         Debug.WriteLine("The server has returned a status response")
         Debug.WriteLine("Status: " + Response.Status)
         Debug.WriteLine("Explanation: " + Response.Explanation)
      End If
   Next
End Sub
<span class="lang">[C#]</span>
private void DoSomething()
{
   // Log in. The Imap.LineReceived event will be raised when data is received
   imap1.Login(Server, User, Pass);

   // Send a NOOP
   imap1.Noop();

   // Log out
   imap1.Logout();
}

private void imap1_LineReceived(object sender, Dart.PowerTCP.SecureMail.ImapResponseEventArgs e)
{
   // Iterate through all responses.
   foreach(ImapResponse response in e.Responses)
   {
      // Check if it is a status response.
      if(response.ResponseType == ImapResponseType.Status)
      {
         Debug.WriteLine("The server has returned a status response");
         Debug.WriteLine("Status: " + response.Status);
         Debug.WriteLine("Explanation: " + response.Explanation);
      }
   }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.ImapResponse.ToString">
            <summary>Returns the entire response line.</summary><remarks>
				<p>This method returns the entire response line as it was received
				from the server.</p>
			</remarks><returns>A string representation of the entire response line.</returns>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the LineReceived event to detect values of RECENT and EXISTS responses.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub ExamineTest()
   ' Login to the server.
   Imap1.Login(Server, User, Pass)

   ' Examine a mailbox.
   Dim Response As ImapResponse = Imap1.Examine("TestBox")

   ' Display the entire response from the server.
   Debug.WriteLine("Entire response from server: " + Response.ToString())
End Sub

Private Sub Imap1_LineReceived(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureMail.ImapResponseEventArgs) Handles Imap1.LineReceived
   Dim Response As ImapResponse
   For Each Response in e.Responses
      If Response.Operation = "EXISTS" Then
         Debug.WriteLine("Value of EXISTS: " + Response.Value)
      End If
      If Response.Operation = "RECENT" Then
         Debug.WriteLine("Value of RECENT: " + Response.Value)
      End If
   Next
End Sub
<span class="lang">[C#]</span>
private void ExamineTest()
{
   // Login to the server.
   imap1.Login(Server, User, Pass);

   // Examine a mailbox.
   ImapResponse response = imap1.Examine("TestBox");

   // Display the entire response from the server.
   Debug.WriteLine("Entire response from server: " + response.ToString());
}

private void imap1_LineReceived(object sender, Dart.PowerTCP.SecureMail.ImapResponseEventArgs e)
{
   foreach(ImapResponse response in e.Responses)
   {
      if(response.Operation == "EXISTS")
         Debug.WriteLine("Value of EXISTS: " + response.Value);
      if(response.Operation == "RECENT")
         Debug.WriteLine("Value of RECENT: " + response.Value);
   }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.ImapResponse.Status">
            <summary>Gets the status of the response.</summary><remarks>
				<p>The ImapResponse.Status property contains an ImapStatus value 
				indicating the status of a response from the 
				IMAP server.  Not all responses provide status.  Typically, status 
				responses come at the completion of a command execution.  Whether 
				an ImapResponse object contains status information is indicated by the 
				ImapResponse.ResponseType property, in which case it will return ImapResponseType.Status.
				</p>
				<p>
				For example, if the following line was received from the IMAP server,</p>
				<pre class="code">
A2 OK CAPABILITY completed
</pre>
				<p>the ImapResponse.Status property would contain ImapStatus.Ok.
				This information is not included with all responses from the server.
				</p>
			</remarks><value>
				If status was included with the response, this property will return an ImapStatus
				value describing the status. If no status was included with the response, this property
				will return ImapStatus.None.
			</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates sending a NOOP command and checking the response.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Login to the mail server
Imap1.Login(Server, User, Pass)

' Send a NOOP command
Dim Response As ImapResponse = Imap1.Noop()

' Check the response
If Response.Status = ImapStatus.Ok Then
   Debug.WriteLine("Good response from server")
Else
   Debug.WriteLine("Response from server: " + Response.Status)
End

' Logout
Imap1.Logout()
<span class="lang">[C#]</span>
// Login to the mail server
imap1.Login(server, user, pass);

// Send a NOOP command
ImapResponse response = imap1.Noop();

// Check the response
if(response.Status == ImapStatus.Ok)
   Debug.WriteLine("Good response from server");
else
   Debug.WriteLine("Response from server: " + response.Status);

// Logout
imap1.Logout();
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.ImapResponse.ResponseType">
            <summary>Gets the type of the response.</summary><remarks>
				<p>This property returns the type of the response sent by the server (ImapResponseType.Status, 
				ImapResponseType.Continuation, ImapResponseType.Data, or ImapResponseType.Raw).
				All responses fall into one of these four types. For example, if the server
				was transferring a message, this property would be ImapResponseType.Raw.</p>
			</remarks><value>
				An ImapResponseType representing the type of response.
			</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the LineReceived event to detect Status responses.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub DoSomething()
   ' Log in. The Imap.LineReceived event will be raised when data is received
   Imap1.Login(Server, User, Pass)

   ' Send a NOOP
   Imap1.Noop()

   ' Log out
   Imap1.Logout()
End Sub

Private Sub Imap1_LineReceived(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureMail.ImapResponseEventArgs) Handles Imap1.LineReceived
   Dim Response As ImapResponse
   ' Iterate through all responses.
   For Each Response In e.Responses
      ' Check if it is a status response. 
      If Response.ResponseType = ImapResponseType.Status Then 
         Debug.WriteLine("The server has returned a status response")
         Debug.WriteLine("Status: " + Response.Status)
         Debug.WriteLine("Explanation: " + Response.Explanation)
      End If
   Next
End Sub
<span class="lang">[C#]</span>
private void DoSomething()
{
   // Log in. The Imap.LineReceived event will be raised when data is received
   imap1.Login(Server, User, Pass);

   // Send a NOOP
   imap1.Noop();

   // Log out
   imap1.Logout();
}

private void imap1_LineReceived(object sender, Dart.PowerTCP.SecureMail.ImapResponseEventArgs e)
{
   // Iterate through all responses.
   foreach(ImapResponse response in e.Responses)
   {
      // Check if it is a status response.
      if(response.ResponseType == ImapResponseType.Status)
      {
         Debug.WriteLine("The server has returned a status response");
         Debug.WriteLine("Status: " + response.Status);
         Debug.WriteLine("Explanation: " + response.Explanation);
      }
   }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.ImapResponse.Code">
            <summary>Gets the response code.</summary><remarks>
				<p>This property returns the response code of the line. Codes are optional and contain 
				additional information for the client beyond the status level and are
				provided so the user can take additional action upon the information
				contained in the code.
				For example, if the following line was received from the IMAP server,</p>
				<pre class="code">
* OK [UIDVALIDITY 1032904889] UIDs valid
</pre>
				<p>the ImapResponse.Code property would contain ImapCode.UidValidity.
				This information is not included with all responses from the server.</p>
				<p>See the ImapCode enumeration for possible code values.</p>
			</remarks><value>
				If a code was included with the response, this property will contain an
				ImapCode value describing the code received. If no code was included with the
				response, this property will contain ImapCode.None.
			</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the LineReceived event to detect UIDVALIDITY codes.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub DoSomething()
   ' Log in. The Imap.LineReceived event will be raised when data is received
   Imap1.Login(Server, User, Pass)

   ' Send a NOOP
   Imap1.Noop()

   ' Log out
   Imap1.Logout()
End Sub

Private Sub Imap1_LineReceived(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureMail.ImapResponseEventArgs) Handles Imap1.LineReceived
   Dim Response As ImapResponse
   ' Iterate through all responses.
   For Each Response In e.Responses
	  ' Check if it contained a UIDVALIDITY response.
      If Response.Code = ImapCode.UidValidity Then
         Debug.WriteLine("UIDVALIDITY is " + Response.CodeValue);
      End IF
   Next
End Sub
<span class="lang">[C#]</span>
private void DoSomething()
{
   // Log in. The Imap.LineReceived event will be raised when data is received
   imap1.Login(Server, User, Pass);

   // Send a NOOP
   imap1.Noop();

   // Log out
   imap1.Logout();
}

private void imap1_LineReceived(object sender, Dart.PowerTCP.SecureMail.ImapResponseEventArgs e)
{
   // Iterate through all responses.
   foreach(ImapResponse response in e.Responses)
   {
      // Check if it contained a UIDVALIDITY response.
      if(response.Code == ImapCode.UidValidity)
         Debug.WriteLine("UIDVALIDITY is " + response.CodeValue);
   }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.ImapResponse.Explanation">
            <summary>Gets any explanation text returned by the server.</summary><remarks>
				<p>This property returns any text sent by the server as additional
				explanatory information. 
				For example, if the following line was received from the IMAP server,</p>
				<pre class="code">
* OK [UIDVALIDITY 1032904889] UIDs valid
</pre>
				<p>the ImapResponse.Explanation property would contain "UIDs valid".
				This information is not included with all responses from the server.
				</p>
			</remarks><value>If an explanation was included with the response, this property will contain the 
			string representation of that explanation. If no explanation was included with the
			response, this property will contain an empty string.</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the LineReceived event to detect Status responses.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub DoSomething()
   ' Log in. The Imap.LineReceived event will be raised when data is received
   Imap1.Login(Server, User, Pass)

   ' Send a NOOP
   Imap1.Noop()

   ' Log out
   Imap1.Logout()
End Sub

Private Sub Imap1_LineReceived(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureMail.ImapResponseEventArgs) Handles Imap1.LineReceived
   Dim Response As ImapResponse
   ' Iterate through all responses.
   For Each Response In e.Responses
      ' Check if it is a status response. 
      If Response.ResponseType = ImapResponseType.Status Then 
         Debug.WriteLine("The server has returned a status response")
         Debug.WriteLine("Status: " + Response.Status)
         Debug.WriteLine("Explanation: " + Response.Explanation)
      End If
   Next
End Sub
<span class="lang">[C#]</span>
private void DoSomething()
{
   // Log in. The Imap.LineReceived event will be raised when data is received
   imap1.Login(Server, User, Pass);

   // Send a NOOP
   imap1.Noop();

   // Log out
   imap1.Logout();
}

private void imap1_LineReceived(object sender, Dart.PowerTCP.SecureMail.ImapResponseEventArgs e)
{
   // Iterate through all responses.
   foreach(ImapResponse response in e.Responses)
   {
      // Check if it is a status response.
      if(response.ResponseType == ImapResponseType.Status)
      {
         Debug.WriteLine("The server has returned a status response");
         Debug.WriteLine("Status: " + response.Status);
         Debug.WriteLine("Explanation: " + response.Explanation);
      }
   }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.ImapResponse.Tag">
            <summary>Gets the unique identifier for the command.</summary><remarks>
				<p>This property returns the unique identifier found on tagged responses 
				to commands. This unique identifier is actually generated by the Imap component
				when sending a command. The IMAP server will return this identifier with the
				response associated with the original client command.</p>
				<p>
				For example, if the following line was received from the IMAP server,</p>
				<pre class="code">
A2 OK CAPABILITY completed
</pre>
				<p>the ImapResponse.Tag property would contain "A2", which was also the tag used
				when the client sent the original "CAPABILITY" command.
				</p>
			</remarks><value>
				A string representation of the tag used to identify the response.
			</value>
        </member>
        <member name="P:Dart.PowerTCP.Mail.ImapResponse.Value">
            <summary>Gets the text returned by the server as the first value/token of the response.</summary><remarks>
				<p>This property returns the text returned by the server as the first value/token related to this 
			response. For example, if the following line was received from the IMAP server,</p>
				<pre class="code">
* 99 EXISTS
</pre>
				<p>the ImapResponse.Value property would contain "99".
				This information is not included with all responses from the server.
				</p>
			</remarks><value>
			The text indicating the value if returned; otherwise an empty string.
			</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the LineReceived event to detect values of RECENT and EXISTS responses.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub ExamineTest()
   ' Login to the server.
   Imap1.Login(Server, User, Pass)

   ' Examine a mailbox.
   Dim Response As ImapResponse = Imap1.Examine("TestBox")

   ' Display the entire response from the server.
   Debug.WriteLine("Entire response from server: " + Response.ToString())
End Sub

Private Sub Imap1_LineReceived(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureMail.ImapResponseEventArgs) Handles Imap1.LineReceived
   Dim Response As ImapResponse
   For Each Response in e.Responses
      If Response.Operation = "EXISTS" Then
         Debug.WriteLine("Value of EXISTS: " + Response.Value)
      End If
      If Response.Operation = "RECENT" Then
         Debug.WriteLine("Value of RECENT: " + Response.Value)
      End If
   Next
End Sub
<span class="lang">[C#]</span>
private void ExamineTest()
{
   // Login to the server.
   imap1.Login(Server, User, Pass);

   // Examine a mailbox.
   ImapResponse response = imap1.Examine("TestBox");

   // Display the entire response from the server.
   Debug.WriteLine("Entire response from server: " + response.ToString());
}

private void imap1_LineReceived(object sender, Dart.PowerTCP.SecureMail.ImapResponseEventArgs e)
{
   foreach(ImapResponse response in e.Responses)
   {
      if(response.Operation == "EXISTS")
         Debug.WriteLine("Value of EXISTS: " + response.Value);
      if(response.Operation == "RECENT")
         Debug.WriteLine("Value of RECENT: " + response.Value);
   }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.ImapResponse.CodeValue">
            <summary>Gets any additional text returned with the response code.</summary><remarks>
				<p>This property returns any additional text returned with the response
				code. This additional text is optional even if a response code is received.
				Typically, this additional text will contain the "value" for the code
				specified in the response code.</p>
				<p>For example, if the following line was received from the IMAP server,</p>
				<pre class="code">
* OK [UIDVALIDITY 1032904889] UIDs valid
</pre>
				<p>the ImapResponse.CodeValue property would contain "1032904889".
				This information is not included with all responses from the server.
				</p>
			</remarks><value>
				If a code value was included with the response, this property will contain the
				string representation of that code value. If no code value was included with the
				response, this property will contain an empty string.
			</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the LineReceived event to detect UIDVALIDITY codes.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub DoSomething()
   ' Log in. The Imap.LineReceived event will be raised when data is received
   Imap1.Login(Server, User, Pass)

   ' Send a NOOP
   Imap1.Noop()

   ' Log out
   Imap1.Logout()
End Sub

Private Sub Imap1_LineReceived(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureMail.ImapResponseEventArgs) Handles Imap1.LineReceived
   Dim Response As ImapResponse
   ' Iterate through all responses.
   For Each Response In e.Responses
	  ' Check if it contained a UIDVALIDITY response.
      If Response.Code = ImapCode.UidValidity Then
         Debug.WriteLine("UIDVALIDITY is " + Response.CodeValue);
      End IF
   Next
End Sub
<span class="lang">[C#]</span>
private void DoSomething()
{
   // Log in. The Imap.LineReceived event will be raised when data is received
   imap1.Login(Server, User, Pass);

   // Send a NOOP
   imap1.Noop();

   // Log out
   imap1.Logout();
}

private void imap1_LineReceived(object sender, Dart.PowerTCP.SecureMail.ImapResponseEventArgs e)
{
   // Iterate through all responses.
   foreach(ImapResponse response in e.Responses)
   {
      // Check if it contained a UIDVALIDITY response.
      if(response.Code == ImapCode.UidValidity)
         Debug.WriteLine("UIDVALIDITY is " + response.CodeValue);
   }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.ImapResponse.Operation">
            <summary>Gets any text returned by the server indicating the action of the response.</summary><remarks>
				<p>This property returns any text returned by the server indicating the action 
			associated with this response. For example, if the following line was received from the IMAP server,</p>
				<pre class="code">
* CAPABILITY IMAP4 IMAP4rev1 AUTH=CRAM-MD5 AUTH=PLAIN AUTH=LOGIN
</pre>
				<p>the ImapResponse.Operation property would contain "CAPABILITY".
				This information is not included with all responses from the server.
				</p>
			</remarks><value>The text indicating the action if returned; otherwise an empty string.</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the LineReceived event to detect values of RECENT and EXISTS responses.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub ExamineTest()
   ' Login to the server.
   Imap1.Login(Server, User, Pass)

   ' Examine a mailbox.
   Dim Response As ImapResponse = Imap1.Examine("TestBox")

   ' Display the entire response from the server.
   Debug.WriteLine("Entire response from server: " + Response.ToString())
End Sub

Private Sub Imap1_LineReceived(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureMail.ImapResponseEventArgs) Handles Imap1.LineReceived
   Dim Response As ImapResponse
   For Each Response in e.Responses
      If Response.Operation = "EXISTS" Then
         Debug.WriteLine("Value of EXISTS: " + Response.Value)
      End If
      If Response.Operation = "RECENT" Then
         Debug.WriteLine("Value of RECENT: " + Response.Value)
      End If
   Next
End Sub
<span class="lang">[C#]</span>
private void ExamineTest()
{
   // Login to the server.
   imap1.Login(Server, User, Pass);

   // Examine a mailbox.
   ImapResponse response = imap1.Examine("TestBox");

   // Display the entire response from the server.
   Debug.WriteLine("Entire response from server: " + response.ToString());
}

private void imap1_LineReceived(object sender, Dart.PowerTCP.SecureMail.ImapResponseEventArgs e)
{
   foreach(ImapResponse response in e.Responses)
   {
      if(response.Operation == "EXISTS")
         Debug.WriteLine("Value of EXISTS: " + response.Value);
      if(response.Operation == "RECENT")
         Debug.WriteLine("Value of RECENT: " + response.Value);
   }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="T:Dart.PowerTCP.Mail.ImapSearchCommand">
            <summary>
            Summary description for ImapSearchCommand.
            </summary>
        </member>
        <member name="T:Dart.PowerTCP.Mail.ImapCriterion">
            <summary>Details the search criterion which modifies the IMAP SEARCH command.</summary><remarks>
				<p>The ImapCriterion enumeration specifies
			types of search restrictions when using the Mailbox.Search method. 
			Use this enumeration with the ImapSearchParameter class,
			to create custom searches of messages on the IMAP server.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the Mailbox.Search method. This example constructs the
				search "SEARCH FLAGGED SINCE 1-Feb-1994 NOT FROM 'Smith'"</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Login
Imap1.Login(Server, User, Pass)

' Construct the seach "SEARCH FLAGGED SINCE 1-Feb-1994 NOT FROM 'Smith'"
Dim Criteria As New ArrayList()
Criteria.Add(New ImapSearchParameter(ImapCriterion.Flagged, ""))
Criteria.Add(New ImapSearchParameter(ImapCriterion.Since, "1-Feb-1994"))
Criteria.Add(New ImapSearchParameter(ImapCriterion.Not, ""))
Criteria.Add(New ImapSearchParameter(ImapCriterion.From, "Smith"))

' Alternatively, ImapSearchParameter objects can be created like so
' Dim Param As New ImapSearchParameter()
' Param.Criterion = ImapCriterion.Flagged
' Param.Paramter = ""
' Criteria.Add(Param)

' Perform the search. This will occur on the default box INBOX.
Dim Messages() As ImapMessage = Imap1.CurrentMailbox.Search(Criteria)

' Display
Debug.WriteLine("The following message IDs meet the specified criteria")
Dim Message as ImapMessage
For Each Message in Messages
   Debug.WriteLine(Message.Id)
<span class="lang">[C#]</span>
// Login
imap1.Login(Server, User, Pass);

// Construct the seach "SEARCH FLAGGED SINCE 1-Feb-1994 NOT FROM 'Smith'"
ArrayList criteria = new ArrayList();
criteria.Add(new ImapSearchParameter(ImapCriterion.Flagged, ""));
criteria.Add(new ImapSearchParameter(ImapCriterion.Since, "1-Feb-1994"));
criteria.Add(new ImapSearchParameter(ImapCriterion.Not, ""));
criteria.Add(new ImapSearchParameter(ImapCriterion.From, "Smith"));

/*
/ Alternatively, ImapSearchParameter objects can be created like so
/ ImapSearchParameter param = new ImapSearchParameter();
/ param.Criterion = ImapCriterion.Flagged;
/ param.Paramter = "";
/ criteria.Add(param);
*/

// Perform the search. This will occur on the default box INBOX.
ImapMessage[] messages = imap1.CurrentMailbox.Search(criteria);

// Display
Debug.WriteLine("The following message IDs meet the specified criteria");
foreach(ImapMessage message in messages)
   Debug.WriteLine(message.Id);
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapCriterion.All">
            <summary>Search for all messages (no restrictions).  No search parameter is required.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapCriterion.Answered">
            <summary>Search for all answered messages (messages that have the Answered flag set).  No search parameter is required.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapCriterion.Bcc">
            <summary>Search for messages that contain the specified string in the BCC field of the message envelope.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapCriterion.Before">
            <summary>Search for messages with internal date that occurs before the specified date.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapCriterion.Body">
            <summary>Search for messages that contain the specified string in the message body.  </summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapCriterion.Cc">
            <summary>Search for messages that contain the specified string in the CC field of the message envelope.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapCriterion.Deleted">
            <summary>Search for deleted messages (messages that have the Deleted flag set).  No search parameter is required.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapCriterion.Draft">
            <summary>Search for draft messages (messages that have the Draft flag set).  No search parameter is required.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapCriterion.Flagged">
            <summary>Search for flagged messages (messages that have the Flagged flag set).  No search parameter is required.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapCriterion.From">
            <summary>Search for messages that contain the specified string in the FROM field of the message envelope.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapCriterion.Header">
            <summary>Search for messages that contain the specified string in the message header.  Note that the format requires that the header field be specified, so the parameter value for this search criterion should be "&lt;header&gt; &lt;value&gt;".</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapCriterion.Keyword">
            <summary>Search for messages that have the specified keyword flag set.  This allows for searches based on custom flag types.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapCriterion.Larger">
            <summary>Search for messages larger than the specified byte count.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapCriterion.New">
            <summary>Search for all recent and unseen messages (messages with the Recent flag set but not the Seen flag).  No search parameter is required.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapCriterion.Not">
            <summary>Perform a logical inversion (NOT operation) on another search criterion.  No search parameter is required if this is part of a collection of ImapSearchParameters and another search criterion follows this one; otherwise, a search parameter is required.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapCriterion.NotAnswered">
            <summary>Search for messages that do not have the Answered flag set.  No search parameter is required.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapCriterion.NotDeleted">
            <summary>Search for messages that do not have the Deleted flag set.  No search parameter is required.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapCriterion.NotDraft">
            <summary>Search for messages that do not have the Draft flag set.  No search parameter is required.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapCriterion.NotFlagged">
            <summary>Search for messages that do not have the Flagged flag set.  No search parameter is required.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapCriterion.NotKeyword">
            <summary>Search for messages that do not have the specified keyword flag set.  This allows for searches based on custom flag types.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapCriterion.NotSeen">
            <summary>Search for messages that do not have the Seen flag set.  No search parameter is required.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapCriterion.Old">
            <summary>Search for messages that do not have the Recent flag set.  No search parameter is required.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapCriterion.On">
            <summary>Search for messages that have an internal date that exactly matches the value specified (disregarding time).</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapCriterion.Or">
            <summary>Perform a logical OR operation on the two search criterion that follow this one.  This search parameter must be followed by two other search parameters; these will represent the conditions to be ORed.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapCriterion.Recent">
            <summary>Search for recent messages (messages that have the Recent flag set).  No search parameter is required.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapCriterion.Seen">
            <summary>Search for seen messages (messages that have the Seen flag set).  No search parameter is required.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapCriterion.SentBefore">
            <summary>Search for messages sent before the specified date.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapCriterion.SentOn">
            <summary>Search for messages sent on the specified date.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapCriterion.SentSince">
            <summary>Search for messages sent after the specified date.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapCriterion.Since">
            <summary>Search for messages with internal date that occurs after the specified date.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapCriterion.Smaller">
            <summary>Search for messages smaller than the specified byte count.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapCriterion.Subject">
            <summary>Search for messages that contain the specified string in the message subject.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapCriterion.Text">
            <summary>Search for messages that contain the specified string in either the header or body of the message.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapCriterion.To">
            <summary>Search for messages that contain the specified string in the TO field of the message.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ImapCriterion.Uid">
            <summary>Search for messages that match the UID or range of UIDs specified.  Ranges of UIDs can be specified using the format "&lt;start&gt;:&lt;end&gt;".</summary>
        </member>
        <member name="T:Dart.PowerTCP.Mail.ImapSearchParameter">
            <summary>Represents a search parameter used with the MailBox.Search method.</summary><remarks>
				<p>The Mailbox.Search method sends the "SEARCH" command to the server along
				with all of the search restrictions specified ImapSearchParameter.
				Proper use involves creating an object which implements ICollection, adding 
				several ImapSearchParameters to this object, and passing this object into
				the Mailbox.Search method. Multiple values are combined with a logical AND.  Other 
				logical combinations can be represented using the ImapCriterion values 
				ImapCriterion.Not and ImapCriterion.Or.
				</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the Mailbox.Search method. This example constructs the
				search "SEARCH FLAGGED SINCE 1-Feb-1994 NOT FROM 'Smith'"</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Login
Imap1.Login(Server, User, Pass)

' Construct the seach "SEARCH FLAGGED SINCE 1-Feb-1994 NOT FROM 'Smith'"
Dim Criteria As New ArrayList()
Criteria.Add(New ImapSearchParameter(ImapCriterion.Flagged, ""))
Criteria.Add(New ImapSearchParameter(ImapCriterion.Since, "1-Feb-1994"))
Criteria.Add(New ImapSearchParameter(ImapCriterion.Not, ""))
Criteria.Add(New ImapSearchParameter(ImapCriterion.From, "Smith"))

' Alternatively, ImapSearchParameter objects can be created like so
' Dim Param As New ImapSearchParameter()
' Param.Criterion = ImapCriterion.Flagged
' Param.Paramter = ""
' Criteria.Add(Param)

' Perform the search. This will occur on the default box INBOX.
Dim Messages() As ImapMessage = Imap1.CurrentMailbox.Search(Criteria)

' Display
Debug.WriteLine("The following message IDs meet the specified criteria")
Dim Message as ImapMessage
For Each Message in Messages
   Debug.WriteLine(Message.Id)
<span class="lang">[C#]</span>
// Login
imap1.Login(Server, User, Pass);

// Construct the seach "SEARCH FLAGGED SINCE 1-Feb-1994 NOT FROM 'Smith'"
ArrayList criteria = new ArrayList();
criteria.Add(new ImapSearchParameter(ImapCriterion.Flagged, ""));
criteria.Add(new ImapSearchParameter(ImapCriterion.Since, "1-Feb-1994"));
criteria.Add(new ImapSearchParameter(ImapCriterion.Not, ""));
criteria.Add(new ImapSearchParameter(ImapCriterion.From, "Smith"));

/*
/ Alternatively, ImapSearchParameter objects can be created like so
/ ImapSearchParameter param = new ImapSearchParameter();
/ param.Criterion = ImapCriterion.Flagged;
/ param.Paramter = "";
/ criteria.Add(param);
*/

// Perform the search. This will occur on the default box INBOX.
ImapMessage[] messages = imap1.CurrentMailbox.Search(criteria);

// Display
Debug.WriteLine("The following message IDs meet the specified criteria");
foreach(ImapMessage message in messages)
   Debug.WriteLine(message.Id);
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.ImapSearchParameter.#ctor">
            <summary>Create a new instance of ImapSearchParameter.</summary><remarks>
				<p>The default constructor creates an instance of ImapSearchParameter.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the Mailbox.Search method. This example constructs the
				search "SEARCH FLAGGED SINCE 1-Feb-1994 NOT FROM 'Smith'"</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Login
Imap1.Login(Server, User, Pass)

' Construct the seach "SEARCH FLAGGED SINCE 1-Feb-1994 NOT FROM 'Smith'"
Dim Criteria As New ArrayList()
Criteria.Add(New ImapSearchParameter(ImapCriterion.Flagged, ""))
Criteria.Add(New ImapSearchParameter(ImapCriterion.Since, "1-Feb-1994"))
Criteria.Add(New ImapSearchParameter(ImapCriterion.Not, ""))
Criteria.Add(New ImapSearchParameter(ImapCriterion.From, "Smith"))

' Alternatively, ImapSearchParameter objects can be created like so
' Dim Param As New ImapSearchParameter()
' Param.Criterion = ImapCriterion.Flagged
' Param.Paramter = ""
' Criteria.Add(Param)

' Perform the search. This will occur on the default box INBOX.
Dim Messages() As ImapMessage = Imap1.CurrentMailbox.Search(Criteria)

' Display
Debug.WriteLine("The following message IDs meet the specified criteria")
Dim Message as ImapMessage
For Each Message in Messages
   Debug.WriteLine(Message.Id)
<span class="lang">[C#]</span>
// Login
imap1.Login(Server, User, Pass);

// Construct the seach "SEARCH FLAGGED SINCE 1-Feb-1994 NOT FROM 'Smith'"
ArrayList criteria = new ArrayList();
criteria.Add(new ImapSearchParameter(ImapCriterion.Flagged, ""));
criteria.Add(new ImapSearchParameter(ImapCriterion.Since, "1-Feb-1994"));
criteria.Add(new ImapSearchParameter(ImapCriterion.Not, ""));
criteria.Add(new ImapSearchParameter(ImapCriterion.From, "Smith"));

/*
/ Alternatively, ImapSearchParameter objects can be created like so
/ ImapSearchParameter param = new ImapSearchParameter();
/ param.Criterion = ImapCriterion.Flagged;
/ param.Paramter = "";
/ criteria.Add(param);
*/

// Perform the search. This will occur on the default box INBOX.
ImapMessage[] messages = imap1.CurrentMailbox.Search(criteria);

// Display
Debug.WriteLine("The following message IDs meet the specified criteria");
foreach(ImapMessage message in messages)
   Debug.WriteLine(message.Id);
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.ImapSearchParameter.#ctor(Dart.PowerTCP.Mail.ImapCriterion,System.String)">
            <summary>Create a new instance of ImapSearchParameter.</summary><remarks>
				<p>Creates a new instance of ImapSearchParameter, setting
				ImapSearchParameter.Criterion to <i>criterion</i> and ImapSearchParameter.Parameter to <i>parameter</i>.</p>
			</remarks><param name="criterion">An ImapCriterion value representing the search criterion.</param><param name="parameter">A string value which modifies <i>criterion</i>.</param>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the Mailbox.Search method. This example constructs the
				search "SEARCH FLAGGED SINCE 1-Feb-1994 NOT FROM 'Smith'"</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Login
Imap1.Login(Server, User, Pass)

' Construct the seach "SEARCH FLAGGED SINCE 1-Feb-1994 NOT FROM 'Smith'"
Dim Criteria As New ArrayList()
Criteria.Add(New ImapSearchParameter(ImapCriterion.Flagged, ""))
Criteria.Add(New ImapSearchParameter(ImapCriterion.Since, "1-Feb-1994"))
Criteria.Add(New ImapSearchParameter(ImapCriterion.Not, ""))
Criteria.Add(New ImapSearchParameter(ImapCriterion.From, "Smith"))

' Alternatively, ImapSearchParameter objects can be created like so
' Dim Param As New ImapSearchParameter()
' Param.Criterion = ImapCriterion.Flagged
' Param.Paramter = ""
' Criteria.Add(Param)

' Perform the search. This will occur on the default box INBOX.
Dim Messages() As ImapMessage = Imap1.CurrentMailbox.Search(Criteria)

' Display
Debug.WriteLine("The following message IDs meet the specified criteria")
Dim Message as ImapMessage
For Each Message in Messages
   Debug.WriteLine(Message.Id)
<span class="lang">[C#]</span>
// Login
imap1.Login(Server, User, Pass);

// Construct the seach "SEARCH FLAGGED SINCE 1-Feb-1994 NOT FROM 'Smith'"
ArrayList criteria = new ArrayList();
criteria.Add(new ImapSearchParameter(ImapCriterion.Flagged, ""));
criteria.Add(new ImapSearchParameter(ImapCriterion.Since, "1-Feb-1994"));
criteria.Add(new ImapSearchParameter(ImapCriterion.Not, ""));
criteria.Add(new ImapSearchParameter(ImapCriterion.From, "Smith"));

/*
/ Alternatively, ImapSearchParameter objects can be created like so
/ ImapSearchParameter param = new ImapSearchParameter();
/ param.Criterion = ImapCriterion.Flagged;
/ param.Paramter = "";
/ criteria.Add(param);
*/

// Perform the search. This will occur on the default box INBOX.
ImapMessage[] messages = imap1.CurrentMailbox.Search(criteria);

// Display
Debug.WriteLine("The following message IDs meet the specified criteria");
foreach(ImapMessage message in messages)
   Debug.WriteLine(message.Id);
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.ImapSearchParameter.ToString">
            <summary>Returns the string representation of this search parameter.</summary><remarks>
				<p>Returns the string representation of this parameter. This string value 
				can be passed in as a parameter to another ImapSearchParameter object 
				using the ImapCriterion.Not or ImapCriterion.Or values as a basis for 
				a search.</p>
			</remarks><returns>A string representation of the parameter.</returns>
        </member>
        <member name="M:Dart.PowerTCP.Mail.ImapSearchParameter.ToString(System.IFormatProvider)">
            <summary>Returns the string representation of this search parameter.</summary><remarks>
				<p>Returns the string representation of this parameter. This string value 
				can be passed in as a parameter to another ImapSearchParameter object 
				using the ImapCriterion.Not or ImapCriterion.Or values as a basis for 
				a search.</p>
			</remarks><returns>A string representation of the parameter.</returns>
        </member>
        <member name="P:Dart.PowerTCP.Mail.ImapSearchParameter.Criterion">
            <summary>Gets or sets the search criterion.</summary><remarks>
				<p>Use this property to restrict your searches. For example, setting
				this property to ImapCriterion.Flagged, adding the ImapSearchParameter to an ICollection object
				and passing it into the Mailbox.Search method will return all messages 
				which have the Flagged flag set.</p>
			</remarks><value>An ImapCriterion value representing the search criterion.</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the Mailbox.Search method. This example constructs the
				search "SEARCH FLAGGED SINCE 1-Feb-1994 NOT FROM 'Smith'"</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Login
Imap1.Login(Server, User, Pass)

' Construct the seach "SEARCH FLAGGED SINCE 1-Feb-1994 NOT FROM 'Smith'"
Dim Criteria As New ArrayList()
Criteria.Add(New ImapSearchParameter(ImapCriterion.Flagged, ""))
Criteria.Add(New ImapSearchParameter(ImapCriterion.Since, "1-Feb-1994"))
Criteria.Add(New ImapSearchParameter(ImapCriterion.Not, ""))
Criteria.Add(New ImapSearchParameter(ImapCriterion.From, "Smith"))

' Alternatively, ImapSearchParameter objects can be created like so
' Dim Param As New ImapSearchParameter()
' Param.Criterion = ImapCriterion.Flagged
' Param.Paramter = ""
' Criteria.Add(Param)

' Perform the search. This will occur on the default box INBOX.
Dim Messages() As ImapMessage = Imap1.CurrentMailbox.Search(Criteria)

' Display
Debug.WriteLine("The following message IDs meet the specified criteria")
Dim Message as ImapMessage
For Each Message in Messages
   Debug.WriteLine(Message.Id)
<span class="lang">[C#]</span>
// Login
imap1.Login(Server, User, Pass);

// Construct the seach "SEARCH FLAGGED SINCE 1-Feb-1994 NOT FROM 'Smith'"
ArrayList criteria = new ArrayList();
criteria.Add(new ImapSearchParameter(ImapCriterion.Flagged, ""));
criteria.Add(new ImapSearchParameter(ImapCriterion.Since, "1-Feb-1994"));
criteria.Add(new ImapSearchParameter(ImapCriterion.Not, ""));
criteria.Add(new ImapSearchParameter(ImapCriterion.From, "Smith"));

/*
/ Alternatively, ImapSearchParameter objects can be created like so
/ ImapSearchParameter param = new ImapSearchParameter();
/ param.Criterion = ImapCriterion.Flagged;
/ param.Paramter = "";
/ criteria.Add(param);
*/

// Perform the search. This will occur on the default box INBOX.
ImapMessage[] messages = imap1.CurrentMailbox.Search(criteria);

// Display
Debug.WriteLine("The following message IDs meet the specified criteria");
foreach(ImapMessage message in messages)
   Debug.WriteLine(message.Id);
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.ImapSearchParameter.Parameter">
            <summary>Gets or sets the parameter information which modifies the ImapSearchParameter.Criterion.</summary><remarks>
				<p>Gets or sets the parameter information which modifies the ImapSearchParameter.Criterion.
			For some criteria, the search parameter must be set (ex. ImapCriteria.Before, 
			ImapCriteria.To, etc.), for others, the ImapSearchParameter.Criterion property
			does not require a modifier (ex. ImapCriterion.Answered).  See the description of the ImapCriterion values to determine 
			which criteria require a paramerter.
			</p>
			</remarks><value>A string value which modifies the ImapSearchParameter.Criterion</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the Mailbox.Search method. This example constructs the
				search "SEARCH FLAGGED SINCE 1-Feb-1994 NOT FROM 'Smith'"</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Login
Imap1.Login(Server, User, Pass)

' Construct the seach "SEARCH FLAGGED SINCE 1-Feb-1994 NOT FROM 'Smith'"
Dim Criteria As New ArrayList()
Criteria.Add(New ImapSearchParameter(ImapCriterion.Flagged, ""))
Criteria.Add(New ImapSearchParameter(ImapCriterion.Since, "1-Feb-1994"))
Criteria.Add(New ImapSearchParameter(ImapCriterion.Not, ""))
Criteria.Add(New ImapSearchParameter(ImapCriterion.From, "Smith"))

' Alternatively, ImapSearchParameter objects can be created like so
' Dim Param As New ImapSearchParameter()
' Param.Criterion = ImapCriterion.Flagged
' Param.Paramter = ""
' Criteria.Add(Param)

' Perform the search. This will occur on the default box INBOX.
Dim Messages() As ImapMessage = Imap1.CurrentMailbox.Search(Criteria)

' Display
Debug.WriteLine("The following message IDs meet the specified criteria")
Dim Message as ImapMessage
For Each Message in Messages
   Debug.WriteLine(Message.Id)
<span class="lang">[C#]</span>
// Login
imap1.Login(Server, User, Pass);

// Construct the seach "SEARCH FLAGGED SINCE 1-Feb-1994 NOT FROM 'Smith'"
ArrayList criteria = new ArrayList();
criteria.Add(new ImapSearchParameter(ImapCriterion.Flagged, ""));
criteria.Add(new ImapSearchParameter(ImapCriterion.Since, "1-Feb-1994"));
criteria.Add(new ImapSearchParameter(ImapCriterion.Not, ""));
criteria.Add(new ImapSearchParameter(ImapCriterion.From, "Smith"));

/*
/ Alternatively, ImapSearchParameter objects can be created like so
/ ImapSearchParameter param = new ImapSearchParameter();
/ param.Criterion = ImapCriterion.Flagged;
/ param.Paramter = "";
/ criteria.Add(param);
*/

// Perform the search. This will occur on the default box INBOX.
ImapMessage[] messages = imap1.CurrentMailbox.Search(criteria);

// Display
Debug.WriteLine("The following message IDs meet the specified criteria");
foreach(ImapMessage message in messages)
   Debug.WriteLine(message.Id);
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="T:Dart.PowerTCP.Mail.ImapStatusMailboxCommand">
            <summary>
            Summary description for ImapStatusMailboxCommand.
            </summary>
        </member>
        <member name="T:Dart.PowerTCP.Mail.ImapStoreCommand">
            <summary>
            Summary description for ImapStoreCommand.
            </summary>
        </member>
        <member name="T:Dart.PowerTCP.Mail.ImapSubscribeMailboxCommand">
            <summary>
            Summary description for ImapSubscribeMailboxCommand.
            </summary>
        </member>
        <member name="T:Dart.PowerTCP.Mail.ImapUnsubscribeMailboxCommand">
            <summary>
            Summary description for ImapUnsubscribeMailboxCommand.
            </summary>
        </member>
        <member name="T:Dart.PowerTCP.Mail.ImapUTF7Encoding">
            <summary>Represents a modified UTF-7 encoding of Unicode characters to be used for IMAP mailbox names.</summary><remarks>
				<p><a href="http://www.faqs.org/rfcs/rfc2060.html">RFC 2060</a> describes a modified UTF-7 encoding to use for 
				IMAP mailbox names, as standard UTF-7 encoding causes some conflict with certain characters within the IMAP protocol (see the RFC, section 5.1.3 for
				a list of conflicts).
				</p>
				<p>The PowerTCP Imap component uses this class to automatically manage mailbox name encoding/decoding.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates encoding/decoding data using the ImapUTF7Encoding class.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub ImapUTF7Test()

   ' Create Unicode character array
   ' ChrW(35)  = #
   ' ChrW(37)  = %
   ' ChrW(928) = Pi
   ' ChrW(931) = Sigma
   Dim chars() As Char = {ChrW(35), ChrW(37), ChrW(928), ChrW(931)}

   ' Initialize ImapUTF7 encoder
   Dim ImapUTF7 As New ImapUTF7Encoding()

   ' Determine how big target byte array needs to be 
   Dim Count As Integer = ImapUTF7.GetByteCount(chars, 0, chars.Length)
   ' You could also use the following to get the maximum size
   ' Dim Count As Integer = ImapUTF7.GetMaxByteCount(chars.Length)
   Debug.WriteLine(Count &amp; " bytes needed to encode characters.")

   ' Initialize target byte array
   Dim Bytes(Count - 1) As Byte

   ' Encode data
   Count = ImapUTF7.GetBytes(chars, 0, chars.Length, bytes, 0)
   Debug.WriteLine(Count &amp; " bytes encoded.")

   ' Show encoded bytes
   Dim B As Byte
   For Each B In Bytes
      Debug.WriteLine(B)
   Next

   ' Now to decode...first determine how big target char array needs to be
   Count = ImapUTF7.GetCharCount(Bytes, 0, Bytes.Length)
   ' You could also use the following to get the maximum size
   ' Count = ImapUTF7.GetMaxCharCount(Bytes.Length)
   Debug.WriteLine(Count &amp; " characters needed to decode bytes.")

   ' Initialize target char array
   ReDim chars(Count - 1)

   ' Decode data
   Count = ImapUTF7.GetChars(Bytes, 0, Bytes.Length, chars, 0)
   Debug.WriteLine(Count &amp; " bytes decoded.")

   ' Show decoded characters
   Dim C As Char
   For Each C In chars
      Debug.WriteLine(C)
   Next
End Sub
<span class="lang">[C#]</span>
private void ImapUTF7Test()
{
   // Create Unicode character array
   char[] chars = {
      '\u0023', // #
      '\u0025', // %
      '\u03a0', // Pi
      '\u03a3'  // Sigma
   };

   // Initialize ImapUTF7 encoder
   ImapUTF7Encoding ImapUTF7 = new ImapUTF7Encoding();

   // Determine how big target byte array needs to be 
   int count = ImapUTF7.GetByteCount(chars, 0, chars.Length);
   // You could also use the following to get the maximum size
   // int count = ImapUTF7.GetMaxByteCount(chars.Length);
   Debug.WriteLine(count + " bytes needed to encode characters.");

   // Initialize target byte array
   byte[] bytes = new byte[count];

   // Encode data
   count = ImapUTF7.GetBytes(chars, 0, chars.Length, bytes, 0);
   Debug.WriteLine(count + " bytes encoded.");

   // Show encoded bytes
   foreach(byte b in bytes)
      Debug.WriteLine(b);

   // Now to decode...first determine how big target char array needs to be
   count = ImapUTF7.GetCharCount(bytes, 0, bytes.Length);
   // You could also use the following to get the maximum size
   // count = ImapUTF7.GetMaxCharCount(bytes.Length);
   Debug.WriteLine(count + " characters needed to decode bytes.");

   // Initialize target char array
   chars = new char[count];

   // Decode data
   count = ImapUTF7.GetChars(bytes, 0, bytes.Length, chars, 0);
   Debug.WriteLine(count + " bytes decoded.");

   // Show decoded characters
   foreach(char c in chars)
      Debug.WriteLine(c);
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.ImapUTF7Encoding.#ctor">
            <summary>Initializes a new instance of the ImapUTF7Encoding class.</summary>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates encoding/decoding data using the ImapUTF7Encoding class.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub ImapUTF7Test()

   ' Create Unicode character array
   ' ChrW(35)  = #
   ' ChrW(37)  = %
   ' ChrW(928) = Pi
   ' ChrW(931) = Sigma
   Dim chars() As Char = {ChrW(35), ChrW(37), ChrW(928), ChrW(931)}

   ' Initialize ImapUTF7 encoder
   Dim ImapUTF7 As New ImapUTF7Encoding()

   ' Determine how big target byte array needs to be 
   Dim Count As Integer = ImapUTF7.GetByteCount(chars, 0, chars.Length)
   ' You could also use the following to get the maximum size
   ' Dim Count As Integer = ImapUTF7.GetMaxByteCount(chars.Length)
   Debug.WriteLine(Count &amp; " bytes needed to encode characters.")

   ' Initialize target byte array
   Dim Bytes(Count - 1) As Byte

   ' Encode data
   Count = ImapUTF7.GetBytes(chars, 0, chars.Length, bytes, 0)
   Debug.WriteLine(Count &amp; " bytes encoded.")

   ' Show encoded bytes
   Dim B As Byte
   For Each B In Bytes
      Debug.WriteLine(B)
   Next

   ' Now to decode...first determine how big target char array needs to be
   Count = ImapUTF7.GetCharCount(Bytes, 0, Bytes.Length)
   ' You could also use the following to get the maximum size
   ' Count = ImapUTF7.GetMaxCharCount(Bytes.Length)
   Debug.WriteLine(Count &amp; " characters needed to decode bytes.")

   ' Initialize target char array
   ReDim chars(Count - 1)

   ' Decode data
   Count = ImapUTF7.GetChars(Bytes, 0, Bytes.Length, chars, 0)
   Debug.WriteLine(Count &amp; " bytes decoded.")

   ' Show decoded characters
   Dim C As Char
   For Each C In chars
      Debug.WriteLine(C)
   Next
End Sub
<span class="lang">[C#]</span>
private void ImapUTF7Test()
{
   // Create Unicode character array
   char[] chars = {
      '\u0023', // #
      '\u0025', // %
      '\u03a0', // Pi
      '\u03a3'  // Sigma
   };

   // Initialize ImapUTF7 encoder
   ImapUTF7Encoding ImapUTF7 = new ImapUTF7Encoding();

   // Determine how big target byte array needs to be 
   int count = ImapUTF7.GetByteCount(chars, 0, chars.Length);
   // You could also use the following to get the maximum size
   // int count = ImapUTF7.GetMaxByteCount(chars.Length);
   Debug.WriteLine(count + " bytes needed to encode characters.");

   // Initialize target byte array
   byte[] bytes = new byte[count];

   // Encode data
   count = ImapUTF7.GetBytes(chars, 0, chars.Length, bytes, 0);
   Debug.WriteLine(count + " bytes encoded.");

   // Show encoded bytes
   foreach(byte b in bytes)
      Debug.WriteLine(b);

   // Now to decode...first determine how big target char array needs to be
   count = ImapUTF7.GetCharCount(bytes, 0, bytes.Length);
   // You could also use the following to get the maximum size
   // count = ImapUTF7.GetMaxCharCount(bytes.Length);
   Debug.WriteLine(count + " characters needed to decode bytes.");

   // Initialize target char array
   chars = new char[count];

   // Decode data
   count = ImapUTF7.GetChars(bytes, 0, bytes.Length, chars, 0);
   Debug.WriteLine(count + " bytes decoded.");

   // Show decoded characters
   foreach(char c in chars)
      Debug.WriteLine(c);
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.ImapUTF7Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
            <summary>Calculates the number of bytes required to store the results of encoding a range of characters from a specified Unicode character array.</summary><remarks>
				<p>Use ImapUTF7Encoding.GetByteCount to calculate exactly, or ImapUTF7Encoding.GetMaxByteCount to calculate at most, the array size required by the ImapUTF7Encoding.GetBytes method to store encoded characters.</p>
			</remarks><param name="chars">The Unicode character array to encode.</param><param name="index">The index of the first character in <I>chars</I> to encode.</param><param name="count">The number of characters to encode.</param><returns>The number of bytes required to encode a range of characters in <I>chars</I>.</returns><exception cref="T:System.ArgumentException">Return value is greater than MaxValue.</exception><exception cref="T:System.ArgumentNullException"><i>chars</i> is a null reference.</exception><exception cref="T:System.ArgumentOutOfRangeException"><I>index</I> or <I>count</I> is less than zero.<P>-or-</P><P><I>index</I> plus <I>count</I> is greater than the length of <I>chars</I>.</P></exception>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates encoding/decoding data using the ImapUTF7Encoding class.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub ImapUTF7Test()

   ' Create Unicode character array
   ' ChrW(35)  = #
   ' ChrW(37)  = %
   ' ChrW(928) = Pi
   ' ChrW(931) = Sigma
   Dim chars() As Char = {ChrW(35), ChrW(37), ChrW(928), ChrW(931)}

   ' Initialize ImapUTF7 encoder
   Dim ImapUTF7 As New ImapUTF7Encoding()

   ' Determine how big target byte array needs to be 
   Dim Count As Integer = ImapUTF7.GetByteCount(chars, 0, chars.Length)
   ' You could also use the following to get the maximum size
   ' Dim Count As Integer = ImapUTF7.GetMaxByteCount(chars.Length)
   Debug.WriteLine(Count &amp; " bytes needed to encode characters.")

   ' Initialize target byte array
   Dim Bytes(Count - 1) As Byte

   ' Encode data
   Count = ImapUTF7.GetBytes(chars, 0, chars.Length, bytes, 0)
   Debug.WriteLine(Count &amp; " bytes encoded.")

   ' Show encoded bytes
   Dim B As Byte
   For Each B In Bytes
      Debug.WriteLine(B)
   Next

   ' Now to decode...first determine how big target char array needs to be
   Count = ImapUTF7.GetCharCount(Bytes, 0, Bytes.Length)
   ' You could also use the following to get the maximum size
   ' Count = ImapUTF7.GetMaxCharCount(Bytes.Length)
   Debug.WriteLine(Count &amp; " characters needed to decode bytes.")

   ' Initialize target char array
   ReDim chars(Count - 1)

   ' Decode data
   Count = ImapUTF7.GetChars(Bytes, 0, Bytes.Length, chars, 0)
   Debug.WriteLine(Count &amp; " bytes decoded.")

   ' Show decoded characters
   Dim C As Char
   For Each C In chars
      Debug.WriteLine(C)
   Next
End Sub
<span class="lang">[C#]</span>
private void ImapUTF7Test()
{
   // Create Unicode character array
   char[] chars = {
      '\u0023', // #
      '\u0025', // %
      '\u03a0', // Pi
      '\u03a3'  // Sigma
   };

   // Initialize ImapUTF7 encoder
   ImapUTF7Encoding ImapUTF7 = new ImapUTF7Encoding();

   // Determine how big target byte array needs to be 
   int count = ImapUTF7.GetByteCount(chars, 0, chars.Length);
   // You could also use the following to get the maximum size
   // int count = ImapUTF7.GetMaxByteCount(chars.Length);
   Debug.WriteLine(count + " bytes needed to encode characters.");

   // Initialize target byte array
   byte[] bytes = new byte[count];

   // Encode data
   count = ImapUTF7.GetBytes(chars, 0, chars.Length, bytes, 0);
   Debug.WriteLine(count + " bytes encoded.");

   // Show encoded bytes
   foreach(byte b in bytes)
      Debug.WriteLine(b);

   // Now to decode...first determine how big target char array needs to be
   count = ImapUTF7.GetCharCount(bytes, 0, bytes.Length);
   // You could also use the following to get the maximum size
   // count = ImapUTF7.GetMaxCharCount(bytes.Length);
   Debug.WriteLine(count + " characters needed to decode bytes.");

   // Initialize target char array
   chars = new char[count];

   // Decode data
   count = ImapUTF7.GetChars(bytes, 0, bytes.Length, chars, 0);
   Debug.WriteLine(count + " bytes decoded.");

   // Show decoded characters
   foreach(char c in chars)
      Debug.WriteLine(c);
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.ImapUTF7Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>Encodes a specified range of elements from a Unicode character array, and stores the results in a specified range of elements in a byte array.</summary><remarks>
				<p>Use ImapUTF7Encoding.GetByteCount to calculate exactly, or ImapUTF7Encoding.GetMaxByteCount to calculate at most, the array size required by the ImapUTF7Encoding.GetBytes method to store encoded characters.</p>
			</remarks><param name="chars">The character array to encode.</param><param name="charIndex">The index of the first character in <I>chars</I> to encode.</param><param name="charCount">The number of characters to encode. </param><param name="bytes">The byte array where the encoded results are stored. </param><param name="byteIndex">The index of the first character in <I>bytes</I> where the encoded results are stored.</param><returns>The number of bytes stored in <I>bytes</I>.</returns><exception cref="T:System.ArgumentException"><I>byteIndex</I> is equal to the length of <I>bytes</I>. <P>-or-</P> <P>No bytes have been stored in <I>bytes</I>.</P> <P>-or-</P> <P>An invalid high or low member of a surrogate pair was encountered during encoding.</P></exception><exception cref="T:System.ArgumentNullException">The <I>chars</I> or <I>bytes</I> parameter is a null reference.</exception><exception cref="T:System.ArgumentOutOfRangeException">The <I>charIndex</I>, <I>charCount</I>, or <I>byteIndex</I> parameter is less than zero. <P>-or-</P> <P>The sum of <I>charIndex</I> and <I>charCount</I> is greater than the length of <I>chars</I>.</P> <P>-or-</P> <P><I>byteIndex</I> is greater than the length of <I>bytes</I>.</P></exception>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates encoding/decoding data using the ImapUTF7Encoding class.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub ImapUTF7Test()

   ' Create Unicode character array
   ' ChrW(35)  = #
   ' ChrW(37)  = %
   ' ChrW(928) = Pi
   ' ChrW(931) = Sigma
   Dim chars() As Char = {ChrW(35), ChrW(37), ChrW(928), ChrW(931)}

   ' Initialize ImapUTF7 encoder
   Dim ImapUTF7 As New ImapUTF7Encoding()

   ' Determine how big target byte array needs to be 
   Dim Count As Integer = ImapUTF7.GetByteCount(chars, 0, chars.Length)
   ' You could also use the following to get the maximum size
   ' Dim Count As Integer = ImapUTF7.GetMaxByteCount(chars.Length)
   Debug.WriteLine(Count &amp; " bytes needed to encode characters.")

   ' Initialize target byte array
   Dim Bytes(Count - 1) As Byte

   ' Encode data
   Count = ImapUTF7.GetBytes(chars, 0, chars.Length, bytes, 0)
   Debug.WriteLine(Count &amp; " bytes encoded.")

   ' Show encoded bytes
   Dim B As Byte
   For Each B In Bytes
      Debug.WriteLine(B)
   Next

   ' Now to decode...first determine how big target char array needs to be
   Count = ImapUTF7.GetCharCount(Bytes, 0, Bytes.Length)
   ' You could also use the following to get the maximum size
   ' Count = ImapUTF7.GetMaxCharCount(Bytes.Length)
   Debug.WriteLine(Count &amp; " characters needed to decode bytes.")

   ' Initialize target char array
   ReDim chars(Count - 1)

   ' Decode data
   Count = ImapUTF7.GetChars(Bytes, 0, Bytes.Length, chars, 0)
   Debug.WriteLine(Count &amp; " bytes decoded.")

   ' Show decoded characters
   Dim C As Char
   For Each C In chars
      Debug.WriteLine(C)
   Next
End Sub
<span class="lang">[C#]</span>
private void ImapUTF7Test()
{
   // Create Unicode character array
   char[] chars = {
      '\u0023', // #
      '\u0025', // %
      '\u03a0', // Pi
      '\u03a3'  // Sigma
   };

   // Initialize ImapUTF7 encoder
   ImapUTF7Encoding ImapUTF7 = new ImapUTF7Encoding();

   // Determine how big target byte array needs to be 
   int count = ImapUTF7.GetByteCount(chars, 0, chars.Length);
   // You could also use the following to get the maximum size
   // int count = ImapUTF7.GetMaxByteCount(chars.Length);
   Debug.WriteLine(count + " bytes needed to encode characters.");

   // Initialize target byte array
   byte[] bytes = new byte[count];

   // Encode data
   count = ImapUTF7.GetBytes(chars, 0, chars.Length, bytes, 0);
   Debug.WriteLine(count + " bytes encoded.");

   // Show encoded bytes
   foreach(byte b in bytes)
      Debug.WriteLine(b);

   // Now to decode...first determine how big target char array needs to be
   count = ImapUTF7.GetCharCount(bytes, 0, bytes.Length);
   // You could also use the following to get the maximum size
   // count = ImapUTF7.GetMaxCharCount(bytes.Length);
   Debug.WriteLine(count + " characters needed to decode bytes.");

   // Initialize target char array
   chars = new char[count];

   // Decode data
   count = ImapUTF7.GetChars(bytes, 0, bytes.Length, chars, 0);
   Debug.WriteLine(count + " bytes decoded.");

   // Show decoded characters
   foreach(char c in chars)
      Debug.WriteLine(c);
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.ImapUTF7Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
            <summary>Calculates the number of characters that would result from decoding a specified range of elements in a byte array.</summary><remarks>
				<p>
				Use ImapUTF7Encoding.GetCharCount to calculate exactly, or ImapUTF7Encoding.GetMaxCharCount to calculate at most, the array size required by the ImapUTF7Encoding.GetChars method to store decoded bytes.
				</p>	
			</remarks><param name="bytes">The byte array to decode. </param><param name="index">The index of the first byte in <I>bytes</I> to decode. </param><param name="count">The number of bytes to decode. </param><returns>The number of characters that would result from decoding the specified range of elements in <I>bytes</I>.</returns><exception cref="T:System.ArgumentNullException"><I>bytes</I> is a null reference.</exception><exception cref="T:System.ArgumentOutOfRangeException"><I>index</I> and <I>count</I> do not denote a valid range in <I>bytes</I>.</exception>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates encoding/decoding data using the ImapUTF7Encoding class.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub ImapUTF7Test()

   ' Create Unicode character array
   ' ChrW(35)  = #
   ' ChrW(37)  = %
   ' ChrW(928) = Pi
   ' ChrW(931) = Sigma
   Dim chars() As Char = {ChrW(35), ChrW(37), ChrW(928), ChrW(931)}

   ' Initialize ImapUTF7 encoder
   Dim ImapUTF7 As New ImapUTF7Encoding()

   ' Determine how big target byte array needs to be 
   Dim Count As Integer = ImapUTF7.GetByteCount(chars, 0, chars.Length)
   ' You could also use the following to get the maximum size
   ' Dim Count As Integer = ImapUTF7.GetMaxByteCount(chars.Length)
   Debug.WriteLine(Count &amp; " bytes needed to encode characters.")

   ' Initialize target byte array
   Dim Bytes(Count - 1) As Byte

   ' Encode data
   Count = ImapUTF7.GetBytes(chars, 0, chars.Length, bytes, 0)
   Debug.WriteLine(Count &amp; " bytes encoded.")

   ' Show encoded bytes
   Dim B As Byte
   For Each B In Bytes
      Debug.WriteLine(B)
   Next

   ' Now to decode...first determine how big target char array needs to be
   Count = ImapUTF7.GetCharCount(Bytes, 0, Bytes.Length)
   ' You could also use the following to get the maximum size
   ' Count = ImapUTF7.GetMaxCharCount(Bytes.Length)
   Debug.WriteLine(Count &amp; " characters needed to decode bytes.")

   ' Initialize target char array
   ReDim chars(Count - 1)

   ' Decode data
   Count = ImapUTF7.GetChars(Bytes, 0, Bytes.Length, chars, 0)
   Debug.WriteLine(Count &amp; " bytes decoded.")

   ' Show decoded characters
   Dim C As Char
   For Each C In chars
      Debug.WriteLine(C)
   Next
End Sub
<span class="lang">[C#]</span>
private void ImapUTF7Test()
{
   // Create Unicode character array
   char[] chars = {
      '\u0023', // #
      '\u0025', // %
      '\u03a0', // Pi
      '\u03a3'  // Sigma
   };

   // Initialize ImapUTF7 encoder
   ImapUTF7Encoding ImapUTF7 = new ImapUTF7Encoding();

   // Determine how big target byte array needs to be 
   int count = ImapUTF7.GetByteCount(chars, 0, chars.Length);
   // You could also use the following to get the maximum size
   // int count = ImapUTF7.GetMaxByteCount(chars.Length);
   Debug.WriteLine(count + " bytes needed to encode characters.");

   // Initialize target byte array
   byte[] bytes = new byte[count];

   // Encode data
   count = ImapUTF7.GetBytes(chars, 0, chars.Length, bytes, 0);
   Debug.WriteLine(count + " bytes encoded.");

   // Show encoded bytes
   foreach(byte b in bytes)
      Debug.WriteLine(b);

   // Now to decode...first determine how big target char array needs to be
   count = ImapUTF7.GetCharCount(bytes, 0, bytes.Length);
   // You could also use the following to get the maximum size
   // count = ImapUTF7.GetMaxCharCount(bytes.Length);
   Debug.WriteLine(count + " characters needed to decode bytes.");

   // Initialize target char array
   chars = new char[count];

   // Decode data
   count = ImapUTF7.GetChars(bytes, 0, bytes.Length, chars, 0);
   Debug.WriteLine(count + " bytes decoded.");

   // Show decoded characters
   foreach(char c in chars)
      Debug.WriteLine(c);
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.ImapUTF7Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
            <summary>Decodes a range of elements from a specified byte array, and stores them in a specified range of elements in a Unicode character array.</summary><remarks>
				<p>
				Use ImapUTF7Encoding.GetCharCount to calculate exactly, or ImapUTF7Encoding.GetMaxCharCount to calculate at most, the array size required by the ImapUTF7Encoding.GetChars method to store decoded bytes.
				</p>	
			</remarks><param name="bytes">The byte array to decode. </param><param name="byteIndex">The index of the first element in <I>bytes</I> to decode.</param><param name="byteCount">The number of elements to decode. </param><param name="chars">The character array where the decoded results are stored. </param><param name="charIndex">The index of the first element in <I>chars</I> to store decoded results. </param><returns>The number of characters stored in <I>chars</I>.</returns><exception cref="T:System.ArgumentNullException"><I>bytes</I> or <I>chars</I> is a null reference</exception><exception cref="T:System.ArgumentOutOfRangeException"><I>byteIndex</I>, <I>byteCount</I>, or <I>charIndex</I> is less than zero.<P>-or-</P><P><I>byteIndex</I> plus <I>byteCount</I> is greater than the length of <I>bytes</I>.</P><P>-or-</P><P><I>charIndex</I> is greater than the length of <I>chars</I>.</P></exception><exception cref="T:System.ArgumentException"><I>bytes</I> contains an invalid sequence of bytes</exception>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates encoding/decoding data using the ImapUTF7Encoding class.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub ImapUTF7Test()

   ' Create Unicode character array
   ' ChrW(35)  = #
   ' ChrW(37)  = %
   ' ChrW(928) = Pi
   ' ChrW(931) = Sigma
   Dim chars() As Char = {ChrW(35), ChrW(37), ChrW(928), ChrW(931)}

   ' Initialize ImapUTF7 encoder
   Dim ImapUTF7 As New ImapUTF7Encoding()

   ' Determine how big target byte array needs to be 
   Dim Count As Integer = ImapUTF7.GetByteCount(chars, 0, chars.Length)
   ' You could also use the following to get the maximum size
   ' Dim Count As Integer = ImapUTF7.GetMaxByteCount(chars.Length)
   Debug.WriteLine(Count &amp; " bytes needed to encode characters.")

   ' Initialize target byte array
   Dim Bytes(Count - 1) As Byte

   ' Encode data
   Count = ImapUTF7.GetBytes(chars, 0, chars.Length, bytes, 0)
   Debug.WriteLine(Count &amp; " bytes encoded.")

   ' Show encoded bytes
   Dim B As Byte
   For Each B In Bytes
      Debug.WriteLine(B)
   Next

   ' Now to decode...first determine how big target char array needs to be
   Count = ImapUTF7.GetCharCount(Bytes, 0, Bytes.Length)
   ' You could also use the following to get the maximum size
   ' Count = ImapUTF7.GetMaxCharCount(Bytes.Length)
   Debug.WriteLine(Count &amp; " characters needed to decode bytes.")

   ' Initialize target char array
   ReDim chars(Count - 1)

   ' Decode data
   Count = ImapUTF7.GetChars(Bytes, 0, Bytes.Length, chars, 0)
   Debug.WriteLine(Count &amp; " bytes decoded.")

   ' Show decoded characters
   Dim C As Char
   For Each C In chars
      Debug.WriteLine(C)
   Next
End Sub
<span class="lang">[C#]</span>
private void ImapUTF7Test()
{
   // Create Unicode character array
   char[] chars = {
      '\u0023', // #
      '\u0025', // %
      '\u03a0', // Pi
      '\u03a3'  // Sigma
   };

   // Initialize ImapUTF7 encoder
   ImapUTF7Encoding ImapUTF7 = new ImapUTF7Encoding();

   // Determine how big target byte array needs to be 
   int count = ImapUTF7.GetByteCount(chars, 0, chars.Length);
   // You could also use the following to get the maximum size
   // int count = ImapUTF7.GetMaxByteCount(chars.Length);
   Debug.WriteLine(count + " bytes needed to encode characters.");

   // Initialize target byte array
   byte[] bytes = new byte[count];

   // Encode data
   count = ImapUTF7.GetBytes(chars, 0, chars.Length, bytes, 0);
   Debug.WriteLine(count + " bytes encoded.");

   // Show encoded bytes
   foreach(byte b in bytes)
      Debug.WriteLine(b);

   // Now to decode...first determine how big target char array needs to be
   count = ImapUTF7.GetCharCount(bytes, 0, bytes.Length);
   // You could also use the following to get the maximum size
   // count = ImapUTF7.GetMaxCharCount(bytes.Length);
   Debug.WriteLine(count + " characters needed to decode bytes.");

   // Initialize target char array
   chars = new char[count];

   // Decode data
   count = ImapUTF7.GetChars(bytes, 0, bytes.Length, chars, 0);
   Debug.WriteLine(count + " bytes decoded.");

   // Show decoded characters
   foreach(char c in chars)
      Debug.WriteLine(c);
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.ImapUTF7Encoding.GetMaxByteCount(System.Int32)">
            <summary>Calculates the maximum number of bytes required to encode a specified number of characters.</summary><remarks>
				<p>Use ImapUTF7Encoding.GetByteCount to calculate exactly, or ImapUTF7Encoding.GetMaxByteCount to calculate at most, the array size required by the ImapUTF7Encoding.GetBytes method to store encoded characters.</p>
			</remarks><param name="charCount">The number of characters to encode. </param><returns>The maximum number of bytes required to encode <I>charCount</I> number of characters.</returns><exception cref="T:System.ArgumentOutOfRangeException"><I>charCount</I> is less than zero.</exception>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates encoding/decoding data using the ImapUTF7Encoding class.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub ImapUTF7Test()

   ' Create Unicode character array
   ' ChrW(35)  = #
   ' ChrW(37)  = %
   ' ChrW(928) = Pi
   ' ChrW(931) = Sigma
   Dim chars() As Char = {ChrW(35), ChrW(37), ChrW(928), ChrW(931)}

   ' Initialize ImapUTF7 encoder
   Dim ImapUTF7 As New ImapUTF7Encoding()

   ' Determine how big target byte array needs to be 
   Dim Count As Integer = ImapUTF7.GetByteCount(chars, 0, chars.Length)
   ' You could also use the following to get the maximum size
   ' Dim Count As Integer = ImapUTF7.GetMaxByteCount(chars.Length)
   Debug.WriteLine(Count &amp; " bytes needed to encode characters.")

   ' Initialize target byte array
   Dim Bytes(Count - 1) As Byte

   ' Encode data
   Count = ImapUTF7.GetBytes(chars, 0, chars.Length, bytes, 0)
   Debug.WriteLine(Count &amp; " bytes encoded.")

   ' Show encoded bytes
   Dim B As Byte
   For Each B In Bytes
      Debug.WriteLine(B)
   Next

   ' Now to decode...first determine how big target char array needs to be
   Count = ImapUTF7.GetCharCount(Bytes, 0, Bytes.Length)
   ' You could also use the following to get the maximum size
   ' Count = ImapUTF7.GetMaxCharCount(Bytes.Length)
   Debug.WriteLine(Count &amp; " characters needed to decode bytes.")

   ' Initialize target char array
   ReDim chars(Count - 1)

   ' Decode data
   Count = ImapUTF7.GetChars(Bytes, 0, Bytes.Length, chars, 0)
   Debug.WriteLine(Count &amp; " bytes decoded.")

   ' Show decoded characters
   Dim C As Char
   For Each C In chars
      Debug.WriteLine(C)
   Next
End Sub
<span class="lang">[C#]</span>
private void ImapUTF7Test()
{
   // Create Unicode character array
   char[] chars = {
      '\u0023', // #
      '\u0025', // %
      '\u03a0', // Pi
      '\u03a3'  // Sigma
   };

   // Initialize ImapUTF7 encoder
   ImapUTF7Encoding ImapUTF7 = new ImapUTF7Encoding();

   // Determine how big target byte array needs to be 
   int count = ImapUTF7.GetByteCount(chars, 0, chars.Length);
   // You could also use the following to get the maximum size
   // int count = ImapUTF7.GetMaxByteCount(chars.Length);
   Debug.WriteLine(count + " bytes needed to encode characters.");

   // Initialize target byte array
   byte[] bytes = new byte[count];

   // Encode data
   count = ImapUTF7.GetBytes(chars, 0, chars.Length, bytes, 0);
   Debug.WriteLine(count + " bytes encoded.");

   // Show encoded bytes
   foreach(byte b in bytes)
      Debug.WriteLine(b);

   // Now to decode...first determine how big target char array needs to be
   count = ImapUTF7.GetCharCount(bytes, 0, bytes.Length);
   // You could also use the following to get the maximum size
   // count = ImapUTF7.GetMaxCharCount(bytes.Length);
   Debug.WriteLine(count + " characters needed to decode bytes.");

   // Initialize target char array
   chars = new char[count];

   // Decode data
   count = ImapUTF7.GetChars(bytes, 0, bytes.Length, chars, 0);
   Debug.WriteLine(count + " bytes decoded.");

   // Show decoded characters
   foreach(char c in chars)
      Debug.WriteLine(c);
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.ImapUTF7Encoding.GetMaxCharCount(System.Int32)">
            <summary>Calculates the maximum number of characters that can result from decoding a specified number of bytes.</summary><remarks>
				<p>
				Use ImapUTF7Encoding.GetCharCount to calculate exactly, or ImapUTF7Encoding.GetMaxCharCount to calculate at most, the array size required by the ImapUTF7Encoding.GetChars method to store decoded bytes.
				</p>	
			</remarks><param name="byteCount">The number of bytes to decode.</param><returns>The maximum number of characters that can result from decoding <I>byteCount</I> number of bytes.</returns>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates encoding/decoding data using the ImapUTF7Encoding class.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub ImapUTF7Test()

   ' Create Unicode character array
   ' ChrW(35)  = #
   ' ChrW(37)  = %
   ' ChrW(928) = Pi
   ' ChrW(931) = Sigma
   Dim chars() As Char = {ChrW(35), ChrW(37), ChrW(928), ChrW(931)}

   ' Initialize ImapUTF7 encoder
   Dim ImapUTF7 As New ImapUTF7Encoding()

   ' Determine how big target byte array needs to be 
   Dim Count As Integer = ImapUTF7.GetByteCount(chars, 0, chars.Length)
   ' You could also use the following to get the maximum size
   ' Dim Count As Integer = ImapUTF7.GetMaxByteCount(chars.Length)
   Debug.WriteLine(Count &amp; " bytes needed to encode characters.")

   ' Initialize target byte array
   Dim Bytes(Count - 1) As Byte

   ' Encode data
   Count = ImapUTF7.GetBytes(chars, 0, chars.Length, bytes, 0)
   Debug.WriteLine(Count &amp; " bytes encoded.")

   ' Show encoded bytes
   Dim B As Byte
   For Each B In Bytes
      Debug.WriteLine(B)
   Next

   ' Now to decode...first determine how big target char array needs to be
   Count = ImapUTF7.GetCharCount(Bytes, 0, Bytes.Length)
   ' You could also use the following to get the maximum size
   ' Count = ImapUTF7.GetMaxCharCount(Bytes.Length)
   Debug.WriteLine(Count &amp; " characters needed to decode bytes.")

   ' Initialize target char array
   ReDim chars(Count - 1)

   ' Decode data
   Count = ImapUTF7.GetChars(Bytes, 0, Bytes.Length, chars, 0)
   Debug.WriteLine(Count &amp; " bytes decoded.")

   ' Show decoded characters
   Dim C As Char
   For Each C In chars
      Debug.WriteLine(C)
   Next
End Sub
<span class="lang">[C#]</span>
private void ImapUTF7Test()
{
   // Create Unicode character array
   char[] chars = {
      '\u0023', // #
      '\u0025', // %
      '\u03a0', // Pi
      '\u03a3'  // Sigma
   };

   // Initialize ImapUTF7 encoder
   ImapUTF7Encoding ImapUTF7 = new ImapUTF7Encoding();

   // Determine how big target byte array needs to be 
   int count = ImapUTF7.GetByteCount(chars, 0, chars.Length);
   // You could also use the following to get the maximum size
   // int count = ImapUTF7.GetMaxByteCount(chars.Length);
   Debug.WriteLine(count + " bytes needed to encode characters.");

   // Initialize target byte array
   byte[] bytes = new byte[count];

   // Encode data
   count = ImapUTF7.GetBytes(chars, 0, chars.Length, bytes, 0);
   Debug.WriteLine(count + " bytes encoded.");

   // Show encoded bytes
   foreach(byte b in bytes)
      Debug.WriteLine(b);

   // Now to decode...first determine how big target char array needs to be
   count = ImapUTF7.GetCharCount(bytes, 0, bytes.Length);
   // You could also use the following to get the maximum size
   // count = ImapUTF7.GetMaxCharCount(bytes.Length);
   Debug.WriteLine(count + " characters needed to decode bytes.");

   // Initialize target char array
   chars = new char[count];

   // Decode data
   count = ImapUTF7.GetChars(bytes, 0, bytes.Length, chars, 0);
   Debug.WriteLine(count + " bytes decoded.");

   // Show decoded characters
   foreach(char c in chars)
      Debug.WriteLine(c);
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="T:Dart.PowerTCP.Mail.Response">
            <summary>
				Presents the response portion from an Internet protocol Request/Response pair.
			</summary><remarks>
				<p>Often, protocols define that commands be responded to with responses made up of a 
				response code and response text. For example(using the FTP protocol as an example), the FTP protocol defines a command "CWD"
				which is a request to change the working directory. If command sent to the server was "CWD 
				MYDIR" (a request to change to a directory called "MYDIR"), the 
				response back from the server may be something like "200 Working Directory Changed". 
				In PowerTCP this response is encapsulated by the Response object, allowing access to the 
				code (through the Response.Code property), the text (through the Response.Text property),
				or the raw response (through the Response.ToString method). The Response object is usually
				a member of the Invoke object, which represents a request/response pair.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates closing a connection.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' First, check to see if currently connected
If Ftp1.Connected Then

   ' Close method returns an Invoke object
   Dim invoke As Dart.PowerTCP.SecureFtp.Invoke

   ' Attempt to close the connection by using the Close method
   Try
      invoke = Ftp1.Close()
   Catch ex As Exception
      ' An error occurred during the close attempt
      Debug.WriteLine(ex.Message)
   End Try

   If Ftp1.Connected Then
      ' For some reason the Close method did not work. Just perform a harsh abort
      Ftp1.Dispose()
      Debug.WriteLine("Unable to QUIT, connection aborted")
   Else
      Debug.WriteLine("Close successful.")
      Debug.WriteLine("Response Code From Server: " + invoke.Response.Code.ToString())
      Debug.WriteLine("Response Text From Server: " + invoke.Response.Text)
   End If

Else
   Debug.WriteLine("You are not connected")
End If        
<span class="lang">[C#]</span> 
// First, check to see if currently connected
if(ftp1.Connected)
{
    // Close method returns an Invoke object
    Dart.PowerTCP.SecureFtp.Invoke invoke;
    
    // Attempt to Close the connection by using the Close method
    try
    {
        invoke = ftp1.Close();
    }
    catch(Exception ex)
    {
        // An error occurred during the close attempt
        Debug.WriteLine(ex.Message);
    }
    if(ftp1.Connected)
    {
        // For some reason the QUIT command did not work, just perform a "harsh" abort
        ftp1.Dispose();
        Debug.WriteLine("Unable to QUIT, connection aborted");
    }
    else
    {
      Debug.WriteLine("Close successful.");
      Debug.WriteLine("Response Code From Server: " + invoke.Response.Code.ToString());
      Debug.WriteLine("Response Text From Server: " + invoke.Response.Text);
    }
}
else{Debug.WriteLine("You are not connected");}     
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Response.#ctor(System.String)">
            <summary>
				Initializes a new instance of the Response class.
			</summary>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Response.ToString">
            <summary>
				Returns the complete response string received.
			</summary><returns>A string representing the unparsed response from the server.</returns><remarks>
				<p>The <a href="ms-help://MS.MSDNVS/cpref/html/frlrfSystemStringClassToStringTopic.htm">String.ToString</a> method is overridden to allow access to the entire 
				unparsed string. To retrieve a parsed listing of the response code or text, use the Response.Code or Response.Text property, respectively.</p>
				<p>This property is useful if you wish to see the entire response string returned from the server without any formatting applied.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates the <b>ConnectedChanged</b> event, and how using the <b>AutoClose</b> property effects the connection status.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"


' Create Invoke object
Dim f As Dart.PowerTCP.SecureFtp.Invoke

' Call a couple of methods. The ConnectedChange event should only fire once , to connect
Debug.WriteLine("Sending a PWD command. The ConnectedChanged Event should fire once for this (log in)")
f = Ftp1.Invoke(Dart.PowerTCP.SecureFtp.FtpCommand.PrintDir)
Debug.WriteLine("Response from server: " + f.Response.ToString())

' Because the connection is maintained, the ConnectedChanged event will not fire for other methods called
Debug.WriteLine("Sending a HELP command. The ConnectedChanged Event should not fire for this.")
f = Ftp1.Invoke(Dart.PowerTCP.SecureFtp.FtpCommand.Help)
Debug.WriteLine("Response from server: " + f.Response.ToString())

' Be sure to close the connection. The ConnectedChanged event should fire once more
Ftp1.Close()

' Monitor the connection status using the ConnectedChanged event
Private Sub Ftp1_ConnectedChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles Ftp1.ConnectedChanged

   ' The state of the connection has changed. Check current state.
   If Ftp1.Connected Then
      Debug.WriteLine("FTP Control connection connected")
   Else
      Debug.WriteLine("FTP Control connection disconnected")
   End If
End Sub        
<span class="lang">[C#]</span> 
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

// Create Invoke object

Dart.PowerTCP.SecureFtp.Invoke f;

// Call a couple of methods. The ConnectedChange event should only fire once , to connect
Debug.WriteLine("Sending a PWD command. The ConnectedChanged Event should fire once for this (log in)");
f = ftp1.Invoke(Dart.PowerTCP.SecureFtp.FtpCommand.PrintDir);
Debug.WriteLine("Response from server: " + f.Response.ToString());

// Because the connection is maintained, the ConnectedChanged event will not fire for other methods called
Debug.WriteLine("Sending a HELP command. The ConnectedChanged Event should not fire for this.");
f = ftp1.Invoke(Dart.PowerTCP.SecureFtp.FtpCommand.Help);
Debug.WriteLine("Response from server: " + f.Response.ToString());

// Be sure to close the connection. The ConnectedChanged event should fire once more
ftp1.Close();


// Monitor the connection status using the ConnectedChanged event.

private void ftp1_ConnectedChanged(object sender, System.EventArgs e)
{

    // The state of the connection has changed. Check current state.
    if(ftp1.Connected)
        Debug.WriteLine("FTP control connection connected.");
    else
        Debug.WriteLine("FTP control connection disconnected.");
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Response.Code">
            <summary>
				Gets the 3-digit response code from the response string.
			</summary><value>An integer representing the response code parsed from the raw response.</value><remarks>
				<p>The <b>Response.Code</b> property allows easy access to the code parsed from the raw response. To retrieve the raw response, simply use the Response.ToString method.</p>
				<p>This property is useful because it allows checking of the code received from the server without parsing. For example, if you are checking for a response code between 200 and 299, you can simply say:</p>
				<code>
if(Invoke.Response.Code &lt; 200 &amp;&amp; Invoke.Response.Code &gt; 300)
   // Take action here
</code>
				<p>This is helpful because you don't have to explicitly parse the raw response, and because the value is already an integer, allowing numerical comparison.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates closing a connection.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' First, check to see if currently connected
If Ftp1.Connected Then

   ' Close method returns an Invoke object
   Dim invoke As Dart.PowerTCP.SecureFtp.Invoke

   ' Attempt to close the connection by using the Close method
   Try
      invoke = Ftp1.Close()
   Catch ex As Exception
      ' An error occurred during the close attempt
      Debug.WriteLine(ex.Message)
   End Try

   If Ftp1.Connected Then
      ' For some reason the Close method did not work. Just perform a harsh abort
      Ftp1.Dispose()
      Debug.WriteLine("Unable to QUIT, connection aborted")
   Else
      Debug.WriteLine("Close successful.")
      Debug.WriteLine("Response Code From Server: " + invoke.Response.Code.ToString())
      Debug.WriteLine("Response Text From Server: " + invoke.Response.Text)
   End If

Else
   Debug.WriteLine("You are not connected")
End If        
<span class="lang">[C#]</span> 
// First, check to see if currently connected
if(ftp1.Connected)
{
    // Close method returns an Invoke object
    Dart.PowerTCP.SecureFtp.Invoke invoke;
    
    // Attempt to Close the connection by using the Close method
    try
    {
        invoke = ftp1.Close();
    }
    catch(Exception ex)
    {
        // An error occurred during the close attempt
        Debug.WriteLine(ex.Message);
    }
    if(ftp1.Connected)
    {
        // For some reason the QUIT command did not work, just perform a "harsh" abort
        ftp1.Dispose();
        Debug.WriteLine("Unable to QUIT, connection aborted");
    }
    else
    {
      Debug.WriteLine("Close successful.");
      Debug.WriteLine("Response Code From Server: " + invoke.Response.Code.ToString());
      Debug.WriteLine("Response Text From Server: " + invoke.Response.Text);
    }
}
else{Debug.WriteLine("You are not connected");}     
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Response.Text">
            <summary>
				Gets the textual response without the 3-digit response code and CR/LF's.
			</summary><value>A string representing the test response parsed from the raw response.</value><remarks>
				<p>The <b>Response.Text</b> property allows easy access to the text (the response from the server minus the response code and CRLFs) parsed from the raw response. 
				To retrieve the raw response, simply use the Response.ToString method.</p>
				<p>This property is useful because it allows access to the response string from the server without having to parse.</p>
				<p>If the response from the server was "200 Working Directory Changed", this property would contain "Working Directory Changed".</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span>The following example demonstrates using Invoke to send a custom command.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span>
' Set server and user properties. This will allow us to call other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Invoke a command
Dim invoke as Dart.PowerTCP.SecureFtp.Invoke

' Use Invoke(FtpCommand.Null) to send a proprietary command

Try
   invoke = Ftp1.Invoke(Dart.PowerTCP.SecureFtp.FtpCommand.Null, "MYFILECOMMAND file1.txt")
Catch ex As Exception
   Debug.WriteLine("Error: " + ex.Message)
   Exit Sub
End Try
            
' Success. Print response.
Debug.WriteLine("Response from server : " + invoke.Response.Text)
Ftp1.Close()
<span class="lang">[C#]</span>
// Set server and user properties. This will allow us to call other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

// Use Invoke(FtpCommand.Null) to send a proprietary command
try
{
   Dart.PowerTCP.SecureFtp.Invoke invoke = ftp1.Invoke(Dart.PowerTCP.SecureFtp.FtpCommand.Null, "MYFILECOMMAND file1.txt");
}
catch(Exception ex)
{
   Debug.WriteLine("Error: " + ex.Message);
   return;
}
    
// Success. Print response
Debug.WriteLine("Response from server : " + invoke.Response.Text);

// Close connection
ftp1.Close();
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="T:Dart.PowerTCP.Mail.Invoke">
            <summary>
				Presents the results from an Internet protocol Request/Response pair.
			</summary><remarks>
				<p>Many Internet protocols are based on a request/reply system, where the client sends a request, 
				and the server sends at least one reply. This continues lock-step until communication is 
				complete. The Invoke object encapsulates these request/reply pairs. </p>
				<p>In PowerTCP commands are often sent using the Object.Invoke or Object.BeginInvoke 
				methods. When a 
				command is sent an Invoke object is returned describing both the request and 
				response. The response is encapsulated by the Invoke.Response property, which allows easy access to the 
				raw and parsed response from the server. The request is represented by the Invoke.Request 
				property, a string containing the request sent.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span>The following example demonstrates using Invoke to send a command.</p>
				<pre class="code">
                    <span class="lang">[Visual Basic]</span>
' Set server and user properties. This will allow us to call other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Invoke a command
Dim invoke as Dart.PowerTCP.SecureFtp.Invoke
Try
   invoke = Ftp1.Invoke(FtpCommand.NoOp)
Catch ex as Exception
   Debug.WriteLine("Error: " + ex.Message)
   Exit Sub
End Try
            
' Success
Debug.WriteLine("Request/Response messages: " + invoke.ToString())
                    <span class="lang">[C#]</span>
// Set server and user properties. This will allow us to call other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

// Invoke a command
Dart.PowerTCP.SecureFtp.Invoke invoke;
try
{
   invoke = ftp1.Invoke(Dart.PowerTCP.SecureFtp.FtpCommand.NoOp);
}
catch (Exception ex)
{
    Debug.WriteLine("Error: " + ex.ToString());
    return;
}

// Success
Debug.WriteLine("Request/Response messages: " + invoke.ToString());
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Invoke.#ctor">
            <summary>
				Initializes a new instance of the Invoke class.
			</summary>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Invoke.#ctor(System.String,Dart.PowerTCP.Mail.Response)">
            <summary>
				Initializes a new instance of the Invoke class.
			</summary>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Invoke.ToString">
            <summary>
				Returns the entire request/response pair.
			</summary><returns>A string value representing the entire request/response pair.</returns><remarks>
				<p>This method returns the entire request/response pair, with additional formatting.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates a simple rename.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Create Invoke object, which will contain request/response data
Dim invoke As Dart.PowerTCP.SecureFtp.Invoke

' Call Rename. Invoke object will contain request/response data
Try
   invoke = ftp1.Rename("aaa.txt", "zzz.txt")
' ProtocolException thrown if bad response recived from serve
Catch FTPEx As Dart.PowerTCP.SecureFtp.ProtocolException
   Debug.WriteLine("Rename unsuccessful")
   Debug.WriteLine(FtpEx.ToString())
   Exit Sub
End Try  

' If it gets here, Rename was successful
Debug.WriteLine("Rename successful")

' Request sent and Response received
Debug.WriteLine("Response/response " + invoke.ToString())
    
<span class="lang">[C#]</span> 
//Create Invoke object which will contain request/response data
Dart.PowerTCP.SecureFtp.Invoke invoke;

// Call Rename
try
{
    invoke = ftp1.Rename("aaa.txt", "zzz.txt");
}
// ProtocolException thrown if bad response recived from server
catch(Dart.PowerTCP.SecureFtp.ProtocolException FTPex)
{
    Debug.WriteLine("Rename unsuccessful");
    Debug.WriteLine(FTPEx.ToString());
    return;
}

// If it gets here, Rename was successful
Debug.WriteLine("Rename successful");

// Request sent and response received
Debug.WriteLine("Response/response " + invoke.ToString());
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Invoke.Request">
            <summary>
				Gets the request sent to the server.
			</summary><value>
				A string representing the request sent to the server.
			</value><remarks>
				<p>This property represents the command sent to the server.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span>The following example demonstrates using Invoke to send a command.</p>
				<pre class="code">
                    <span class="lang">[Visual Basic]</span>
' Set server and user properties. This will allow us to call other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Invoke a command
Dim invoke as Dart.PowerTCP.SecureFtp.Invoke
Try
   invoke = Ftp1.Invoke(FtpCommand.NoOp)
Catch ex as Exception
   Debug.WriteLine("Error: " + ex.Message)
   Exit Sub
End Try
            
' Success
Debug.WriteLine("Request/Response messages: " + invoke.ToString())
                    <span class="lang">[C#]</span>
// Set server and user properties. This will allow us to call other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

// Invoke a command
Dart.PowerTCP.SecureFtp.Invoke invoke;
try
{
   invoke = ftp1.Invoke(Dart.PowerTCP.SecureFtp.FtpCommand.NoOp);
}
catch (Exception ex)
{
    Debug.WriteLine("Error: " + ex.ToString());
    return;
}

// Success
Debug.WriteLine("Request/Response messages: " + invoke.ToString());
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Invoke.Response">
            <summary>
				Gets the response received from the server.
			</summary><value>
				A Response object representing the response received from the server.
			</value><remarks>
				<p>The response to a command is encapsulated by the Response object, which allows easy access to the code (through the Response.Code property) and text (through the Response.Text property) portions of the response without parsing. If you wish to have to entire, unparsed response from the server, simply use the Response.ToString method.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span>The following example demonstrates using Invoke to send a command.</p>
				<pre class="code">
                    <span class="lang">[Visual Basic]</span>
' Set server and user properties. This will allow us to call other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Invoke a command
Dim invoke as Dart.PowerTCP.SecureFtp.Invoke
Try
   invoke = Ftp1.Invoke(FtpCommand.NoOp)
Catch ex as Exception
   Debug.WriteLine("Error: " + ex.Message)
   Exit Sub
End Try
            
' Success
Debug.WriteLine("Request/Response messages: " + invoke.ToString())
                    <span class="lang">[C#]</span>
// Set server and user properties. This will allow us to call other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

// Invoke a command
Dart.PowerTCP.SecureFtp.Invoke invoke;
try
{
   invoke = ftp1.Invoke(Dart.PowerTCP.SecureFtp.FtpCommand.NoOp);
}
catch (Exception ex)
{
    Debug.WriteLine("Error: " + ex.ToString());
    return;
}

// Success
Debug.WriteLine("Request/Response messages: " + invoke.ToString());
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="T:Dart.PowerTCP.Mail.InvokeEventArgs">
            <summary>
				This class is passed into EndInvoke events and provides data for these event.
			</summary><remarks>
				<p>A <b>InvokeEventArgs</b> object is passed into an EndInvoke event after a command has been sent asynchronously. This object represents the command sent to the server and the response received from the server.</p>
				<p>Many TCP/IP protocols are based on a request/response system, where the client sends a request, and the server sends at least one reply. This continues lock-step until communication is finished. The InvokeEventArgs object encapsulates these request/reply pairs. </p>
				<p>In PowerTCP commands are often explicitly sent using the Object.Invoke or Object.BeginInvoke methods, and transparently sent using higher-level methods. When a command is sent asynchronously an <b>InvokeEventArgs</b> object is returned in the event handler describing both the request and response. The response is encapsulated by the InvokeEventArgs.Response property which allows easy access to the raw and parsed response from the server. The request is represented by the InvokeEventArgs.Request property, a string containing the request sent.</p>
				<p>If your code causes an exception, it would be returned to the handling
				event without you seeing it. To preclude such a condition, you should ALWAYS
				use a try/catch block around your event-handling code.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using <b>Ftp.BeginInvoke</b> to issue a command (in this case, CDUP) asynchronously.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"


' Issue CDUP command asynchronously, upon completion the EndInvoke Event will be fired.
Ftp1.BeginInvoke(Dart.PowerTCP.SecureFtp.FtpCommand.ChangeDirUp, Nothing, Nothing)

' Report
Debug.WriteLine("CDUP command sent.")

' When the BeginInvoke operation has completed, the EndInvoke Event will fire.
Private Sub Ftp1_EndInvoke(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureFtp.InvokeEventArgs) Handles Ftp1.EndInvoke

   ' If an error occurred during the asynchronous method, it would 
   ' be returned in the event. Be sure to check for it.
   If e.Exception Is Nothing Then
      Debug.WriteLine("Command issued " + e.Request)
      Debug.WriteLine("Response received " + e.Response.ToString();
   Else
      Debug.WriteLine(e.Exception.Message)
   End If
   
   ' Close the connection
   Ftp1.Close()
End Sub        
<span class="lang">[C#]</span> 
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";


// Issue CDUP command asynchronously, upon completion the EndInvoke Event will be fired.
ftp1.BeginInvoke(Dart.PowerTCP.SecureFtp.FtpCommand.ChangeDirUp, null, null);

// Report
Debug.WriteLine("CDUP command sent.");

// When the BeginInvoke operation has completed, the EndInvoke Event will fire.
private void ftp1_EndInvoke(object sender, Dart.PowerTCP.SecureFtp.InvokeEventArgs e)
{

    // If an error occurred during the asynchronous method, it would 
    // be returned in the event. Be sure to check for it.
    if(e.Exception == null)
    {
        Debug.WriteLine("Command issued " + e.Request);
        Debug.WriteLine("Response received " + e.Response);
    }
    else
    {
        Debug.WriteLine("Error: " + e.Exception.Message);
    }

    // Close the connection
    ftp1.Close();
}     
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.InvokeEventArgs.#ctor(System.String,Dart.PowerTCP.Mail.Response,System.Object,System.Exception)">
            <summary>
				Initializes a new instance of the InvokeEventArgs class.
			</summary>
        </member>
        <member name="P:Dart.PowerTCP.Mail.InvokeEventArgs.Request">
            <summary>
				Gets the request sent to the server.
			</summary><value>
				A string representing the request sent to the server.
			</value><remarks>
				<p>This property represents the command sent to the server.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using <b>Ftp.BeginInvoke</b> to issue a command (in this case, CDUP) asynchronously.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"


' Issue CDUP command asynchronously, upon completion the EndInvoke Event will be fired.
Ftp1.BeginInvoke(Dart.PowerTCP.SecureFtp.FtpCommand.ChangeDirUp, Nothing, Nothing)

' Report
Debug.WriteLine("CDUP command sent.")

' When the BeginInvoke operation has completed, the EndInvoke Event will fire.
Private Sub Ftp1_EndInvoke(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureFtp.InvokeEventArgs) Handles Ftp1.EndInvoke

   ' If an error occurred during the asynchronous method, it would 
   ' be returned in the event. Be sure to check for it.
   If e.Exception Is Nothing Then
      Debug.WriteLine("Command issued " + e.Request)
      Debug.WriteLine("Response received " + e.Response.ToString();
   Else
      Debug.WriteLine(e.Exception.Message)
   End If
   
   ' Close the connection
   Ftp1.Close()
End Sub        
<span class="lang">[C#]</span> 
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";


// Issue CDUP command asynchronously, upon completion the EndInvoke Event will be fired.
ftp1.BeginInvoke(Dart.PowerTCP.SecureFtp.FtpCommand.ChangeDirUp, null, null);

// Report
Debug.WriteLine("CDUP command sent.");

// When the BeginInvoke operation has completed, the EndInvoke Event will fire.
private void ftp1_EndInvoke(object sender, Dart.PowerTCP.SecureFtp.InvokeEventArgs e)
{

    // If an error occurred during the asynchronous method, it would 
    // be returned in the event. Be sure to check for it.
    if(e.Exception == null)
    {
        Debug.WriteLine("Command issued " + e.Request);
        Debug.WriteLine("Response received " + e.Response);
    }
    else
    {
        Debug.WriteLine("Error: " + e.Exception.Message);
    }

    // Close the connection
    ftp1.Close();
}     
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.InvokeEventArgs.Response">
            <summary>
				Gets the response received from the server.
			</summary><value>
				A Response object representing the response received from the server.
			</value><remarks>
				<p>The response to a command is encapsulated by the InvokeEventArgs.Response property, which allows easy access to the code (through the InvokeEventArgs.Code property) and text (through the InvokeEventArgs.Text property) portions of the response without parsing. If you wish to have to entire, unparsed response from the server, simply use the Response.ToString method.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using <b>Ftp.BeginInvoke</b> to issue a command (in this case, CDUP) asynchronously.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"


' Issue CDUP command asynchronously, upon completion the EndInvoke Event will be fired.
Ftp1.BeginInvoke(Dart.PowerTCP.SecureFtp.FtpCommand.ChangeDirUp, Nothing, Nothing)

' Report
Debug.WriteLine("CDUP command sent.")

' When the BeginInvoke operation has completed, the EndInvoke Event will fire.
Private Sub Ftp1_EndInvoke(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureFtp.InvokeEventArgs) Handles Ftp1.EndInvoke

   ' If an error occurred during the asynchronous method, it would 
   ' be returned in the event. Be sure to check for it.
   If e.Exception Is Nothing Then
      Debug.WriteLine("Command issued " + e.Request)
      Debug.WriteLine("Response received " + e.Response.ToString();
   Else
      Debug.WriteLine(e.Exception.Message)
   End If
   
   ' Close the connection
   Ftp1.Close()
End Sub        
<span class="lang">[C#]</span> 
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";


// Issue CDUP command asynchronously, upon completion the EndInvoke Event will be fired.
ftp1.BeginInvoke(Dart.PowerTCP.SecureFtp.FtpCommand.ChangeDirUp, null, null);

// Report
Debug.WriteLine("CDUP command sent.");

// When the BeginInvoke operation has completed, the EndInvoke Event will fire.
private void ftp1_EndInvoke(object sender, Dart.PowerTCP.SecureFtp.InvokeEventArgs e)
{

    // If an error occurred during the asynchronous method, it would 
    // be returned in the event. Be sure to check for it.
    if(e.Exception == null)
    {
        Debug.WriteLine("Command issued " + e.Request);
        Debug.WriteLine("Response received " + e.Response);
    }
    else
    {
        Debug.WriteLine("Error: " + e.Exception.Message);
    }

    // Close the connection
    ftp1.Close();
}     
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.InvokeEventArgs.State">
            <summary>
				Gets the object that was included as part of the associated method call. 
			</summary><remarks>
				<p>The EndEventArgs.State property can be used in the calling asynchronous method to make data accessible
				to the handling event.</p>
				<p>This property is useful for making data accessible to the handling event. Since asynchronous methods are "disconnected" (meaning that when one is called, it executes on it's own and returns in the event handler) data that you were using in the code that called the asynchronous method may not be available in the event handler. Simply pass this data in as <i>state</i> when calling the asynchronous method (usually a BeginXXX method) and it is available in the event handler.
				If you do not wish to make an object accessible in the EndXXX event, simple pass in null as <i>state</i>.</p>
			</remarks><value>
				An object containing data passed into the calling asynchronous method.
			</value>
        </member>
        <member name="P:Dart.PowerTCP.Mail.InvokeEventArgs.Exception">
            <summary>
				Gets any exception which occurred during the asynchronous operation.
			</summary><remarks>
				<p>Check this property to tell if an exception occurred during the asynchronous operation. If this property is null, no exception occurred.</p>
				<p>The exception property is useful for checking exceptions and handling them appropriately. For example, if a bad command was sent to the server, a ProtocolException may be thrown. You could check this property to see if it was of type ProtocolException, than handle appropriately.</p>
			</remarks><value>
				If any exception occurred during the asynchronous operation, this property will contain an Exception object describing the exception.
			</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using <b>Ftp.BeginInvoke</b> to issue a command (in this case, CDUP) asynchronously.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"


' Issue CDUP command asynchronously, upon completion the EndInvoke Event will be fired.
Ftp1.BeginInvoke(Dart.PowerTCP.SecureFtp.FtpCommand.ChangeDirUp, Nothing, Nothing)

' Report
Debug.WriteLine("CDUP command sent.")

' When the BeginInvoke operation has completed, the EndInvoke Event will fire.
Private Sub Ftp1_EndInvoke(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureFtp.InvokeEventArgs) Handles Ftp1.EndInvoke

   ' If an error occurred during the asynchronous method, it would 
   ' be returned in the event. Be sure to check for it.
   If e.Exception Is Nothing Then
      Debug.WriteLine("Command issued " + e.Request)
      Debug.WriteLine("Response received " + e.Response.ToString();
   Else
      Debug.WriteLine(e.Exception.Message)
   End If
   
   ' Close the connection
   Ftp1.Close()
End Sub        
<span class="lang">[C#]</span> 
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";


// Issue CDUP command asynchronously, upon completion the EndInvoke Event will be fired.
ftp1.BeginInvoke(Dart.PowerTCP.SecureFtp.FtpCommand.ChangeDirUp, null, null);

// Report
Debug.WriteLine("CDUP command sent.");

// When the BeginInvoke operation has completed, the EndInvoke Event will fire.
private void ftp1_EndInvoke(object sender, Dart.PowerTCP.SecureFtp.InvokeEventArgs e)
{

    // If an error occurred during the asynchronous method, it would 
    // be returned in the event. Be sure to check for it.
    if(e.Exception == null)
    {
        Debug.WriteLine("Command issued " + e.Request);
        Debug.WriteLine("Response received " + e.Response);
    }
    else
    {
        Debug.WriteLine("Error: " + e.Exception.Message);
    }

    // Close the connection
    ftp1.Close();
}     
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="T:Dart.PowerTCP.Mail.InvokeEventHandler">
            <summary>
				Represents the method (event handler) that will be raised when the Object.BeginInvoke operation completes.
			</summary><param name="sender">The source of the event.</param><param name="e">An InvokeEventArgs object that contains the event data.</param><remarks>
				<p>As Microsoft describes in their MSDN documentation, the event model in the .NET Framework is based on having an event delegate that connects an event with its handler. To raise an event, two elements are needed: 
				<ul type="disc">
						<li>A class that holds the event data. This class must derive from the base class <a href="ms-help://MS.MSDNVS/cpref/html/frlrfsystemeventargsclasstopic.htm">EventArgs</a>.</li>
						<li>A delegate that points to a method that provides the response to the event.</li>
					</ul>
				When using the Object.BeginInvoke method, the class that holds the event data is the InvokeEventArgs class. A method must be created with the same signature as the delegate. 
				If you are working within the Visual Studio.NET environment, this can be automatically done for you. See the "Using Events In PowerTCP" topic for more information.
				If you are not working within the Visual Studio.NET environment, you must do this yourself.
				In this example that would mean a method would have to be defined to accept two arguments (an object and a InvokeEventArgs) and return void.
				Once this has been done, the delegate must be "connected" to the handling event. This is done by adding an instance of the delegate to the event (see examples below).</p>
				<p>For more information about event handler delegates, see the "Using Events In PowerTCP" topic.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span>The following example demonstrates how to assign an event handler to an event.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' *** EndInvoke Event ***

' You can either use the AddHandler statement to associate an event with an event handler in your init code
AddHandler Ftp1.EndInvoke, New Dart.PowerTCP.SecureFtp.InvokeEventHandler(AddressOf Ftp1_EndInvoke)

' Or you can use the Handles keyword to associate an event handler with an event
Private Sub Ftp1_EndInvoke(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureFtp.InvokeEventArgs) Handles Ftp1.EndInvoke        
<span class="lang">[C#]</span> 
// EndInvoke event
this.ftp1.EndInvoke += new Dart.PowerTCP.SecureFtp.InvokeEventHandler(this.ftp1_EndInvoke);         
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="T:Dart.PowerTCP.Mail.MailAddress">
            <summary>
				The MailAddress object represents a single email address.
			</summary><remarks>
				<p>When using PowerTCP, email addresses are represented by MailAddress objects. MailAddress
				objects are created by passing an email address into the MailAddress constructor. This can be done
				one of two ways:</p>
				<ol>
					<li>
					<p>Pass in the email address only.</p>
					<code>
MailAddress m = new MailAddress("me@myserver.com");
					</code>
					<p>This will create a MailAddress object and populate the
					MailAddress.Address, MailAddress.Domain, and MailAddress.User properties. 
					The MailAddress.Friendly property will be an empty string, and will have to be explicitly set.</p>
					</li>
					<li>
					<p>Pass in the email and friendly address.</p>
					<code>
MailAddress m = new MailAddress("\"Bob Test\" me@myserver.com");
					</code>
					<p>This will create a MailAddress object and populate the
					MailAddress.Address, MailAddress.Domain, MailAddress.Friendly, and MailAddress.User properties.</p>
					</li>
				</ol>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates the properties of a MailAddress object.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Create a new MailAddress, supplying the address and friendly name.
Dim ma As New MailAddress("""Fake Name"" test@dart.com")
Debug.WriteLine("Network formatted address: " + ma.Address)
Debug.WriteLine("Domain of the address: " + ma.Domain)
Debug.WriteLine("Friendly name: " + ma.Friendly)
Debug.WriteLine("User name: " + ma.User)
Debug.WriteLine("All address data: " + ma.ToString());

' Output
' --------------------------------
' Network formatted address: &lt;test@dart.com&gt;
' Domain of the address: dart.com
' Friendly name: Fake Name
' User name: test
' All address data: "Fake Name" &lt;test@dart.com&gt;
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Create a new MailAddress, supplying the address and friendly name.
MailAddress ma = new MailAddress("\"Fake Name\" test@dart.com");
Debug.WriteLine("Network formatted address: " + ma.Address);
Debug.WriteLine("Domain of the address: " + ma.Domain);
Debug.WriteLine("Friendly name: " + ma.Friendly);
Debug.WriteLine("User name: " + ma.User);
Debug.WriteLine("All address data: " + ma.ToString())

// Output
// --------------------------------
// Network formatted address: &lt;test@dart.com&gt;
// Domain of the address: dart.com
// Friendly name: Fake Name
// User name: test
// All address data: "Fake Name" &lt;test@dart.com&gt;
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MailAddress.#ctor(System.String,System.String,System.String)">
            <summary>
				Initialize a new instance of the MailAddress class supplying detailed email address info.
			</summary><param name="friendlyName">The friendly name of the email address.</param><param name="user">The user name of the email address.</param><param name="domain">The domain of the email address.</param><remarks>
				<p>When using PowerTCP, email addresses are represented by MailAddress objects. A MailAddress object can
				be created using this constructor like so:</p>
<code>
MailAddress m = new MailAddress("John Doe", "john", "blah.com");
</code>
					<p>This will create a MailAddress object and populate the
					MailAddress.Address, MailAddress.Domain, MailAddress.User, and MailAddress.Friendly properties
					with the values passed in.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MailAddress.#ctor(System.String)">
            <summary>
				Initialize a new instance of the MailAddress class, supplying email address only.
			</summary><param name="eMailAddress"> The email address this object is to represent</param><remarks>
				<p>When using PowerTCP, email addresses are represented by MailAddress objects. A MailAddress object can
				be created using this constructor like so:</p>
<code>
MailAddress m = new MailAddress("me@myserver.com");
</code>
					<p>This will create a MailAddress object and populate the
					MailAddress.Address, MailAddress.Domain, and MailAddress.User properties. 
					The MailAddress.Friendly property will be an empty string, and will have to be explicitly set.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates the properties of a MailAddress object.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Create a new MailAddress, supplying the address and friendly name.
Dim ma As New MailAddress("""Fake Name"" test@dart.com")
Debug.WriteLine("Network formatted address: " + ma.Address)
Debug.WriteLine("Domain of the address: " + ma.Domain)
Debug.WriteLine("Friendly name: " + ma.Friendly)
Debug.WriteLine("User name: " + ma.User)
Debug.WriteLine("All address data: " + ma.ToString());

' Output
' --------------------------------
' Network formatted address: &lt;test@dart.com&gt;
' Domain of the address: dart.com
' Friendly name: Fake Name
' User name: test
' All address data: "Fake Name" &lt;test@dart.com&gt;
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Create a new MailAddress, supplying the address and friendly name.
MailAddress ma = new MailAddress("\"Fake Name\" test@dart.com");
Debug.WriteLine("Network formatted address: " + ma.Address);
Debug.WriteLine("Domain of the address: " + ma.Domain);
Debug.WriteLine("Friendly name: " + ma.Friendly);
Debug.WriteLine("User name: " + ma.User);
Debug.WriteLine("All address data: " + ma.ToString())

// Output
// --------------------------------
// Network formatted address: &lt;test@dart.com&gt;
// Domain of the address: dart.com
// Friendly name: Fake Name
// User name: test
// All address data: "Fake Name" &lt;test@dart.com&gt;
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MailAddress.ToString">
            <summary>
				Returns the entire string representing the email address.
			</summary><returns>A string representing the email address.</returns><remarks>
				<p>This property returns whatever value is passed into the constructor, including friendly name
				and comments, if appropriate. If any MailAddress value is set after calling the constructor (such as
				User, Domain, or Friendly), comments are lost.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates the properties of a MailAddress object.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Create a new MailAddress, supplying the address and friendly name.
Dim ma As New MailAddress("""Fake Name"" test@dart.com")
Debug.WriteLine("Network formatted address: " + ma.Address)
Debug.WriteLine("Domain of the address: " + ma.Domain)
Debug.WriteLine("Friendly name: " + ma.Friendly)
Debug.WriteLine("User name: " + ma.User)
Debug.WriteLine("All address data: " + ma.ToString());

' Output
' --------------------------------
' Network formatted address: &lt;test@dart.com&gt;
' Domain of the address: dart.com
' Friendly name: Fake Name
' User name: test
' All address data: "Fake Name" &lt;test@dart.com&gt;
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Create a new MailAddress, supplying the address and friendly name.
MailAddress ma = new MailAddress("\"Fake Name\" test@dart.com");
Debug.WriteLine("Network formatted address: " + ma.Address);
Debug.WriteLine("Domain of the address: " + ma.Domain);
Debug.WriteLine("Friendly name: " + ma.Friendly);
Debug.WriteLine("User name: " + ma.User);
Debug.WriteLine("All address data: " + ma.ToString())

// Output
// --------------------------------
// Network formatted address: &lt;test@dart.com&gt;
// Domain of the address: dart.com
// Friendly name: Fake Name
// User name: test
// All address data: "Fake Name" &lt;test@dart.com&gt;
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MailAddress.GetString">
            <summary>
            Added for .2597. 5-28-04 : We use GetString() to preserve existing word encoding
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MailAddress.CompareTo(System.Object)">
            <summary>
				Compares two MailAddresses based upon their Domain (first) and their User (second).
			</summary><param name="obj">MailAddress to compare with.</param><returns>Negative if less than obj, 0 if equal, and positive if greater than obj.</returns><remarks><p>This method is used by the MailAddress.RemoveDuplicates method</p>
			<p>This method takes O(1) time for MailAddress objects with an Address less than 40 characters in length (taking time proportional to length with longer MailAddress objects), and is speed-optimized to enable high-speed sorting of the MailAddresses collection.</p>
			<p>This compares by domain first, then user.</p>
		</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.MailAddress.ServerResponse">
            <summary>
				Gets the status of the last operation with this MailAddress.
			</summary><value>
				The status of the last operation carried out on this MailAddress.
			</value><remarks>
				<p>After sending email using Smtp.Send or verifiying email with MailAddresses.Verify, this will contain the server's response regarding this MailAddress.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates verifying a list of email addresses.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Create a MailAddresses collection populated with some addresses
Dim ma As New MailAddresses("sales@dart.com,bad@fake.com,support@dart.com")

' Verify the addresses against the specified DNS servers
ma.Verify("206.64.128.5,198.6.1.2,198.6.1.3", 20000)

' Check the response to each address.
Dim m As MailAddress
For Each m In ma
   If m.ServerResponse.Code = 250 Then
      System.Diagnostics.Debug.WriteLine(m.Address + " is OK")
   Else
      System.Diagnostics.Debug.WriteLine(m.Address + " is bad")
   End If
Next
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Create a MailAddresses collection populated with some addresses
MailAddresses ma = new MailAddresses("sales@dart.com,bad@fake.com,support@dart.com");

// Verify the addresses against the specified DNS servers
ma.Verify("206.64.128.5,198.6.1.2,198.6.1.3", 20000);

// Check the response to each address.
foreach(MailAddress m in ma)
   if(m.ServerResponse.Code == 250)
      System.Diagnostics.Debug.WriteLine(m.Address + " is OK");
   else
      System.Diagnostics.Debug.WriteLine(m.Address + " is bad");
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.MailAddress.User">
            <summary>
				Gets or sets the user name contained in this MailAddress object.
			</summary><value>
				The user receiving this email.
			</value><remarks>
				<p>This property is automatically set when the MailAddress object
				is created. For example, if the following code was run,</p>
<code>
MailAddress m = new MailAddress("\"Bob Test\" bob@myserver.com");
</code>
				<p>MailAddress.User would be "bob".</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates the properties of a MailAddress object.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Create a new MailAddress, supplying the address and friendly name.
Dim ma As New MailAddress("""Fake Name"" test@dart.com")
Debug.WriteLine("Network formatted address: " + ma.Address)
Debug.WriteLine("Domain of the address: " + ma.Domain)
Debug.WriteLine("Friendly name: " + ma.Friendly)
Debug.WriteLine("User name: " + ma.User)
Debug.WriteLine("All address data: " + ma.ToString());

' Output
' --------------------------------
' Network formatted address: &lt;test@dart.com&gt;
' Domain of the address: dart.com
' Friendly name: Fake Name
' User name: test
' All address data: "Fake Name" &lt;test@dart.com&gt;
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Create a new MailAddress, supplying the address and friendly name.
MailAddress ma = new MailAddress("\"Fake Name\" test@dart.com");
Debug.WriteLine("Network formatted address: " + ma.Address);
Debug.WriteLine("Domain of the address: " + ma.Domain);
Debug.WriteLine("Friendly name: " + ma.Friendly);
Debug.WriteLine("User name: " + ma.User);
Debug.WriteLine("All address data: " + ma.ToString())

// Output
// --------------------------------
// Network formatted address: &lt;test@dart.com&gt;
// Domain of the address: dart.com
// Friendly name: Fake Name
// User name: test
// All address data: "Fake Name" &lt;test@dart.com&gt;
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.MailAddress.Domain">
            <summary>
				Gets or sets the domain name contained in this MailAddress object.
			</summary><value>
				The domain of the server receiving this email.
			</value><remarks>
				<p>This property is automatically set when the MailAddress object
				is created. For example, if the following code was run,</p>
<code>
MailAddress m = new MailAddress("\"Bob Test\" bob@myserver.com");
</code>
				<p>MailAddress.Domain would be "myserver.com".</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates the properties of a MailAddress object.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Create a new MailAddress, supplying the address and friendly name.
Dim ma As New MailAddress("""Fake Name"" test@dart.com")
Debug.WriteLine("Network formatted address: " + ma.Address)
Debug.WriteLine("Domain of the address: " + ma.Domain)
Debug.WriteLine("Friendly name: " + ma.Friendly)
Debug.WriteLine("User name: " + ma.User)
Debug.WriteLine("All address data: " + ma.ToString());

' Output
' --------------------------------
' Network formatted address: &lt;test@dart.com&gt;
' Domain of the address: dart.com
' Friendly name: Fake Name
' User name: test
' All address data: "Fake Name" &lt;test@dart.com&gt;
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Create a new MailAddress, supplying the address and friendly name.
MailAddress ma = new MailAddress("\"Fake Name\" test@dart.com");
Debug.WriteLine("Network formatted address: " + ma.Address);
Debug.WriteLine("Domain of the address: " + ma.Domain);
Debug.WriteLine("Friendly name: " + ma.Friendly);
Debug.WriteLine("User name: " + ma.User);
Debug.WriteLine("All address data: " + ma.ToString())

// Output
// --------------------------------
// Network formatted address: &lt;test@dart.com&gt;
// Domain of the address: dart.com
// Friendly name: Fake Name
// User name: test
// All address data: "Fake Name" &lt;test@dart.com&gt;
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.MailAddress.Friendly">
            <summary>
				Gets or sets the friendly name contained in this MailAddress object.
			</summary><value>
				The friendly name for the user receiving this email.
			</value><remarks>
				<p>This property is automatically set when the MailAddress object
				is created (when the string passed into the MailAddress constructor
				represents both the email address and friendly name). For example, if the following code was run,</p>
<code>
MailAddress m = new MailAddress("\"Bob Test\" bob@myserver.com");
</code>
				<p>MailAddress.Friendly would be "Bob Test".</p>
				<p>This property is optional.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates the properties of a MailAddress object.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Create a new MailAddress, supplying the address and friendly name.
Dim ma As New MailAddress("""Fake Name"" test@dart.com")
Debug.WriteLine("Network formatted address: " + ma.Address)
Debug.WriteLine("Domain of the address: " + ma.Domain)
Debug.WriteLine("Friendly name: " + ma.Friendly)
Debug.WriteLine("User name: " + ma.User)
Debug.WriteLine("All address data: " + ma.ToString());

' Output
' --------------------------------
' Network formatted address: &lt;test@dart.com&gt;
' Domain of the address: dart.com
' Friendly name: Fake Name
' User name: test
' All address data: "Fake Name" &lt;test@dart.com&gt;
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Create a new MailAddress, supplying the address and friendly name.
MailAddress ma = new MailAddress("\"Fake Name\" test@dart.com");
Debug.WriteLine("Network formatted address: " + ma.Address);
Debug.WriteLine("Domain of the address: " + ma.Domain);
Debug.WriteLine("Friendly name: " + ma.Friendly);
Debug.WriteLine("User name: " + ma.User);
Debug.WriteLine("All address data: " + ma.ToString())

// Output
// --------------------------------
// Network formatted address: &lt;test@dart.com&gt;
// Domain of the address: dart.com
// Friendly name: Fake Name
// User name: test
// All address data: "Fake Name" &lt;test@dart.com&gt;
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.MailAddress.Address">
            <summary>
				Gets this email in network format.
			</summary><value>
				The network format of the email address being sent to.
			</value><remarks>
				<p>This returns the email address in brackets, without the friendly name. For example, if the following code was run,</p>
<code>
MailAddress m = new MailAddress("\"Bob Test\" bob@myserver.com");
</code>
				<p>MailAddress.Address would be "&lt;bob@myserver.com&gt;".</p>
				<p>If the original email address passed into the constructor could not be parsed, this property will return that entire value.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates the properties of a MailAddress object.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Create a new MailAddress, supplying the address and friendly name.
Dim ma As New MailAddress("""Fake Name"" test@dart.com")
Debug.WriteLine("Network formatted address: " + ma.Address)
Debug.WriteLine("Domain of the address: " + ma.Domain)
Debug.WriteLine("Friendly name: " + ma.Friendly)
Debug.WriteLine("User name: " + ma.User)
Debug.WriteLine("All address data: " + ma.ToString());

' Output
' --------------------------------
' Network formatted address: &lt;test@dart.com&gt;
' Domain of the address: dart.com
' Friendly name: Fake Name
' User name: test
' All address data: "Fake Name" &lt;test@dart.com&gt;
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Create a new MailAddress, supplying the address and friendly name.
MailAddress ma = new MailAddress("\"Fake Name\" test@dart.com");
Debug.WriteLine("Network formatted address: " + ma.Address);
Debug.WriteLine("Domain of the address: " + ma.Domain);
Debug.WriteLine("Friendly name: " + ma.Friendly);
Debug.WriteLine("User name: " + ma.User);
Debug.WriteLine("All address data: " + ma.ToString())

// Output
// --------------------------------
// Network formatted address: &lt;test@dart.com&gt;
// Domain of the address: dart.com
// Friendly name: Fake Name
// User name: test
// All address data: "Fake Name" &lt;test@dart.com&gt;
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="T:Dart.PowerTCP.Mail.MailAddresses">
            <summary>
				A collection of MailAddress objects.
			</summary><remarks>
				<p>The MailAddresses class represents a collection of MailAddress objects. To add a MailAddress
				to the MailAddresses collection either pass the strings representing the email addresses
				into the MailAddresses constructor, or use one of the MailAddresses.Add methods. Other advanced
				functionality of the MailAddresses object include MailAddresses.RemoveDuplicates, which automatically
				removes any duplicat addresses, MailAddresses.Verify, which verifies the validity of addresses, and
				MailAddresses.SplitByDomain, which returns multiple MailAddresses (contained in an ArrayList) containing
				addresses with the same domain.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates the functionality of the MailAddresses collection.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Create a MailAddresses collection
Dim ma As New MailAddresses()

' Add a single email address
ma.Add(New MailAddress("address1@test.com"))

' Add a comma delimited list of email addresses.
ma.Add("address2@test.com,address3@test.com")

' Add an otherwise-delimted list of email addresses.
ma.Add("address2@test.com&amp;address3@test.com", "&amp;")

' Remove an email address
ma.Remove("address1@test.com")

' Remove any duplicate email addresses
ma.RemoveDuplicates()

System.Diagnostics.Debug.WriteLine(ma.ToString())

' Output
' ------------------
' &lt;address2@test.com&gt;,&lt;address3@test.com&gt;

' Add some more email addresses
ma.Add("mail1@other.com,mail2@other.com")

' Split the addresses by domain
Dim marray() As MailAddresses = ma.SplitByDomain()

Dim m As MailAddresses
For Each m In marray
   System.Diagnostics.Debug.WriteLine(m.ToString())
Next

' Output
' -----------------
' &lt;mail1@other.com&gt;,&lt;mail2@other.com&gt;
' &lt;address2@test.com&gt;,&lt;address3@test.com&gt;
'
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Create a MailAddresses collection
MailAddresses ma = new MailAddresses();

// Add a single email address
ma.Add(new MailAddress("address1@test.com"));

// Add a comma delimited list of email addresses.
ma.Add("address2@test.com,address3@test.com");

// Add an otherwise-delimted list of email addresses.
ma.Add("address2@test.com&amp;address3@test.com", "&amp;");

// Remove an email address
ma.Remove("address1@test.com");

// Remove any duplicate email addresses
ma.RemoveDuplicates();

System.Diagnostics.Debug.WriteLine(ma.ToString());

// Output
// ------------------
// &lt;address2@test.com&gt;,&lt;address3@test.com&gt;

// Add some more email addresses
ma.Add("mail1@other.com,mail2@other.com");

// Split the addresses by domain
MailAddresses[] marray = ma.SplitByDomain();
foreach(MailAddresses m in marray)
   System.Diagnostics.Debug.WriteLine(m.ToString());

// Output
// -----------------
// &lt;mail1@other.com&gt;,&lt;mail2@other.com&gt;
// &lt;address2@test.com&gt;,&lt;address3@test.com&gt;
//
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MailAddresses.#ctor">
            <summary>
            Default Constructor for the MailAddresses Class
            </summary>
            	/// <summary>
				A collection of MailAddress objects.
			</summary><remarks>
				<p>The MailAddresses class represents a collection of MailAddress objects. To add a MailAddress
				to the MailAddresses collection either pass the strings representing the email addresses
				into the MailAddresses constructor, or use one of the MailAddresses.Add methods. Other advanced
				functionality of the MailAddresses object include MailAddresses.RemoveDuplicates, which automatically
				removes any duplicat addresses, MailAddresses.Verify, which verifies the validity of addresses, and
				MailAddresses.SplitByDomain, which returns multiple MailAddresses (contained in an ArrayList) containing
				addresses with the same domain.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates the functionality of the MailAddresses collection.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Create a MailAddresses collection
Dim ma As New MailAddresses()

' Add a single email address
ma.Add(New MailAddress("address1@test.com"))

' Add a comma delimited list of email addresses.
ma.Add("address2@test.com,address3@test.com")

' Add an otherwise-delimted list of email addresses.
ma.Add("address2@test.com&amp;address3@test.com", "&amp;")

' Remove an email address
ma.Remove("address1@test.com")

' Remove any duplicate email addresses
ma.RemoveDuplicates()

System.Diagnostics.Debug.WriteLine(ma.ToString())

' Output
' ------------------
' &lt;address2@test.com&gt;,&lt;address3@test.com&gt;

' Add some more email addresses
ma.Add("mail1@other.com,mail2@other.com")

' Split the addresses by domain
Dim marray() As MailAddresses = ma.SplitByDomain()

Dim m As MailAddresses
For Each m In marray
   System.Diagnostics.Debug.WriteLine(m.ToString())
Next

' Output
' -----------------
' &lt;mail1@other.com&gt;,&lt;mail2@other.com&gt;
' &lt;address2@test.com&gt;,&lt;address3@test.com&gt;
'
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Create a MailAddresses collection
MailAddresses ma = new MailAddresses();

// Add a single email address
ma.Add(new MailAddress("address1@test.com"));

// Add a comma delimited list of email addresses.
ma.Add("address2@test.com,address3@test.com");

// Add an otherwise-delimted list of email addresses.
ma.Add("address2@test.com&amp;address3@test.com", "&amp;");

// Remove an email address
ma.Remove("address1@test.com");

// Remove any duplicate email addresses
ma.RemoveDuplicates();

System.Diagnostics.Debug.WriteLine(ma.ToString());

// Output
// ------------------
// &lt;address2@test.com&gt;,&lt;address3@test.com&gt;

// Add some more email addresses
ma.Add("mail1@other.com,mail2@other.com");

// Split the addresses by domain
MailAddresses[] marray = ma.SplitByDomain();
foreach(MailAddresses m in marray)
   System.Diagnostics.Debug.WriteLine(m.ToString());

// Output
// -----------------
// &lt;mail1@other.com&gt;,&lt;mail2@other.com&gt;
// &lt;address2@test.com&gt;,&lt;address3@test.com&gt;
//
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MailAddresses.#ctor(System.String,System.String)">
            <summary>
				Initializes a new instance of the MailAddresses object with multiple address strings, delimited by the second parameter.
			</summary><remarks>
				<p>This constuctor initializes the MailAddresses object with a series of delimited
				RFC822 formatted strings. For example:</p>
				<code>
sourcestring = "address1@server.com&amp;address2@server.com"
delimiter = "&amp;"
				</code>
				<p>The parameters above would result in a MailAddresses collection containing two MailAddress objects
				(for "address1@server.com" and "address2@server.com").</p>
				<p>The MailAddresses passed must contain all comments in between quotes.  The area outside the quotes is delimited by the given <i>Delimiter</i>, 
				and everything outside the quotes is the MailAddress.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MailAddresses.#ctor(System.String)">
            <summary>
				Initializes a new instance of the MailAddresses object with a comma-delimited string of email addresses.
			</summary><remarks>
				<p>This constructor initializes the MailAddresses object with a string of email addresses delimited by commas.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates verifying a list of email addresses.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Create a MailAddresses collection populated with some addresses
Dim ma As New MailAddresses("sales@dart.com,bad@fake.com,support@dart.com")

' Verify the addresses against the specified DNS servers
ma.Verify("206.64.128.5,198.6.1.2,198.6.1.3", 20000)

' Check the response to each address.
Dim m As MailAddress
For Each m In ma
   If m.ServerResponse.Code = 250 Then
      System.Diagnostics.Debug.WriteLine(m.Address + " is OK")
   Else
      System.Diagnostics.Debug.WriteLine(m.Address + " is bad")
   End If
Next
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Create a MailAddresses collection populated with some addresses
MailAddresses ma = new MailAddresses("sales@dart.com,bad@fake.com,support@dart.com");

// Verify the addresses against the specified DNS servers
ma.Verify("206.64.128.5,198.6.1.2,198.6.1.3", 20000);

// Check the response to each address.
foreach(MailAddress m in ma)
   if(m.ServerResponse.Code == 250)
      System.Diagnostics.Debug.WriteLine(m.Address + " is OK");
   else
      System.Diagnostics.Debug.WriteLine(m.Address + " is bad");
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MailAddresses.Add(System.Object)">
            <overloads>Adds a MailAddress object to the MailAddresses collection.</overloads><summary>
				Always throws a NotSupportedException.
			</summary><param name="mustBeAddress">Non-MailAddress objects are not supported</param>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates the functionality of the MailAddresses collection.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Create a MailAddresses collection
Dim ma As New MailAddresses()

' Add a single email address
ma.Add(New MailAddress("address1@test.com"))

' Add a comma delimited list of email addresses.
ma.Add("address2@test.com,address3@test.com")

' Add an otherwise-delimted list of email addresses.
ma.Add("address2@test.com&amp;address3@test.com", "&amp;")

' Remove an email address
ma.Remove("address1@test.com")

' Remove any duplicate email addresses
ma.RemoveDuplicates()

System.Diagnostics.Debug.WriteLine(ma.ToString())

' Output
' ------------------
' &lt;address2@test.com&gt;,&lt;address3@test.com&gt;

' Add some more email addresses
ma.Add("mail1@other.com,mail2@other.com")

' Split the addresses by domain
Dim marray() As MailAddresses = ma.SplitByDomain()

Dim m As MailAddresses
For Each m In marray
   System.Diagnostics.Debug.WriteLine(m.ToString())
Next

' Output
' -----------------
' &lt;mail1@other.com&gt;,&lt;mail2@other.com&gt;
' &lt;address2@test.com&gt;,&lt;address3@test.com&gt;
'
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Create a MailAddresses collection
MailAddresses ma = new MailAddresses();

// Add a single email address
ma.Add(new MailAddress("address1@test.com"));

// Add a comma delimited list of email addresses.
ma.Add("address2@test.com,address3@test.com");

// Add an otherwise-delimted list of email addresses.
ma.Add("address2@test.com&amp;address3@test.com", "&amp;");

// Remove an email address
ma.Remove("address1@test.com");

// Remove any duplicate email addresses
ma.RemoveDuplicates();

System.Diagnostics.Debug.WriteLine(ma.ToString());

// Output
// ------------------
// &lt;address2@test.com&gt;,&lt;address3@test.com&gt;

// Add some more email addresses
ma.Add("mail1@other.com,mail2@other.com");

// Split the addresses by domain
MailAddresses[] marray = ma.SplitByDomain();
foreach(MailAddresses m in marray)
   System.Diagnostics.Debug.WriteLine(m.ToString());

// Output
// -----------------
// &lt;mail1@other.com&gt;,&lt;mail2@other.com&gt;
// &lt;address2@test.com&gt;,&lt;address3@test.com&gt;
//
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MailAddresses.Add(Dart.PowerTCP.Mail.MailAddress)">
            <summary>
				Adds a MailAddress object to the MailAddresses collection.
			</summary><param name="Address">A single MailAddress object</param><remarks>
				<p>Standard usage of this overload would involve creating a MailAddress
				object, setting the properties of the MailAddress object (if desired)
				and adding the MailAddress object to the MailAddress collection.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates the functionality of the MailAddresses collection.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Create a MailAddresses collection
Dim ma As New MailAddresses()

' Add a single email address
ma.Add(New MailAddress("address1@test.com"))

' Add a comma delimited list of email addresses.
ma.Add("address2@test.com,address3@test.com")

' Add an otherwise-delimted list of email addresses.
ma.Add("address2@test.com&amp;address3@test.com", "&amp;")

' Remove an email address
ma.Remove("address1@test.com")

' Remove any duplicate email addresses
ma.RemoveDuplicates()

System.Diagnostics.Debug.WriteLine(ma.ToString())

' Output
' ------------------
' &lt;address2@test.com&gt;,&lt;address3@test.com&gt;

' Add some more email addresses
ma.Add("mail1@other.com,mail2@other.com")

' Split the addresses by domain
Dim marray() As MailAddresses = ma.SplitByDomain()

Dim m As MailAddresses
For Each m In marray
   System.Diagnostics.Debug.WriteLine(m.ToString())
Next

' Output
' -----------------
' &lt;mail1@other.com&gt;,&lt;mail2@other.com&gt;
' &lt;address2@test.com&gt;,&lt;address3@test.com&gt;
'
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Create a MailAddresses collection
MailAddresses ma = new MailAddresses();

// Add a single email address
ma.Add(new MailAddress("address1@test.com"));

// Add a comma delimited list of email addresses.
ma.Add("address2@test.com,address3@test.com");

// Add an otherwise-delimted list of email addresses.
ma.Add("address2@test.com&amp;address3@test.com", "&amp;");

// Remove an email address
ma.Remove("address1@test.com");

// Remove any duplicate email addresses
ma.RemoveDuplicates();

System.Diagnostics.Debug.WriteLine(ma.ToString());

// Output
// ------------------
// &lt;address2@test.com&gt;,&lt;address3@test.com&gt;

// Add some more email addresses
ma.Add("mail1@other.com,mail2@other.com");

// Split the addresses by domain
MailAddresses[] marray = ma.SplitByDomain();
foreach(MailAddresses m in marray)
   System.Diagnostics.Debug.WriteLine(m.ToString());

// Output
// -----------------
// &lt;mail1@other.com&gt;,&lt;mail2@other.com&gt;
// &lt;address2@test.com&gt;,&lt;address3@test.com&gt;
//
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MailAddresses.Add(System.Byte[])">
            <summary>
            This is the default add method for the MailAddresses class.
            </summary>
            <param name="NewMailAddress">The MailAddress being added</param>
            <remarks> This should be used instead of the default object add.  
            Unspecified objects will not work properly when added. 
            </remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MailAddresses.Add(System.String,System.String)">
            <summary>
				Adds a set of email MailAddresses.
			</summary><param name="SourceString">
				An RFC822 formatted string of delimited email MailAddresses.
			</param><param name="Delimiter">
				Any string delimiter used to split the message.
			</param><returns>An ArrayList of strings that were not accepted.</returns><remarks>
				<p>This constuctor initializes the MailAddresses object with a series of delimited
				email address formatted strings. For example:</p>
				<code>
sourcestring = "address1@server.com&amp;address2@server.com"
delimiter = "&amp;"
				</code>
				<p>The parameters above would result in a MailAddresses collection containing two MailAddress objects
				(for "address1@server.com" and "address2@server.com"). If the string includes email addresses that were not
				accepted, they would be returned in an ArrayList by the method.</p>
				<p>The MailAddresses passed must contain all comments in between quotes.  The area outside the quotes is delimited by the given <i>Delimiter</i>, 
				and everything outside the quotes is the MailAddress.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates the functionality of the MailAddresses collection.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Create a MailAddresses collection
Dim ma As New MailAddresses()

' Add a single email address
ma.Add(New MailAddress("address1@test.com"))

' Add a comma delimited list of email addresses.
ma.Add("address2@test.com,address3@test.com")

' Add an otherwise-delimted list of email addresses.
ma.Add("address2@test.com&amp;address3@test.com", "&amp;")

' Remove an email address
ma.Remove("address1@test.com")

' Remove any duplicate email addresses
ma.RemoveDuplicates()

System.Diagnostics.Debug.WriteLine(ma.ToString())

' Output
' ------------------
' &lt;address2@test.com&gt;,&lt;address3@test.com&gt;

' Add some more email addresses
ma.Add("mail1@other.com,mail2@other.com")

' Split the addresses by domain
Dim marray() As MailAddresses = ma.SplitByDomain()

Dim m As MailAddresses
For Each m In marray
   System.Diagnostics.Debug.WriteLine(m.ToString())
Next

' Output
' -----------------
' &lt;mail1@other.com&gt;,&lt;mail2@other.com&gt;
' &lt;address2@test.com&gt;,&lt;address3@test.com&gt;
'
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Create a MailAddresses collection
MailAddresses ma = new MailAddresses();

// Add a single email address
ma.Add(new MailAddress("address1@test.com"));

// Add a comma delimited list of email addresses.
ma.Add("address2@test.com,address3@test.com");

// Add an otherwise-delimted list of email addresses.
ma.Add("address2@test.com&amp;address3@test.com", "&amp;");

// Remove an email address
ma.Remove("address1@test.com");

// Remove any duplicate email addresses
ma.RemoveDuplicates();

System.Diagnostics.Debug.WriteLine(ma.ToString());

// Output
// ------------------
// &lt;address2@test.com&gt;,&lt;address3@test.com&gt;

// Add some more email addresses
ma.Add("mail1@other.com,mail2@other.com");

// Split the addresses by domain
MailAddresses[] marray = ma.SplitByDomain();
foreach(MailAddresses m in marray)
   System.Diagnostics.Debug.WriteLine(m.ToString());

// Output
// -----------------
// &lt;mail1@other.com&gt;,&lt;mail2@other.com&gt;
// &lt;address2@test.com&gt;,&lt;address3@test.com&gt;
//
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MailAddresses.Add(System.String)">
            <summary>
				Adds a set of email MailAddresses.
			</summary><param name="SourceString">
				An RFC822 formatted string of email MailAddresses.
			</param><remarks>
				<p>This can be set part by part or on its own.</p>
				<p>The MailAddresses passed must contain all comments in between quotes.  The area outside the quotes is delimited by commas, 
				and everything outside the quotes is the MailAddress.  
				The MailAddresses are formatted as User@Domain.  Domain can have multiple '@'s.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates the functionality of the MailAddresses collection.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Create a MailAddresses collection
Dim ma As New MailAddresses()

' Add a single email address
ma.Add(New MailAddress("address1@test.com"))

' Add a comma delimited list of email addresses.
ma.Add("address2@test.com,address3@test.com")

' Add an otherwise-delimted list of email addresses.
ma.Add("address2@test.com&amp;address3@test.com", "&amp;")

' Remove an email address
ma.Remove("address1@test.com")

' Remove any duplicate email addresses
ma.RemoveDuplicates()

System.Diagnostics.Debug.WriteLine(ma.ToString())

' Output
' ------------------
' &lt;address2@test.com&gt;,&lt;address3@test.com&gt;

' Add some more email addresses
ma.Add("mail1@other.com,mail2@other.com")

' Split the addresses by domain
Dim marray() As MailAddresses = ma.SplitByDomain()

Dim m As MailAddresses
For Each m In marray
   System.Diagnostics.Debug.WriteLine(m.ToString())
Next

' Output
' -----------------
' &lt;mail1@other.com&gt;,&lt;mail2@other.com&gt;
' &lt;address2@test.com&gt;,&lt;address3@test.com&gt;
'
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Create a MailAddresses collection
MailAddresses ma = new MailAddresses();

// Add a single email address
ma.Add(new MailAddress("address1@test.com"));

// Add a comma delimited list of email addresses.
ma.Add("address2@test.com,address3@test.com");

// Add an otherwise-delimted list of email addresses.
ma.Add("address2@test.com&amp;address3@test.com", "&amp;");

// Remove an email address
ma.Remove("address1@test.com");

// Remove any duplicate email addresses
ma.RemoveDuplicates();

System.Diagnostics.Debug.WriteLine(ma.ToString());

// Output
// ------------------
// &lt;address2@test.com&gt;,&lt;address3@test.com&gt;

// Add some more email addresses
ma.Add("mail1@other.com,mail2@other.com");

// Split the addresses by domain
MailAddresses[] marray = ma.SplitByDomain();
foreach(MailAddresses m in marray)
   System.Diagnostics.Debug.WriteLine(m.ToString());

// Output
// -----------------
// &lt;mail1@other.com&gt;,&lt;mail2@other.com&gt;
// &lt;address2@test.com&gt;,&lt;address3@test.com&gt;
//
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MailAddresses.Add(Dart.PowerTCP.Mail.MailAddresses)">
            <summary>
				Adds a collection of MailAddresses to the MailAddresses collection.
			</summary><param name="InputList">The MailAddress being added</param><remarks> 
				<p>Use this method to add a collection of MailAddress objects to the
				MailAddresses collection.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates the functionality of the MailAddresses collection.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Create a MailAddresses collection
Dim ma As New MailAddresses()

' Add a single email address
ma.Add(New MailAddress("address1@test.com"))

' Add a comma delimited list of email addresses.
ma.Add("address2@test.com,address3@test.com")

' Add an otherwise-delimted list of email addresses.
ma.Add("address2@test.com&amp;address3@test.com", "&amp;")

' Remove an email address
ma.Remove("address1@test.com")

' Remove any duplicate email addresses
ma.RemoveDuplicates()

System.Diagnostics.Debug.WriteLine(ma.ToString())

' Output
' ------------------
' &lt;address2@test.com&gt;,&lt;address3@test.com&gt;

' Add some more email addresses
ma.Add("mail1@other.com,mail2@other.com")

' Split the addresses by domain
Dim marray() As MailAddresses = ma.SplitByDomain()

Dim m As MailAddresses
For Each m In marray
   System.Diagnostics.Debug.WriteLine(m.ToString())
Next

' Output
' -----------------
' &lt;mail1@other.com&gt;,&lt;mail2@other.com&gt;
' &lt;address2@test.com&gt;,&lt;address3@test.com&gt;
'
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Create a MailAddresses collection
MailAddresses ma = new MailAddresses();

// Add a single email address
ma.Add(new MailAddress("address1@test.com"));

// Add a comma delimited list of email addresses.
ma.Add("address2@test.com,address3@test.com");

// Add an otherwise-delimted list of email addresses.
ma.Add("address2@test.com&amp;address3@test.com", "&amp;");

// Remove an email address
ma.Remove("address1@test.com");

// Remove any duplicate email addresses
ma.RemoveDuplicates();

System.Diagnostics.Debug.WriteLine(ma.ToString());

// Output
// ------------------
// &lt;address2@test.com&gt;,&lt;address3@test.com&gt;

// Add some more email addresses
ma.Add("mail1@other.com,mail2@other.com");

// Split the addresses by domain
MailAddresses[] marray = ma.SplitByDomain();
foreach(MailAddresses m in marray)
   System.Diagnostics.Debug.WriteLine(m.ToString());

// Output
// -----------------
// &lt;mail1@other.com&gt;,&lt;mail2@other.com&gt;
// &lt;address2@test.com&gt;,&lt;address3@test.com&gt;
//
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MailAddresses.ToString">
            <summary>
				Returns a string representing network-formatted, comma-delimited list of MailAddress objects.
			</summary><returns>A string representing network-formatted comma-delimited list of MailAddress objects.</returns><remarks><p>Use this method to get a concatenated list of all email addresses (delimited by commas) represented by
			the MailAddress objects in the MailAddresses collection.</p></remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates the functionality of the MailAddresses collection.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Create a MailAddresses collection
Dim ma As New MailAddresses()

' Add a single email address
ma.Add(New MailAddress("address1@test.com"))

' Add a comma delimited list of email addresses.
ma.Add("address2@test.com,address3@test.com")

' Add an otherwise-delimted list of email addresses.
ma.Add("address2@test.com&amp;address3@test.com", "&amp;")

' Remove an email address
ma.Remove("address1@test.com")

' Remove any duplicate email addresses
ma.RemoveDuplicates()

System.Diagnostics.Debug.WriteLine(ma.ToString())

' Output
' ------------------
' &lt;address2@test.com&gt;,&lt;address3@test.com&gt;

' Add some more email addresses
ma.Add("mail1@other.com,mail2@other.com")

' Split the addresses by domain
Dim marray() As MailAddresses = ma.SplitByDomain()

Dim m As MailAddresses
For Each m In marray
   System.Diagnostics.Debug.WriteLine(m.ToString())
Next

' Output
' -----------------
' &lt;mail1@other.com&gt;,&lt;mail2@other.com&gt;
' &lt;address2@test.com&gt;,&lt;address3@test.com&gt;
'
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Create a MailAddresses collection
MailAddresses ma = new MailAddresses();

// Add a single email address
ma.Add(new MailAddress("address1@test.com"));

// Add a comma delimited list of email addresses.
ma.Add("address2@test.com,address3@test.com");

// Add an otherwise-delimted list of email addresses.
ma.Add("address2@test.com&amp;address3@test.com", "&amp;");

// Remove an email address
ma.Remove("address1@test.com");

// Remove any duplicate email addresses
ma.RemoveDuplicates();

System.Diagnostics.Debug.WriteLine(ma.ToString());

// Output
// ------------------
// &lt;address2@test.com&gt;,&lt;address3@test.com&gt;

// Add some more email addresses
ma.Add("mail1@other.com,mail2@other.com");

// Split the addresses by domain
MailAddresses[] marray = ma.SplitByDomain();
foreach(MailAddresses m in marray)
   System.Diagnostics.Debug.WriteLine(m.ToString());

// Output
// -----------------
// &lt;mail1@other.com&gt;,&lt;mail2@other.com&gt;
// &lt;address2@test.com&gt;,&lt;address3@test.com&gt;
//
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MailAddresses.Remove(System.String)">
            <summary>
				Used to remove the specified address.
			</summary><remarks>
				<p>This method removes the MailAddress object corresponding to the specified User@Domain from
				the MailAddresses collection.</p>
			</remarks><returns>
				If a MailAddress object is removed, this returns the MailAddress object. If no MailAddress
				object is removed, this returns null.
			</returns>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates the functionality of the MailAddresses collection.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Create a MailAddresses collection
Dim ma As New MailAddresses()

' Add a single email address
ma.Add(New MailAddress("address1@test.com"))

' Add a comma delimited list of email addresses.
ma.Add("address2@test.com,address3@test.com")

' Add an otherwise-delimted list of email addresses.
ma.Add("address2@test.com&amp;address3@test.com", "&amp;")

' Remove an email address
ma.Remove("address1@test.com")

' Remove any duplicate email addresses
ma.RemoveDuplicates()

System.Diagnostics.Debug.WriteLine(ma.ToString())

' Output
' ------------------
' &lt;address2@test.com&gt;,&lt;address3@test.com&gt;

' Add some more email addresses
ma.Add("mail1@other.com,mail2@other.com")

' Split the addresses by domain
Dim marray() As MailAddresses = ma.SplitByDomain()

Dim m As MailAddresses
For Each m In marray
   System.Diagnostics.Debug.WriteLine(m.ToString())
Next

' Output
' -----------------
' &lt;mail1@other.com&gt;,&lt;mail2@other.com&gt;
' &lt;address2@test.com&gt;,&lt;address3@test.com&gt;
'
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Create a MailAddresses collection
MailAddresses ma = new MailAddresses();

// Add a single email address
ma.Add(new MailAddress("address1@test.com"));

// Add a comma delimited list of email addresses.
ma.Add("address2@test.com,address3@test.com");

// Add an otherwise-delimted list of email addresses.
ma.Add("address2@test.com&amp;address3@test.com", "&amp;");

// Remove an email address
ma.Remove("address1@test.com");

// Remove any duplicate email addresses
ma.RemoveDuplicates();

System.Diagnostics.Debug.WriteLine(ma.ToString());

// Output
// ------------------
// &lt;address2@test.com&gt;,&lt;address3@test.com&gt;

// Add some more email addresses
ma.Add("mail1@other.com,mail2@other.com");

// Split the addresses by domain
MailAddresses[] marray = ma.SplitByDomain();
foreach(MailAddresses m in marray)
   System.Diagnostics.Debug.WriteLine(m.ToString());

// Output
// -----------------
// &lt;mail1@other.com&gt;,&lt;mail2@other.com&gt;
// &lt;address2@test.com&gt;,&lt;address3@test.com&gt;
//
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MailAddresses.RemoveDuplicates">
            <summary>
				Removes all duplicate MailAddresses, based on their Compare function.
			</summary><remarks>
				<p>This method removes all duplicate MailAddresses with duplicate User@Domains.
					This method is useful for applications such as bulk mailers, which may maintain extensive
					mailing lists, to help eliminate sending multiple times to the same address.
				</p>
				<p>
					This method takes theta(nlog(n)) time and includes a sorting operation.
				</p>
			</remarks><returns>
			
			</returns>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates the functionality of the MailAddresses collection.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Create a MailAddresses collection
Dim ma As New MailAddresses()

' Add a single email address
ma.Add(New MailAddress("address1@test.com"))

' Add a comma delimited list of email addresses.
ma.Add("address2@test.com,address3@test.com")

' Add an otherwise-delimted list of email addresses.
ma.Add("address2@test.com&amp;address3@test.com", "&amp;")

' Remove an email address
ma.Remove("address1@test.com")

' Remove any duplicate email addresses
ma.RemoveDuplicates()

System.Diagnostics.Debug.WriteLine(ma.ToString())

' Output
' ------------------
' &lt;address2@test.com&gt;,&lt;address3@test.com&gt;

' Add some more email addresses
ma.Add("mail1@other.com,mail2@other.com")

' Split the addresses by domain
Dim marray() As MailAddresses = ma.SplitByDomain()

Dim m As MailAddresses
For Each m In marray
   System.Diagnostics.Debug.WriteLine(m.ToString())
Next

' Output
' -----------------
' &lt;mail1@other.com&gt;,&lt;mail2@other.com&gt;
' &lt;address2@test.com&gt;,&lt;address3@test.com&gt;
'
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Create a MailAddresses collection
MailAddresses ma = new MailAddresses();

// Add a single email address
ma.Add(new MailAddress("address1@test.com"));

// Add a comma delimited list of email addresses.
ma.Add("address2@test.com,address3@test.com");

// Add an otherwise-delimted list of email addresses.
ma.Add("address2@test.com&amp;address3@test.com", "&amp;");

// Remove an email address
ma.Remove("address1@test.com");

// Remove any duplicate email addresses
ma.RemoveDuplicates();

System.Diagnostics.Debug.WriteLine(ma.ToString());

// Output
// ------------------
// &lt;address2@test.com&gt;,&lt;address3@test.com&gt;

// Add some more email addresses
ma.Add("mail1@other.com,mail2@other.com");

// Split the addresses by domain
MailAddresses[] marray = ma.SplitByDomain();
foreach(MailAddresses m in marray)
   System.Diagnostics.Debug.WriteLine(m.ToString());

// Output
// -----------------
// &lt;mail1@other.com&gt;,&lt;mail2@other.com&gt;
// &lt;address2@test.com&gt;,&lt;address3@test.com&gt;
//
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MailAddresses.SplitByDomain">
            <summary>
				Splits this collection in a set of MailAddresses by their Domain.
			</summary><remarks>
				<p>This method provides an easy way to seperate addresses by domains.
				For example, if the following addresses were added to a MailAddresses collection:</p>
				<code>
user1@domain1
user2@domain1
user1@domain2
user2@domain2
user3@domain2
				</code>
				<p>...and the MailAddresses.Split method were called, an array of two
				MailAddresses objects would be returned, the first containing two addresses,
				and the second containing three.</p>
				<p>
					This method takes theta(nlog(n)) time, and includes a sorting operation.
				</p>
			</remarks><returns> 
				An array of MailAddresses collections, each being one Domain.
			</returns>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates the functionality of the MailAddresses collection.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Create a MailAddresses collection
Dim ma As New MailAddresses()

' Add a single email address
ma.Add(New MailAddress("address1@test.com"))

' Add a comma delimited list of email addresses.
ma.Add("address2@test.com,address3@test.com")

' Add an otherwise-delimted list of email addresses.
ma.Add("address2@test.com&amp;address3@test.com", "&amp;")

' Remove an email address
ma.Remove("address1@test.com")

' Remove any duplicate email addresses
ma.RemoveDuplicates()

System.Diagnostics.Debug.WriteLine(ma.ToString())

' Output
' ------------------
' &lt;address2@test.com&gt;,&lt;address3@test.com&gt;

' Add some more email addresses
ma.Add("mail1@other.com,mail2@other.com")

' Split the addresses by domain
Dim marray() As MailAddresses = ma.SplitByDomain()

Dim m As MailAddresses
For Each m In marray
   System.Diagnostics.Debug.WriteLine(m.ToString())
Next

' Output
' -----------------
' &lt;mail1@other.com&gt;,&lt;mail2@other.com&gt;
' &lt;address2@test.com&gt;,&lt;address3@test.com&gt;
'
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Create a MailAddresses collection
MailAddresses ma = new MailAddresses();

// Add a single email address
ma.Add(new MailAddress("address1@test.com"));

// Add a comma delimited list of email addresses.
ma.Add("address2@test.com,address3@test.com");

// Add an otherwise-delimted list of email addresses.
ma.Add("address2@test.com&amp;address3@test.com", "&amp;");

// Remove an email address
ma.Remove("address1@test.com");

// Remove any duplicate email addresses
ma.RemoveDuplicates();

System.Diagnostics.Debug.WriteLine(ma.ToString());

// Output
// ------------------
// &lt;address2@test.com&gt;,&lt;address3@test.com&gt;

// Add some more email addresses
ma.Add("mail1@other.com,mail2@other.com");

// Split the addresses by domain
MailAddresses[] marray = ma.SplitByDomain();
foreach(MailAddresses m in marray)
   System.Diagnostics.Debug.WriteLine(m.ToString());

// Output
// -----------------
// &lt;mail1@other.com&gt;,&lt;mail2@other.com&gt;
// &lt;address2@test.com&gt;,&lt;address3@test.com&gt;
//
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MailAddresses.Verify(System.String,System.Int32)">
            <summary>Attempts to verify the vailidity of addresses comained within the
		MailAddresses collection by doing a DNS lookup.</summary><param name="servers">Comma-delimited list of DNS servers to use for verification.</param><param name="timeout">Specifies the amount of time to wait for a response to a query to a DNS server.</param><remarks>
			<p>This method attempts to verify the validity of all MailAddress objects in the
			MailAddresses collection. When this method is called, the MailAddress.ServerResponse property is set from the response from the server. 
			The MailAddress.ServerResponse property is a Response object which encapsulates the response from the server. 
			To see if verification succeeded or failed, check the Response.Code and Response.Text properties.
			If verification succeeded, the response will be formatted as "hostnameCRLFdot.add.res.s".
			If verification did not succeed, the ServerResponse property will return null, so be sure to 
			always check for null before accessing the properties of ServerResponse.
			</p>
		</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates verifying a list of email addresses.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Create a MailAddresses collection populated with some addresses
Dim ma As New MailAddresses("sales@dart.com,bad@fake.com,support@dart.com")

' Verify the addresses against the specified DNS servers
ma.Verify("206.64.128.5,198.6.1.2,198.6.1.3", 20000)

' Check the response to each address.
Dim m As MailAddress
For Each m In ma
   If m.ServerResponse.Code = 250 Then
      System.Diagnostics.Debug.WriteLine(m.Address + " is OK")
   Else
      System.Diagnostics.Debug.WriteLine(m.Address + " is bad")
   End If
Next
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Create a MailAddresses collection populated with some addresses
MailAddresses ma = new MailAddresses("sales@dart.com,bad@fake.com,support@dart.com");

// Verify the addresses against the specified DNS servers
ma.Verify("206.64.128.5,198.6.1.2,198.6.1.3", 20000);

// Check the response to each address.
foreach(MailAddress m in ma)
   if(m.ServerResponse.Code == 250)
      System.Diagnostics.Debug.WriteLine(m.Address + " is OK");
   else
      System.Diagnostics.Debug.WriteLine(m.Address + " is bad");
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.MailAddresses.Item(System.Int32)">
            <summary>
				Gets or sets the element at the specified index.
			</summary><param name="index">The zero-based index of the element to get or set.</param><value>The element at the specified index.</value><exception cref="T:System.ArgumentOutOfRangeException">
				<I>Index</I> is less than zero. 
<P>-or-</P>
				<P>
					<I>Index</I> is equal to or greater than <A href="frlrfsystemcollectionsarraylistclasscounttopic.htm">Count</A>.</P>
			</exception><remarks>
				<p>This property provides the ability to access a specific element in the 
collection by using the following syntax: <CODE class="ce">myCollection[Index]</CODE>.</p>
				<p>
				Note, intellisense may not work on members of objects referenced by using this indexer.
				If you would like intellisense to work, get the object referenced by the indexer into 
				it's own variable.
				</p>
			</remarks>
        </member>
        <member name="T:Dart.PowerTCP.Mail.Mailbox">
            <summary>Represents an IMAP mailbox on the server.</summary><remarks>
				<p>Mailbox objects correspond to mailboxes existing on the server.  This 
			information is reliably updated when initially entering the Mailbox.  All 
			other changes may not be definitive, as other clients can be making changes to the same account.  
			While a mailbox is selected (see Imap.CurrentMailbox), the information will 
			be reliably updated based on notifications from the server (in response to 
			commands or unsolicited updates while in the Idle state).</p>
				<p>Since this object is representing a server-side object, using properties or methods of 
			this class may cause an IMAP command to be sent to the server to update the mailbox. For example,
			setting Mailbox.Name would cause a RENAME command to be sent to the server to rename the mailbox.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates logging into an IMAP server, copying read messages to a Deleted mailbox, and deleting them.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub DoMove()
   ' Demonstrate moving Read messages from "INBOX" to a "Deleted Items" box
   Try
      ' Do synchronous login with AutoList
      Imap1.Login("myServer", "myAccount", "myPassword")

      ' Create Mailbox objects for easier reference
      Dim InboxBox As Mailbox = Imap1.CurrentMailbox ' After Login with AutoList, this will be "INBOX"
      Dim DeletedBox As Mailbox = Imap1.Mailboxes("Deleted Items")

      ' Update Messages Count in "Deleted Items" box
      DeletedBox.Refresh()

      ' Display Messages Count in both boxes
      LabelDisplay.Text = InboxBox.Messages.Count.ToString() + "  " + DeletedBox.Messages.Count.ToString()

      ' Get an array of ImapMessages with just flags
      Dim Messages As ImapMessage() = InboxBox.Get(InboxBox.Messages(0), InboxBox.Messages(InboxBox.Messages.Count-1), ImapMessageSections.Flags)

      ' Copy Read Messages to "Deleted Items" box and Mark them for Deletion
      Dim Msg as ImapMessage
      For Each Msg in Messages
        If Msg.Seen Then 'If Seen flag is set 
           Msg.CopyTo(DeletedBox) ' Copy to "Deleted Items" box
           Msg.Delete = Grue ' Set deleted flag in "INBOX"
        End If
      Next

      'Permanently Remove Copied Messages from "INBOX"
      InboxBox.Purge()

      'Update Messages Count in "Deleted Items"
      DeletedBox.Refresh()

      'Display new Messages Counts
      LabelDisplay.Text = InboxBox.Messages.Count.ToString() + "  " + DeletedBox.Messages.Count.ToString()

      'Logout from server
      Imap1.Logout()
   
   Catch Ex As Exception
       ' Show MessageBox if error occurs
       MessageBox.Show(Ex.Message, "Error Message", MessageBoxButtons.OK, MessageBoxIcon.Error)
   End Try
End Sub
<span class="lang">[C#]</span>
private void DoMove()
{
   //Demonstrate moving Read messages from "INBOX" to a "Deleted Items" box
   try
   {
      //Do synchronous login with AutoList
      imap1.Login("myServer", "myAccount", "myPassword");

      //Create Mailbox objects for easier reference
     Mailbox inboxBox = imap1.CurrentMailbox; //After Login with AutoList, this will be "INBOX"
     Mailbox deletedBox = imap1.Mailboxes["Deleted Items"];

     //Update Messages Count in "Deleted Items" box
     deletedBox.Refresh();

     //Display Messages Count in both boxes
     labelDisplay.Text = inboxBox.Messages.Count.ToString() + "  " + deletedBox.Messages.Count.ToString();

     //Get an array of ImapMessages with just flags
     ImapMessage[] messages = inboxBox.Get(inboxBox.Messages[0], inboxBox.Messages[inboxBox.Messages.Count-1], ImapMessageSections.Flags);

     //Copy Read Messages to "Deleted Items" box and Mark them for Deletion
     foreach (ImapMessage msg in messages)
     {
       if (msg.Seen) //If Seen flag is set
       {
          msg.CopyTo(deletedBox); //Copy to "Deleted Items" box
          msg.Delete = true; //Set deleted flag in "INBOX"
       }
     }

     //Permanently Remove Copied Messages from "INBOX"
     inboxBox.Purge();

     //Update Messages Count in "Deleted Items"
     deletedBox.Refresh();

     //Display new Messages Counts
     labelDisplay.Text = inboxBox.Messages.Count.ToString() + "  " + deletedBox.Messages.Count.ToString();

     //Logout from server
     imap1.Logout();
   }
   catch (Exception ex)
   {
      //Show MessageBox if error occurs
      MessageBox.Show(ex.Message, "Error Message", MessageBoxButtons.OK, MessageBoxIcon.Error);
   }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Mailbox.Dispose">
            <summary>
			Releases all resources associated with the object.
			</summary><remarks>
				<p>The Object.Dispose method abruptly aborts the connection and releases all resources.</p>
				<p>Object.Dispose should ONLY be used to release all resources used by the
object, and the object should not be used subsequently. If an abort is
desired, then Object.Close or Object.Connection.Close if available should be used to terminate
activity and reset the object. The Object cannot be used once Object.Dispose() or Object.Dispose(true) are called.
</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Mailbox.CompareTo(System.Object)">
            <summary>Compares the current instance with another object of the same type.</summary><param name="obj">An object to compare with this instance.</param><returns>
			A 32-bit signed integer that indicates the relative order of the comparands. The return value has these meanings:
			
			<DIV class="tablediv">
					<TABLE class="dtTABLE" cellSpacing="0">
						<TBODY>
							<TR vAlign="top">
								<TH width="50%">Value</TH>
								<TH width="50%">Meaning</TH>
							</TR>
							<TR vAlign="top">
								<TD width="50%">Less than zero</TD>
								<TD width="50%">This instance is less than <I>obj</I>.</TD>
							</TR>
							<TR vAlign="top">
								<TD width="50%">Zero</TD>
								<TD width="50%">This instance is equal to <I>obj</I>.</TD>
							</TR>
							<TR vAlign="top">
								<TD width="50%">Greater than zero</TD>
								<TD width="50%">This instance is greater than 
<I>obj</I>.</TD>
							</TR>
						</TBODY>
					</TABLE>
				</DIV>
			</returns>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Mailbox.Equals(System.Object)">
            <summary>Determines whether the specified Object is equal to the current Object.</summary><returns>true if the specified Object is equal to the current Object; otherwise, false.</returns><param name="obj">The Object to compare with the current Object.</param>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Mailbox.GetHashCode">
            <summary>Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.</summary><returns>A hash code for the current Object.</returns>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Mailbox.Delete">
            <summary>Removes the specified mailbox from the server.</summary><remarks>
				<p>The Mailbox.Delete method removes the specified mailbox from the server.  
				Use of this method causes an IMAP DELETE command to be sent to the server to delete the mailbox
				and causes an implicit destruction of the object, with Mailbox.Dispose called upon 
				successful completion of the operation, rendering the Mailbox unusable. The Mailbox is also
				removed from the MailboxCollection it is a member of.</p>
				<p>See also MailboxCollection.Remove.</p>
			</remarks><returns>An ImapResponse object encapsulating the response from the server.</returns><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception><exception cref="T:System.NullReferenceException">Object reference not set to an instance of an object</exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Mailbox.BeginDelete(System.Object)">
            <summary>Begins to asynchronously remove the specified mailbox from the server.</summary><remarks>
				<p>The Mailbox.BeginDelete method begins to asynchronously remove the specified mailbox from the server.  
				Use of this method causes an IMAP DELETE command to be sent to the server to delete the mailbox
				and causes an implicit destruction of the object, with Mailbox.Dispose called upon 
				successful completion of the operation, rendering the Mailbox unusable. The Mailbox is also
				removed from the MailboxCollection it is a member of.</p>
				<p>The <A href="Dart.PowerTCP.Mail.Imap.EndMailboxRemove.html">Imap.EndMailboxRemove</A> event is raised upon completion of this method.</p>
				<p>See also MailboxCollection.BeginRemove.</p>
			</remarks><param name="state">User state information.</param><returns>An IAsyncResult that represents the asynchronous operation, which could still be pending.</returns><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception><exception cref="T:System.InvalidOperationException">BeginXXX method used without providing an EndXXX event handler.</exception><exception cref="T:System.NullReferenceException">Object reference not set to an instance of an object</exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Mailbox.Unsubscribe">
            <summary>Attempts to unsubscribe the mailbox.</summary><remarks>
				<p>The Mailbox.Unsubscribe method attempts to unsubscribe the mailbox.
				  Use of this method causes the IMAP UNSUBSCRIBE command to be sent to the server
				  to unsubscribe the mailbox.</p>
				<p>To get a list of subscribed mailboxes use</p>
				<pre class="code">
Imap.List("", "%", false);
</pre>
			</remarks><returns>An ImapResponse object encapsulating the response from the server.</returns><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Mailbox.BeginUnsubscribe(System.Object)">
            <summary>Begins to asynchronously unsubscribe the mailbox.</summary><remarks>
				<p>The Mailbox.BeginUnsubscribe method begins to asynchronously unsubscribe the mailbox. Upon completion, the Imap.EndUnsubscribe event
				  is raised.
				  Use of this method causes the IMAP UNSUBSCRIBE command to be sent to the server
				  to unsubscribe the mailbox.</p>
				<p>To get a list of subscribed mailboxes use</p>
				<pre class="code">
Imap.List("", "%", false);
</pre>
			</remarks><param name="state">User state information.</param><returns>An IAsyncResult that represents the asynchronous operation, which could still be pending.</returns><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception><exception cref="T:System.InvalidOperationException">BeginXXX method used without providing an EndXXX event handler.</exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Mailbox.Subscribe">
            <summary>Attempts to subscribe the mailbox.</summary><remarks>
				<p>The Mailbox.Subscribe method attempts to subscribe the mailbox.
				  Use of this method causes the IMAP SUBSCRIBE command to be sent to the server
				  to subscribe the mailbox.</p>
				<p>To get a list of subscribed mailboxes use</p>
				<pre class="code">
Imap.List("", "%", false);
</pre>
			</remarks><returns>An ImapResponse object encapsulating the response from the server.</returns><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Mailbox.BeginSubscribe(System.Object)">
            <summary>Begins to asynchronously subscribe the mailbox.</summary><remarks>
				<p>The Mailbox.BeginSubscribe method begins to asynchronously subscribe the mailbox. Upon completion, the Imap.EndSubscribe event
				  is raised.
				  Use of this method causes the IMAP SUBSCRIBE command to be sent to the server
				  to subscribe the mailbox.</p>
				<p>To get a list of subscribed mailboxes use</p>
				<pre class="code">
Imap.List("", "%", false);
</pre>
			</remarks><param name="state">User state information.</param><returns>An IAsyncResult that represents the asynchronous operation, which could still be pending.</returns><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception><exception cref="T:System.InvalidOperationException">BeginXXX method used without providing an EndXXX event handler.</exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Mailbox.Refresh">
            <summary>Updates all of the mailbox properties to reflect the server version.</summary><remarks>
				<p>
				Any time a method is called to add/delete/modify a mailbox, the command is sent to the
				server to update the server mailbox and the appropriate modifications are made to the 
				local Mailbox object representing the server mailbox.
				The Mailbox.Refresh method updates all the Mailbox properties to reflect the server version.  
				This  method uses the IMAP EXAMINE or REFRESH commands to retrieve the 
				current settings of the mailbox, so calling this method is equivalent to 
				setting the mailbox equal to the current mailbox (i.e. this Mailbox object will be the Imap.CurrentMailbox property after calling this method).
				In addition, this will get information about any new mailbox updates that may have occurred due to another
				user being logged into the account.
				</p>
			</remarks><returns>An ImapResponse object encapsulating the response from the server.</returns><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates appending mailboxes to the server.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub MailboxCollectionTest()
   ' Login
   Imap1.Login(Server, User, Pass)

   ' Create a new mailbox.
   Imap1.Mailboxes.Add("MyNewBox")

   ' Get the Mailbox in a short variable name to reduce typing.
   Dim Box As New Mailbox = Imap1.Mailboxes("MyNewBox")

   ' APPEND some test messages
   Dim i As Integer
   For i = 0 To 5
      ' Dynamically create a new message
      Dim Msg As New MessageStream()
      Msg.To.Add(New MailAddress("me@test.com"))
      Msg.From = New MailAddress("you@test.com")
      Msg.Subject = "test # " + i
      Msg.Text = "Hello, how are you?"

      ' Append the message
      Box.Messages.Add(msg)
   Next

   ' Refresh the mail box so new messages will be included
   Box.Refresh()

   ' Display a list of the message identifiers.
   Debug.WriteLine(Box.Messages.ToString())

   ' Clear all messages
   Box.Messages.Clear()

   ' Logout
   Imap1.Logout()
End Sub
<span class="lang">[C#]</span>
private void MailboxCollectionTest()
{
   // Login
   imap1.Login(Server, User, Pass);

   // Create a new mailbox.
   imap1.Mailboxes.Add("MyNewBox");

   // Get the Mailbox in a short variable name to reduce typing.
   Mailbox box = imap1.Mailboxes["MyNewBox"];

   // APPEND some test messages
   for(int i=0; i &lt; 5; i++)
   {
      // Dynamically create a new message
      MessageStream msg = new MessageStream();
      msg.To.Add(new MailAddress("me@test.com"));
      msg.From = new MailAddress("you@test.com");
      msg.Subject = "test # " + i;
      msg.Text = "Hello, how are you?";

      // Append the message
      box.Messages.Add(msg);
   }

   // Refresh the mail box so new messages will be included
   box.Refresh();

   // Display a list of the message identifiers.
   Debug.WriteLine(box.Messages.ToString());

   // Clear all messages
   box.Messages.Clear();

   // Logout
   imap1.Logout();
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Mailbox.BeginRefresh(System.Object)">
            <summary>Begins to asynchronously update all of the mailbox properties to reflect the server version.</summary><remarks>
				<p>
				Any time a method is called to add/delete/modify a mailbox, the command is sent to the
				server to update the server mailbox and the appropriate modifications are made to the 
				local Mailbox object representing the server mailbox.
				The Mailbox.BeginRefresh method updates all the Mailbox properties to reflect the server version.
				Upon completion of this operation, the Imap.EndRefresh event is raised.
				This  method uses the IMAP EXAMINE or REFRESH commands to retrieve the 
				current settings of the mailbox, so calling this method is equivalent to 
				setting the mailbox equal to the current mailbox (i.e. this Mailbox object will be the Imap.CurrentMailbox property after calling this method).
				In addition, this will get information about any new mailbox updates that may have occurred due to another
				user being logged into the account.
				</p>
			</remarks><param name="state">User state information.</param><returns>An IAsyncResult that represents the asynchronous operation, which could still be pending.</returns><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception><exception cref="T:System.InvalidOperationException">BeginXXX method used without providing an EndXXX event handler.</exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Mailbox.Purge">
            <summary>Deletes all messages marked for deletion.</summary><remarks>
				<p>The Mailbox.Purge method deletes all messages marked for deletion (messages with the \Delete flag set,
				also with ImapMessage.Delete = true).  This method uses the IMAP 
				EXPUNGE command to delete all the marked messages . If you have Imap.AutoPurge set to true
				there is no need to explicitly call Mailbox.Purge as the messages will automatically be expunged.</p>
			</remarks><returns>An ImapResponse object encapsulating the response from the server.</returns><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates logging into an IMAP server, copying read messages to a Deleted mailbox, and deleting them.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub DoMove()
   ' Demonstrate moving Read messages from "INBOX" to a "Deleted Items" box
   Try
      ' Do synchronous login with AutoList
      Imap1.Login("myServer", "myAccount", "myPassword")

      ' Create Mailbox objects for easier reference
      Dim InboxBox As Mailbox = Imap1.CurrentMailbox ' After Login with AutoList, this will be "INBOX"
      Dim DeletedBox As Mailbox = Imap1.Mailboxes("Deleted Items")

      ' Update Messages Count in "Deleted Items" box
      DeletedBox.Refresh()

      ' Display Messages Count in both boxes
      LabelDisplay.Text = InboxBox.Messages.Count.ToString() + "  " + DeletedBox.Messages.Count.ToString()

      ' Get an array of ImapMessages with just flags
      Dim Messages As ImapMessage() = InboxBox.Get(InboxBox.Messages(0), InboxBox.Messages(InboxBox.Messages.Count-1), ImapMessageSections.Flags)

      ' Copy Read Messages to "Deleted Items" box and Mark them for Deletion
      Dim Msg as ImapMessage
      For Each Msg in Messages
        If Msg.Seen Then 'If Seen flag is set 
           Msg.CopyTo(DeletedBox) ' Copy to "Deleted Items" box
           Msg.Delete = Grue ' Set deleted flag in "INBOX"
        End If
      Next

      'Permanently Remove Copied Messages from "INBOX"
      InboxBox.Purge()

      'Update Messages Count in "Deleted Items"
      DeletedBox.Refresh()

      'Display new Messages Counts
      LabelDisplay.Text = InboxBox.Messages.Count.ToString() + "  " + DeletedBox.Messages.Count.ToString()

      'Logout from server
      Imap1.Logout()
   
   Catch Ex As Exception
       ' Show MessageBox if error occurs
       MessageBox.Show(Ex.Message, "Error Message", MessageBoxButtons.OK, MessageBoxIcon.Error)
   End Try
End Sub
<span class="lang">[C#]</span>
private void DoMove()
{
   //Demonstrate moving Read messages from "INBOX" to a "Deleted Items" box
   try
   {
      //Do synchronous login with AutoList
      imap1.Login("myServer", "myAccount", "myPassword");

      //Create Mailbox objects for easier reference
     Mailbox inboxBox = imap1.CurrentMailbox; //After Login with AutoList, this will be "INBOX"
     Mailbox deletedBox = imap1.Mailboxes["Deleted Items"];

     //Update Messages Count in "Deleted Items" box
     deletedBox.Refresh();

     //Display Messages Count in both boxes
     labelDisplay.Text = inboxBox.Messages.Count.ToString() + "  " + deletedBox.Messages.Count.ToString();

     //Get an array of ImapMessages with just flags
     ImapMessage[] messages = inboxBox.Get(inboxBox.Messages[0], inboxBox.Messages[inboxBox.Messages.Count-1], ImapMessageSections.Flags);

     //Copy Read Messages to "Deleted Items" box and Mark them for Deletion
     foreach (ImapMessage msg in messages)
     {
       if (msg.Seen) //If Seen flag is set
       {
          msg.CopyTo(deletedBox); //Copy to "Deleted Items" box
          msg.Delete = true; //Set deleted flag in "INBOX"
       }
     }

     //Permanently Remove Copied Messages from "INBOX"
     inboxBox.Purge();

     //Update Messages Count in "Deleted Items"
     deletedBox.Refresh();

     //Display new Messages Counts
     labelDisplay.Text = inboxBox.Messages.Count.ToString() + "  " + deletedBox.Messages.Count.ToString();

     //Logout from server
     imap1.Logout();
   }
   catch (Exception ex)
   {
      //Show MessageBox if error occurs
      MessageBox.Show(ex.Message, "Error Message", MessageBoxButtons.OK, MessageBoxIcon.Error);
   }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Mailbox.BeginPurge(System.Object)">
            <summary>Begins to asynchronously delete all messages marked for deletion.</summary><remarks>
				<p>The Mailbox.BeginPurge method deletes all messages marked for deletion (messages with the \Delete flag set,
				also with ImapMessage.Delete = true).  Upon completion of this operation, the Imap.EndPurge event is raised.
				This method uses the IMAP 
				EXPUNGE command to delete all the marked messages . If you have Imap.AutoPurge set to true
				there is no need to explicitly call Mailbox.Purge as the messages will automatically be expunged.</p>
			</remarks><param name="state">User state information.</param><returns>An IAsyncResult that represents the asynchronous operation, which could still be pending.</returns><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception><exception cref="T:System.InvalidOperationException">BeginXXX method used without providing an EndXXX event handler.</exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Mailbox.Get">
            <summary>Retrieves all of the messages contained in the mailbox.</summary><remarks>
				<p>The Mailbox.Get method retrieves in full the messages contained in 
				this mailbox and uses the data to populate the Mailbox.Messages collection 
				and its contents.</p>
				<p>This method uses the IMAP FETCH command to retrieve message content. The command 
				uses the UIDs of the messages (ImapMessage.Uid) to retrieve content.</p>
				<p>This method is useful for bulk operations. If you would like to retrieve only a single
				message, use the ImapMessage.Get method of the ImapMessage object.</p>
			</remarks><returns>An array of ImapMessage objects, representing all messages retrieved.</returns><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception><exception cref="T:System.ArgumentOutOfRangeException">index was out of range</exception><exception cref="T:System.IndexOutOfRangeException">index was outside bounds of array</exception><exception cref="T:Dart.PowerTCP.Mail.InvalidParameterTypeException">Collection contains instances of wrong type of object</exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Mailbox.BeginGet(System.Object)">
            <summary>Begins to asynchronously retrieve all of the messages contained in the mailbox.</summary><remarks>
				<p>The Mailbox.BeginGet method retrieves in full the messages contained in 
				this mailbox and uses the data to populate the Mailbox.Messages collection 
				and its contents. Upon completion of this operation the Imap.EndGetMessage event is raised</p>
				<p>This method uses the IMAP FETCH command to retrieve message content. The command 
				uses the UIDs of the messages (ImapMessage.Uid) to retrieve content.</p>
				<p>This method is useful for bulk operations. If you would like to retrieve only a single
				message, use the ImapMessage.BeginGet method of the ImapMessage object.</p>
			</remarks><param name="state">User state information.</param><returns>An IAsyncResult that represents the asynchronous operation, which could still be pending.</returns><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception><exception cref="T:System.InvalidOperationException">BeginXXX method used without providing an EndXXX event handler.</exception><exception cref="T:System.ArgumentOutOfRangeException">index was out of range</exception><exception cref="T:System.IndexOutOfRangeException">index was outside bounds of array</exception><exception cref="T:Dart.PowerTCP.Mail.InvalidParameterTypeException">Collection contains instances of wrong type of object</exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Mailbox.Get(System.Collections.ICollection,Dart.PowerTCP.Mail.ImapMessageSections)">
            <summary>Retrieves a specified portion of the messages contained in the collection <i>messages</i>.</summary><remarks>
				<p>The Mailbox.Get method retrieves some portion of all of the messages contained in <i>messages</i> and 
				uses the data to populate that collection and its contents.  All of the 
				ImapMessage objects contained in <i>messages</i> must be located in the 
				mailbox.  This method uses the IMAP FETCH command to retrieve 
				message content. The command uses the UIDs of the messages in the 
				collection to retrieve content.</p>
				<p>This method is useful for bulk operations. If you would like to retrieve only a single
				message, use the ImapMessage.Get method of the ImapMessage object.</p>
			</remarks><returns>An array of ImapMessage objects, representing all messages retrieved.</returns><param name="messages">A collection of ImapMessage objects specifying the messages to get.</param><param name="sections">An ImapMessageSections value specifying the portion of the message to get.</param><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception><exception cref="T:System.ArgumentOutOfRangeException">index was out of range</exception><exception cref="T:System.IndexOutOfRangeException">index was outside bounds of array</exception><exception cref="T:Dart.PowerTCP.Mail.InvalidParameterTypeException">Collection contains instances of wrong type of object</exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Mailbox.BeginGet(System.Collections.ICollection,Dart.PowerTCP.Mail.ImapMessageSections,System.Object)">
            <summary>Begins to asynchronously retrieve a specified portion of the messages contained in the collection <i>messages</i>.</summary><remarks>
				<p>The Mailbox.BeginGet method begins to asynchronously retrieve some portion of all of the messages contained in <i>messages</i> and 
				uses the data to populate that collection and its contents. Upon completion of the operation,
				the Imap.EndGetMessage is raised. All of the 
				ImapMessage objects contained in <i>messages</i> must be located in the 
				mailbox.  This method uses the IMAP FETCH command to retrieve 
				message content. The command uses the UIDs of the messages in the 
				collection to retrieve content.</p>
				<p>This method is useful for bulk operations. If you would like to retrieve only a single
				message, use the ImapMessage.BeginGet method of the ImapMessage object.</p>
			</remarks><param name="messages">A collection of ImapMessage objects specifying the messages to get.</param><param name="sections">An ImapMessageSections value specifying the portion of the message to get.</param><param name="state">User state information.</param><returns>An IAsyncResult that represents the asynchronous operation, which could still be pending.</returns><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception><exception cref="T:System.InvalidOperationException">BeginXXX method used without providing an EndXXX event handler.</exception><exception cref="T:System.ArgumentOutOfRangeException">index was out of range</exception><exception cref="T:System.IndexOutOfRangeException">index was outside bounds of array</exception><exception cref="T:Dart.PowerTCP.Mail.InvalidParameterTypeException">Collection contains instances of wrong type of object</exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Mailbox.Get(Dart.PowerTCP.Mail.ImapMessage,Dart.PowerTCP.Mail.ImapMessage,Dart.PowerTCP.Mail.ImapMessageSections)">
            <summary>Retrieves a specified portion of the messages contained in the specified range.</summary><remarks>
				<p>The Mailbox.Get method retrieves some portion of all of the messages that are within the range
				specified by <i>first</i> and <i>last</i>.  Both <i>first</i> and
				<i>last</i> must be located in the 
				mailbox.  This method uses the IMAP FETCH command to retrieve 
				message content. The command uses the UIDs of the messages in the 
				collection to retrieve content.</p>
				<p>This method is useful for bulk operations. If you would like to retrieve only a single
				message, use the ImapMessage.Get method of the ImapMessage object.</p>
			</remarks><returns>An array of ImapMessage objects representing the retrieved messages.</returns><param name="first">An ImapMessage object representing the first message in the range to get.</param><param name="last">An ImapMessage object representing the last message in the range to get.</param><param name="sections">An ImapMessageSections value specifying the portion of the message to get.</param><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception><exception cref="T:System.ArgumentOutOfRangeException">index was out of range</exception><exception cref="T:System.IndexOutOfRangeException">index was outside bounds of array</exception><exception cref="T:Dart.PowerTCP.Mail.InvalidParameterTypeException">Collection contains instances of wrong type of object</exception>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates retrieving partial messages.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Login to the server
Imap1.Login(Server, User, Pass)

' Get the current mailbox in a short variable name so we don't have to type as much
Dim Box As Mailbox = Imap1.CurrentMailbox

Dim First As ImapMessage = Box.Messages(0)
Dim Last As ImapMessage = Box.Messages(box.Messages.Count - 1)

' Get all message headers and messages sizes
Box.Get(First, Last, ImapMessageSections.Header | ImapMessageSections.Size)

' Display Results.
Dim Msg as ImapMessage
For Each Msg in Box.Messages
   Debug.WriteLine("Size: " + Msg.Size)
   Debug.WriteLine("Subject: " + Msg.Message.Subject)
Next

' Logout
Imap1.Logout()
<span class="lang">[C#]</span>
// Login to the server
imap1.Login(Server, User, Pass);

// Get the current mailbox in a short variable name so we don't have to type as much
Mailbox box = imap1.CurrentMailbox;

ImapMessage first = box.Messages[0];
ImapMessage last = box.Messages[box.Messages.Count - 1];

// Get all message headers and messages sizes
box.Get(first, last, ImapMessageSections.Header | ImapMessageSections.Size);

// Display Results.
foreach(ImapMessage msg in box.Messages)
{
   Debug.WriteLine("Size: " + msg.Size);
   Debug.WriteLine("Subject: " + msg.Message.Subject);
}

// Logout
imap1.Logout();
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Mailbox.BeginGet(Dart.PowerTCP.Mail.ImapMessage,Dart.PowerTCP.Mail.ImapMessage,Dart.PowerTCP.Mail.ImapMessageSections,System.Object)">
            <summary>Begins to asynchronously retrieve a specified portion of the messages contained in the specified range.</summary><remarks>
				<p>The Mailbox.BeginGet method begins to asynchronously retrieve some portion of all of the messages that are within the range
				specified by <i>first</i> and <i>last</i>.  Upon completion of the operation, the
				Imap.EndGetMessage event is raised. Both <i>first</i> and
				<i>last</i> must be located in the 
				mailbox.  This method uses the IMAP FETCH command to retrieve 
				message content. The command uses the UIDs of the messages in the 
				collection to retrieve content.</p>
				<p>This method is useful for bulk operations. If you would like to retrieve only a single
				message, use the ImapMessage.BeginGet method of the ImapMessage object.</p>
			</remarks><param name="first">An ImapMessage object representing the first message in the range to get.</param><param name="last">An ImapMessage object representing the last message in the range to get.</param><param name="sections">An ImapMessageSections value specifying the portion of the message to get.</param><param name="state">User state information.</param><returns>An IAsyncResult that represents the asynchronous operation, which could still be pending.</returns><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception><exception cref="T:System.InvalidOperationException">BeginXXX method used without providing an EndXXX event handler.</exception><exception cref="T:System.ArgumentOutOfRangeException">index was out of range</exception><exception cref="T:System.IndexOutOfRangeException">index was outside bounds of array</exception><exception cref="T:Dart.PowerTCP.Mail.InvalidParameterTypeException">Collection contains instances of wrong type of object</exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Mailbox.Set(System.Collections.ICollection,Dart.PowerTCP.Mail.ImapFlagModifier,Dart.PowerTCP.Mail.ImapFlags)">
            <summary>Sets flag values on a collection of messages.</summary><remarks>
				<p>The Mailbox.Set method sets the values of one or more flags on the messages represented by
				the ImapMessage objects contained within <i>messages</i>.
				This command results in an IMAP STORE 
				command being issued to the server for each message.  The command uses the UIDs of 
				the messages in the collection to perform the set operation. The ImapMessage
				objects contained within <i>messages</i> must be within this mailbox.</p>
				<p>This method is useful for bulk operations. If you would like
				to set a flag on a single message, use the properties of the 
				ImapMessage object representing that message.</p>
			</remarks><param name="messages">The collection containing ImapMessage objects on which to modify the flags.</param><param name="operation">An ImapFlagModifier value specifying the operation to perform on the flags.</param><param name="flags">An ImapFlags value specifying the flags to modify.</param><returns>An ImapResponse object encapsulating the response from the server.</returns><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception><exception cref="T:System.ArgumentOutOfRangeException">index was out of range</exception><exception cref="T:System.IndexOutOfRangeException">index was outside bounds of array</exception><exception cref="T:Dart.PowerTCP.Mail.InvalidParameterTypeException">Collection contains instances of wrong type of object</exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Mailbox.BeginSet(System.Collections.ICollection,Dart.PowerTCP.Mail.ImapFlagModifier,Dart.PowerTCP.Mail.ImapFlags,System.Object)">
            <summary>Begins to asynchronously set flag values on a collection of messages.</summary><remarks>
				<p>The Mailbox.BeginSet method begins to asynchronously set the values of one or more flags on the messages represented by
				the ImapMessage objects contained within <i>messages</i>. Upon completion of the operation the Imap.EndSet event is
				raised. This command results in an IMAP STORE 
				command being issued to the server for each message.  The command uses the UIDs of 
				the messages in the collection to perform the set operation. The ImapMessage
				objects contained within <i>messages</i> must be within this mailbox.</p>
				<p>This method is useful for bulk operations. If you would like
				to set a flag on a single message, use the properties of the 
				ImapMessage object representing that message.</p>
			</remarks><param name="messages">The collection containing ImapMessage objects on which to modify the flags.</param><param name="operation">An ImapFlagModifier value specifying the operation to perform on the flags.</param><param name="flags">An ImapFlags value specifying the flags to modify.</param><param name="state">User state information.</param><returns>An IAsyncResult that represents the asynchronous operation, which could still be pending.</returns><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception><exception cref="T:System.InvalidOperationException">BeginXXX method used without providing an EndXXX event handler.</exception><exception cref="T:System.ArgumentOutOfRangeException">index was out of range</exception><exception cref="T:System.IndexOutOfRangeException">index was outside bounds of array</exception><exception cref="T:Dart.PowerTCP.Mail.InvalidParameterTypeException">Collection contains instances of wrong type of object</exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Mailbox.Set(Dart.PowerTCP.Mail.ImapMessage,Dart.PowerTCP.Mail.ImapMessage,Dart.PowerTCP.Mail.ImapFlagModifier,Dart.PowerTCP.Mail.ImapFlags)">
            <summary>Sets flag values on a range of messages.</summary><remarks>
				<p>The Mailbox.Set method sets the values of one or more flags on the messages represented by
				the ImapMessage objects contained within the range specified by <i>first</i> and <i>last</i>.
				This command results in an IMAP STORE 
				command being issued to the server for each message.  The command uses the UIDs of 
				the messages in the collection to perform the set operation. The ImapMessage
				objects contained within <i>messages</i> must be within this mailbox.</p>
				<p>This method is useful for bulk operations. If you would like
				to set a flag on a single message, use the properties of the 
				ImapMessage object representing that message.</p>
			</remarks><param name="first">An ImapMessage object representing the first message in the range to set.</param><param name="last">An ImapMessage object representing the last message in the range to set.</param><param name="operation">An ImapFlagModifier value specifying the operation to perform on the flags.</param><param name="flags">An ImapFlags value specifying the flags to modify.</param><returns>An ImapResponse object encapsulating the response from the server.</returns><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception><exception cref="T:System.ArgumentOutOfRangeException">index was out of range</exception><exception cref="T:System.IndexOutOfRangeException">index was outside bounds of array</exception><exception cref="T:Dart.PowerTCP.Mail.InvalidParameterTypeException">Collection contains instances of wrong type of object</exception>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the Set method to change message flags.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Login to the server
Imap1.Login(Server, User, Pass)

' Get the current mailbox in a short variable name so we don't have to type as much
Dim Box As Mailbox = Imap1.CurrentMailbox

Dim First As ImapMessage = Box.Messages(0)
Dim Last As ImapMessage = Box.Messages(box.Messages.Count - 1)

' Add Flagged and Answered flags to messages 
Box.Set(First, Last, ImapFlagModifier.Add, ImapFlags.Flagged | ImapFlags.Answered)

' Refresh the mailbox.
Box.Refresh()

' Logout
Imap1.Logout()
<span class="lang">[C#]</span>
// Login
imap1.Login(Server, User, Pass);

// Get the current mailbox in a short variable name so we don't have to type as much
Mailbox box = imap1.CurrentMailbox;
ImapMessage first = box.Messages[0];
ImapMessage last = box.Messages[box.Messages.Count - 1];

// Add Flagged and Answered flags to messages 
box.Set(first, last, ImapFlagModifier.Add, ImapFlags.Flagged | ImapFlags.Answered);

// Refresh the mailbox.
box.Refresh();

// Logout
imap1.Logout();
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Mailbox.BeginSet(Dart.PowerTCP.Mail.ImapMessage,Dart.PowerTCP.Mail.ImapMessage,Dart.PowerTCP.Mail.ImapFlagModifier,Dart.PowerTCP.Mail.ImapFlags,System.Object)">
            <summary>Begins to asynchronously set flag values on a range of messages.</summary><remarks>
				<p>The Mailbox.BeginSet method begins to asynchronously sets the values of one or more flags on the messages represented by
				the ImapMessage objects contained within the range specified by <i>first</i> and <i>last</i>.
				Upon completion of the operation the Imap.EndSet event is raised.
				This command results in an IMAP STORE 
				command being issued to the server for each message.  The command uses the UIDs of 
				the messages in the collection to perform the set operation. The ImapMessage
				objects contained within <i>messages</i> must be within this mailbox.</p>
				<p>This method is useful for bulk operations. If you would like
				to set a flag on a single message, use the properties of the 
				ImapMessage object representing that message.</p>
			</remarks><param name="first">An ImapMessage object representing the first message in the range to set.</param><param name="last">An ImapMessage object representing the last message in the range to set.</param><param name="operation">An ImapFlagModifier value specifying the operation to perform on the flags.</param><param name="flags">An ImapFlags value specifying the flags to modify.</param><param name="state">User state information.</param><returns>An IAsyncResult that represents the asynchronous operation, which could still be pending.</returns><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception><exception cref="T:System.InvalidOperationException">BeginXXX method used without providing an EndXXX event handler.</exception><exception cref="T:System.ArgumentOutOfRangeException">index was out of range</exception><exception cref="T:System.IndexOutOfRangeException">index was outside bounds of array</exception><exception cref="T:Dart.PowerTCP.Mail.InvalidParameterTypeException">Collection contains instances of wrong type of object</exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Mailbox.Copy(System.Collections.ICollection,Dart.PowerTCP.Mail.Mailbox)">
            <summary>Copies the specified messages to the specified mailbox.</summary><remarks>
				<p>The Mailbox.Copy method copies the messages contained within the collection
				 <i>messages</i> to the specified <i>destination</i>.  
				This command results 
				in an IMAP COPY command being issued to the server for each message.  The command uses the UIDs of 
				the messages to perform the copy operation. The ImapMessages in <i>messages</i>
				must be in this mailbox.</p>
				<p>This method is useful for bulk operations. If you would like to copy a single message,
				use the ImapMessage.CopyTo method of the ImapMessage object.</p>
			</remarks><param name="messages">A collection of ImapMessage objects representing the messages to copy.</param><param name="destination">The name of the destination mailbox.</param><returns>An ImapResponse object encapsulating the response from the server.</returns><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception><exception cref="T:System.ArgumentOutOfRangeException">index was out of range</exception><exception cref="T:System.IndexOutOfRangeException">index was outside bounds of array</exception><exception cref="T:Dart.PowerTCP.Mail.InvalidParameterTypeException">Collection contains instances of wrong type of object</exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Mailbox.BeginCopy(System.Collections.ICollection,Dart.PowerTCP.Mail.Mailbox,System.Object)">
            <summary>Begins to asynchronously copy the specified messages to the specified mailbox.</summary><remarks>
				<p>The Mailbox.BeginCopy method begins to asynchronously copy the messages contained within the collection
				 <i>messages</i> to the specified <i>destination</i>.  Upon completion, the Imap.EndCopy event is raised.
				This command results 
				in an IMAP COPY command being issued to the server for each message.  The command uses the UIDs of 
				the messages to perform the copy operation. The ImapMessages in <i>messages</i>
				must be in this mailbox.</p>
				<p>This method is useful for bulk operations. If you would like to copy a single message,
				use the ImapMessage.CopyTo method of the ImapMessage object.</p>
			</remarks><param name="messages">A collection of ImapMessage objects representing the messages to copy.</param><param name="destination">The name of the destination mailbox.</param><param name="state">User state information.</param><returns>An IAsyncResult that represents the asynchronous operation, which could still be pending.</returns><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception><exception cref="T:System.InvalidOperationException">BeginXXX method used without providing an EndXXX event handler.</exception><exception cref="T:System.ArgumentOutOfRangeException">index was out of range</exception><exception cref="T:System.IndexOutOfRangeException">index was outside bounds of array</exception><exception cref="T:Dart.PowerTCP.Mail.InvalidParameterTypeException">Collection contains instances of wrong type of object</exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Mailbox.Copy(Dart.PowerTCP.Mail.ImapMessage,Dart.PowerTCP.Mail.ImapMessage,Dart.PowerTCP.Mail.Mailbox)">
            <summary>Copies the specified range of messages to the specified mailbox.</summary><remarks>
				<p>The Mailbox.Copy method copies the messages contained within the range specified
				by <i>first</i> and <i>last</i>.
				This command results 
				in an IMAP COPY command being issued to the server.  The command uses the UIDs of 
				the messages to perform the copy operation. The ImapMessages in <i>messages</i>
				must be in this mailbox.</p>
				<p>This method is useful for bulk operations. If you would like to copy a single message,
				use the ImapMessage.CopyTo method of the ImapMessage object.</p>
			</remarks><param name="first">An ImapMessage object representing the first message in the range to copy.</param><param name="last">An ImapMessage object representing the last message in the range to copy.</param><param name="destination">The name of the destination mailbox.</param><returns>An ImapResponse object encapsulating the response from the server.</returns><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception><exception cref="T:System.ArgumentOutOfRangeException">index was out of range</exception><exception cref="T:System.IndexOutOfRangeException">index was outside bounds of array</exception><exception cref="T:Dart.PowerTCP.Mail.InvalidParameterTypeException">Collection contains instances of wrong type of object</exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Mailbox.BeginCopy(Dart.PowerTCP.Mail.ImapMessage,Dart.PowerTCP.Mail.ImapMessage,Dart.PowerTCP.Mail.Mailbox,System.Object)">
            <summary>Begins to asynchronously copy the specified range of messages to the specified mailbox.</summary><remarks>
				<p>The Mailbox.BeginCopy method begins to asynchronously copy the messages contained within the
				range specified by <i>first</i> and <i>last</i> to the specified <i>destination</i>.  Upon completion, the Imap.EndCopy event is raised.
				This command results 
				in an IMAP COPY command being issued to the server for each message.  The command uses the UIDs of 
				the messages to perform the copy operation. The ImapMessages in <i>messages</i>
				must be in this mailbox.</p>
				<p>This method is useful for bulk operations. If you would like to copy a single message,
				use the ImapMessage.CopyTo method of the ImapMessage object.</p>
			</remarks><param name="first">An ImapMessage object representing the first message in the range to copy.</param><param name="last">An ImapMessage object representing the last message in the range to copy.</param><param name="destination">The name of the destination mailbox.</param><param name="state">User state information.</param><returns>An IAsyncResult that represents the asynchronous operation, which could still be pending.</returns><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception><exception cref="T:System.InvalidOperationException">BeginXXX method used without providing an EndXXX event handler.</exception><exception cref="T:System.ArgumentOutOfRangeException">index was out of range</exception><exception cref="T:System.IndexOutOfRangeException">index was outside bounds of array</exception><exception cref="T:Dart.PowerTCP.Mail.InvalidParameterTypeException">Collection contains instances of wrong type of object</exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Mailbox.Search(System.Collections.ICollection)">
            <summary>Search for messages within a mailbox based on criteria.</summary><remarks>
				<p>The Mailbox.Search method sends the "SEARCH" command to the server along
				with all of the search restrictions specified ImapSearchParameter.
				Proper use involves creating an object which implements ICollection, adding 
				several ImapSearchParameters to this object, and passing this object into
				the Mailbox.Search method as <i>criteria</i>. Multiple values are combined with a logical AND.  Other 
				logical combinations can be represented using the ImapCriterion values 
				ImapCriterion.Not and ImapCriterion.Or.
				</p>
			</remarks><returns>An array of ImapMessage objects which meet the criteria specified by <i>criteria</i>.</returns><param name="criteria">A collection of one or more ImapSearchParameter objects, defining the type of search to perform.</param><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception><exception cref="T:System.InvalidCastException">Specified cast is invalid</exception>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the Mailbox.Search method. This example constructs the
				search "SEARCH FLAGGED SINCE 1-Feb-1994 NOT FROM 'Smith'"</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Login
Imap1.Login(Server, User, Pass)

' Construct the seach "SEARCH FLAGGED SINCE 1-Feb-1994 NOT FROM 'Smith'"
Dim Criteria As New ArrayList()
Criteria.Add(New ImapSearchParameter(ImapCriterion.Flagged, ""))
Criteria.Add(New ImapSearchParameter(ImapCriterion.Since, "1-Feb-1994"))
Criteria.Add(New ImapSearchParameter(ImapCriterion.Not, ""))
Criteria.Add(New ImapSearchParameter(ImapCriterion.From, "Smith"))

' Alternatively, ImapSearchParameter objects can be created like so
' Dim Param As New ImapSearchParameter()
' Param.Criterion = ImapCriterion.Flagged
' Param.Paramter = ""
' Criteria.Add(Param)

' Perform the search. This will occur on the default box INBOX.
Dim Messages() As ImapMessage = Imap1.CurrentMailbox.Search(Criteria)

' Display
Debug.WriteLine("The following message IDs meet the specified criteria")
Dim Message as ImapMessage
For Each Message in Messages
   Debug.WriteLine(Message.Id)
<span class="lang">[C#]</span>
// Login
imap1.Login(Server, User, Pass);

// Construct the seach "SEARCH FLAGGED SINCE 1-Feb-1994 NOT FROM 'Smith'"
ArrayList criteria = new ArrayList();
criteria.Add(new ImapSearchParameter(ImapCriterion.Flagged, ""));
criteria.Add(new ImapSearchParameter(ImapCriterion.Since, "1-Feb-1994"));
criteria.Add(new ImapSearchParameter(ImapCriterion.Not, ""));
criteria.Add(new ImapSearchParameter(ImapCriterion.From, "Smith"));

/*
/ Alternatively, ImapSearchParameter objects can be created like so
/ ImapSearchParameter param = new ImapSearchParameter();
/ param.Criterion = ImapCriterion.Flagged;
/ param.Paramter = "";
/ criteria.Add(param);
*/

// Perform the search. This will occur on the default box INBOX.
ImapMessage[] messages = imap1.CurrentMailbox.Search(criteria);

// Display
Debug.WriteLine("The following message IDs meet the specified criteria");
foreach(ImapMessage message in messages)
   Debug.WriteLine(message.Id);
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Mailbox.BeginSearch(System.Collections.ICollection,System.Object)">
            <summary>Begins to asynchronously search messages within a mailbox based on criteria.</summary><remarks>
				<p>The Mailbox.BeginSearch method begins to asynchronously send the "SEARCH" command to the server along
				with all of the search restrictions specified ImapSearchParameter. Upon completion, the Imap.EndSearch 
				event is raised.
				Proper use involves creating an object which implements ICollection, adding 
				several ImapSearchParameters to this object, and passing this object into
				the Mailbox.Search method as <i>criteria</i>. Multiple values are combined with a logical AND.  Other 
				logical combinations can be represented using the ImapCriterion values 
				ImapCriterion.Not and ImapCriterion.Or.
				</p>
			</remarks><param name="criteria">A collection of one or more ImapSearchParameter objects, defining the type of search to perform.</param><param name="state">User state information.</param><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception><exception cref="T:System.InvalidOperationException">BeginXXX method used without providing an EndXXX event handler.</exception><exception cref="T:System.InvalidCastException">Specified cast is invalid</exception>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the Mailbox.BeginSearch method. This example constructs the
				search "SEARCH FLAGGED SINCE 1-Feb-1994 NOT FROM 'Smith'"</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub AsynchronousSearchTest()
   ' Login
   Imap1.Login(Server, User, Pass)

   ' Construct the seach "SEARCH FLAGGED SINCE 1-Feb-1994 NOT FROM 'Smith'"
   Dim Criteria As New ArrayList()
   Criteria.Add(New ImapSearchParameter(ImapCriterion.Flagged, ""))
   Criteria.Add(New ImapSearchParameter(ImapCriterion.Since, "1-Feb-1994"))
   Criteria.Add(New ImapSearchParameter(ImapCriterion.Not, ""))
   Criteria.Add(New ImapSearchParameter(ImapCriterion.From, "Smith"))

   ' Alternatively, ImapSearchParameter objects can be created like so
   ' Dim Param As New ImapSearchParameter()
   ' Param.Criterion = ImapCriterion.Flagged
   ' Param.Paramter = ""
   ' Criteria.Add(Param)

   ' Perform the search. This will occur on the default box INBOX.
   Imap1.CurrentMailbox.BeginSearch(Criteria, Nothing)
End Sub

Private Sub Imap1_EndSearch(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureMail.ImapMessageEventArgs) Handles Imap1.EndSearch
   If e.Exception Is Nothing Then
      ' The following messages meet the criteria
      Dim Msg As ImapMessages
      For Each Msg In e.Messages
         Debug.WriteLine("Message: " + Msg.Id)
      Next
   End Sub
End Sub
<span class="lang">[C#]</span>
private void AsynchronousSearchTest()
{
   // Login
   imap1.Login(Server, User, Pass);

   // Construct the seach "SEARCH FLAGGED SINCE 1-Feb-1994 NOT FROM 'Smith'"
   ArrayList criteria = new ArrayList();
   criteria.Add(new ImapSearchParameter(ImapCriterion.Flagged, ""));
   criteria.Add(new ImapSearchParameter(ImapCriterion.Since, "1-Feb-1994"));
   criteria.Add(new ImapSearchParameter(ImapCriterion.Not, ""));
   criteria.Add(new ImapSearchParameter(ImapCriterion.From, "Smith"));

   /*
   / Alternatively, ImapSearchParameter objects can be created like so
   / ImapSearchParameter param = new ImapSearchParameter();
   / param.Criterion = ImapCriterion.Flagged;
   / param.Paramter = "";
   / criteria.Add(param);
   */

   // Perform the search. This will occur on the default box INBOX.
   imap1.CurrentMailbox.BeginSearch(criteria, null);
}

private void imap1_EndSearch(object sender, Dart.PowerTCP.SecureMail.ImapMessageEventArgs e)
{
   if(e.Exception == null)
   {
      // The following messages meet the criteria
      foreach(ImapMessage msg in e.Messages)
         Debug.WriteLine("Message: " + msg.Id);
   }			
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Mailbox.Select">
            <summary>
            
            </summary>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Mailbox.FullName">
            <summary>Gets or sets the full path name of the mailbox.</summary><remarks>
				<p>The Mailbox.FullName property gets or sets the full path name of this mailbox.
			 For example, with a mailbox named:</p>
				<pre class="code">
"inbox\archives\user"
</pre>
				<p>the Mailbox name-related properties would be as follows:</p>
				<div class="tablediv">
					<table cellspacing="0" class="dtTABLE">
						<tr valign="top">
							<th width="50%">Property</th>
							<th width="50%">Value</th>
						</tr>
						<tr valign="top">
							<td width="50%"> Mailbox.Name </td>
							<td width="50%"> "user" </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Mailbox.FullName </td>
							<td width="50%"> "inbox\archives\user" </td>
						</tr>
					</table>
				</div>
				<p>When setting the Mailbox.Fullname property, a RENAME command is sent to the server.
			If you are renaming a Mailbox within the same mailbox use the Mailbox.Name property instead.
			For example, if you wanted to rename
			</p>
				<pre class="code">
"company/users/bob"
</pre>
				<p>to</p>
				<pre class="code">
"company/users/bobjohnson"
</pre>
				<p>you could simply set Mailbox.Name to "bobjohnson". However, if you wanted
			to rename</p>
				<pre class="code">
"company/users/bob"
</pre>
				<p>to</p>
				<pre class="code">
"archive/bobbackup"
</pre>
				<p>you could not do this by setting Mailbox.Name. You would have to set Mailbox.FullName
			to "archive/bobbackup".</p>
				<p>The equivalent asynchronous method for renaming a mailbox is</p>
				<pre class="code">
Imap.BeginInvoke("RENAME oldname newname, null);
</pre>
				<p>"&amp;" is represented when sent 
			as "&amp;-".  Anything between an "&amp;" and a "–" is converted to Unicode.</p>
			</remarks><value>A string representing the full path name of the mailbox.</value>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Mailbox.Name">
            <summary>Gets or sets the "short" name of the mailbox.</summary><remarks>
				<p>The Mailbox.Name property gets or sets the "short" name of this mailbox,
			meaning the text part of the name between the last occurrence of the delimiter (Imap.Delimiter)
			(if any) and the end of the string.  For example, with a mailbox named:</p>
				<pre class="code">
"inbox\archives\user"
</pre>
				<p>the Mailbox name-related properties would be as follows:</p>
				<div class="tablediv">
					<table cellspacing="0" class="dtTABLE">
						<tr valign="top">
							<th width="50%">Property</th>
							<th width="50%">Value</th>
						</tr>
						<tr valign="top">
							<td width="50%"> Mailbox.Name </td>
							<td width="50%"> "user" </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Mailbox.FullName </td>
							<td width="50%"> "inbox\archives\user" </td>
						</tr>
					</table>
				</div>
				<p>When setting the Mailbox.Name property, a RENAME command is sent to the server.
			This will only rename the "short" name, which has some limitations. For example, if you wanted to rename
			</p>
				<pre class="code">
"company/users/bob"
</pre>
				<p>to</p>
				<pre class="code">
"company/users/bobjohnson"
</pre>
				<p>you could simply set Mailbox.Name to "bobjohnson". However, if you wanted
			to rename</p>
				<pre class="code">
"company/users/bob"
</pre>
				<p>to</p>
				<pre class="code">
"archive/bobbackup"
</pre>
				<p>you could not do this by setting Mailbox.Name. You would have to set Mailbox.FullName
			to "archive/bobbackup".</p>
				<p>The equivalent asynchronous method for renaming a mailbox is</p>
				<pre class="code">
Imap.BeginInvoke("RENAME oldname newname, null);
</pre>
				<p>"&amp;" is represented when sent 
			as "&amp;-".  Anything between an "&amp;" and a "–" is converted to Unicode.</p>
			</remarks><value>A string representing the "short" name of the mailbox.</value>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Mailbox.Recent">
            <summary>Gets the count of messages that are recent in this Mailbox.</summary><remarks>
				<p>The Mailbox.Recent property returns the number of messages that are recent in this mailbox. Typically, a server
			will consider a message to be "recent" if the current session is the first session to
			be notified about the messages arrival.</p>
			</remarks><value>The count of recent messages in this mailbox.</value>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Mailbox.FirstUnseen">
            <summary>Gets the ID of the first unseen message in the mailbox.</summary><remarks>
				<p>The Mailbox.FirstUnseen property returns the ID (accessable via the ImapMessage.Id property
				of the ImapMessage object) of the first unseen 
				message in the inbox.</p>
				<p>If you wish to access this message directly simply convert the 1-based server collection
				to the 0-based messages collection by subtracting 1, i.e.</p>
				<pre class="code">
// Access the first unseen message (be sure to check that this isn't 0 first)
Mailbox.Messages[Mailbox.FirstUnseen - 1];
</pre>
				<p>If no message is unseen, this property will return 0.</p>
			</remarks><value>The ID of the first unseen message. </value>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Mailbox.Messages">
            <summary>Gets a collection which contains all messages in the mailbox.</summary><remarks>
				<p>The Mailbox.Messages property returns the ImapMessageCollection object 
				containing ImapMessage objects representing each message in this mailbox. This collection
				will not be populated with messages upon first access. You must first call Mailbox.Refresh
				for this collection to have any items.</p>
			</remarks><value>An ImapMessageCollection which contains all messages in the mailbox.</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates retrieving partial messages.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Login to the server
Imap1.Login(Server, User, Pass)

' Get the current mailbox in a short variable name so we don't have to type as much
Dim Box As Mailbox = Imap1.CurrentMailbox

Dim First As ImapMessage = Box.Messages(0)
Dim Last As ImapMessage = Box.Messages(box.Messages.Count - 1)

' Get all message headers and messages sizes
Box.Get(First, Last, ImapMessageSections.Header | ImapMessageSections.Size)

' Display Results.
Dim Msg as ImapMessage
For Each Msg in Box.Messages
   Debug.WriteLine("Size: " + Msg.Size)
   Debug.WriteLine("Subject: " + Msg.Message.Subject)
Next

' Logout
Imap1.Logout()
<span class="lang">[C#]</span>
// Login to the server
imap1.Login(Server, User, Pass);

// Get the current mailbox in a short variable name so we don't have to type as much
Mailbox box = imap1.CurrentMailbox;

ImapMessage first = box.Messages[0];
ImapMessage last = box.Messages[box.Messages.Count - 1];

// Get all message headers and messages sizes
box.Get(first, last, ImapMessageSections.Header | ImapMessageSections.Size);

// Display Results.
foreach(ImapMessage msg in box.Messages)
{
   Debug.WriteLine("Size: " + msg.Size);
   Debug.WriteLine("Subject: " + msg.Message.Subject);
}

// Logout
imap1.Logout();
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Mailbox.ReadOnly">
            <summary>Gets a value which determines if the mailbox is read-only.</summary><remarks>
				<p>The Mailbox.ReadOnly property returns true if the mailbox is read-only.  
				This could be the case either 
				because of the way that the mailbox was selected (ex., EXAMINE was used instead
				of SELECT), or because it is 
				configured in a read-only fashion.</p>
			</remarks><value>true if the mailbox cannot be written to; false otherwise.</value>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Mailbox.Selectable">
            <summary>Gets a value which detemines if the mailbox can be selected.</summary><remarks>
				<p>The Mailbox.Selectable property determines if the mailbox can be selected. If false,
				then this mailbox cannot be Imap.CurrentMailbox.</p>
			</remarks><value>true if the mailbox can be selected; false otherwise.</value>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Mailbox.SublevelsAllowed">
            <summary>Gets a value which determines if mailboxes can be created as sublevels below this mailbox.</summary><remarks>
				<p>If this property is false, any attempts to create mailboxes as children of this 
				mailbox will result in an error.</p>
			</remarks><value>true if additional mailboxes can be creates as sublevels in the heirarchy below this
			mailbox; otherwise false.</value>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Mailbox.Marked">
            <summary>Gets a value which determines if the mailbox has been "marked".</summary><remarks>
				<p>The Mailbox.Marked property returns true if the mailbox has been "marked" 
				as interesting by the server. Typically, this might occur because the mailbox 
				contains new messages.</p>
			</remarks><value>true if the mailbox has been "marked" by the server; false otherwise.</value>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Mailbox.Tag">
            <summary>
			Gets or sets an object reference that can be used to associate this instance with any other.
		</summary><remarks>
			Use this property to associate any type derived from Object class with the component. 
			A common use for the <B>Tag</B> property is to store data that is closely associated with the component.
		</remarks><value>
		Any object that is associated with the component; null if no objects are 
		associated with the component.
		</value><summary>
            Gets or sets an object reference that can be used to associate this instance with any other.
            </summary><value>
            Any object that is associated with the object, <b>null</b> if no objects are associated with the object
            </value><remarks>
				<p>
			 Use this property to associate any object with the object.				
            </p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Mailbox.Mailboxes">
            <summary>Gets a collection which contains all mailboxes in the mailbox.</summary><remarks>
				<p>Returns the MailboxCollection object containing mailboxes below this 
				mailbox in the hierarchy.  This is dynamically generated the first time it 
				is accessed.</p>
			</remarks><value>A MailboxCollection which contains all messages in the mailbox.</value>
        </member>
        <member name="T:Dart.PowerTCP.Mail.MailboxCollection">
            <summary>Represents a collection of Mailbox objects.</summary><remarks>
				<p>The MailboxCollection class contains only Mailbox objects that exist on an
			IMAP server. It is used to represent either 
			the results of an Imap.List method call (as the Imap.Mailboxes property), or as the 
			collection of child mailboxes to a given mailbox (Mailbox.Mailboxes).</p>
				<p>The MailboxCollection class can be manipulated by using the Mailbox.Add, Mailbox.Remove, and
			Mailbox.Refresh methods. Since this is a server-side collection, calling these methods sends
			the associated IMAP command to the server. For example, calling MailboxCollection.Remove results in a 
			DELETE command being sent to the server to actually delete the mailbox. If any method called results in
			the addition, deletion, or modification of a mailbox, the MailboxCollection will be automatically 
			updated to reflect this.</p>
				<p>Typically, the Mailbox objects representing mailboxes contained within this collection are dynamically
			generated the first time the collection is accessed.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates appending mailboxes to the server.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub MailboxCollectionTest()
   ' Login
   Imap1.Login(Server, User, Pass)

   ' Create a new mailbox.
   Imap1.Mailboxes.Add("MyNewBox")

   ' Get the Mailbox in a short variable name to reduce typing.
   Dim Box As New Mailbox = Imap1.Mailboxes("MyNewBox")

   ' APPEND some test messages
   Dim i As Integer
   For i = 0 To 5
      ' Dynamically create a new message
      Dim Msg As New MessageStream()
      Msg.To.Add(New MailAddress("me@test.com"))
      Msg.From = New MailAddress("you@test.com")
      Msg.Subject = "test # " + i
      Msg.Text = "Hello, how are you?"

      ' Append the message
      Box.Messages.Add(msg)
   Next

   ' Refresh the mail box so new messages will be included
   Box.Refresh()

   ' Display a list of the message identifiers.
   Debug.WriteLine(Box.Messages.ToString())

   ' Clear all messages
   Box.Messages.Clear()

   ' Logout
   Imap1.Logout()
End Sub
<span class="lang">[C#]</span>
private void MailboxCollectionTest()
{
   // Login
   imap1.Login(Server, User, Pass);

   // Create a new mailbox.
   imap1.Mailboxes.Add("MyNewBox");

   // Get the Mailbox in a short variable name to reduce typing.
   Mailbox box = imap1.Mailboxes["MyNewBox"];

   // APPEND some test messages
   for(int i=0; i &lt; 5; i++)
   {
      // Dynamically create a new message
      MessageStream msg = new MessageStream();
      msg.To.Add(new MailAddress("me@test.com"));
      msg.From = new MailAddress("you@test.com");
      msg.Subject = "test # " + i;
      msg.Text = "Hello, how are you?";

      // Append the message
      box.Messages.Add(msg);
   }

   // Refresh the mail box so new messages will be included
   box.Refresh();

   // Display a list of the message identifiers.
   Debug.WriteLine(box.Messages.ToString());

   // Clear all messages
   box.Messages.Clear();

   // Logout
   imap1.Logout();
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MailboxCollection.Add(System.String)">
            <summary>Adds a new mailbox to the server.</summary><remarks>
				<p>The MailboxCollection.Add method creates a new mailbox on the server 
				using the specified <i>name</i> by sending the IMAP CREATE command. <i>name</i> will
				be used to create the mailbox "within" the currently selected mailbox by adding
				<i>name</i> to the parent mailboxes name. If there is no parent of this mailbox,
				then the new mailbox will be a top-level mailbox.</p>
				<p>After calling this method, the MailboxCollection will be automatically updated to
				reflect the current state of the collection. There is no need to explicitly call MailboxCollection.Refresh.</p>
			</remarks><returns>A Mailbox object representing the newly added mailbox.</returns><param name="name">The name of the newly created mailbox.</param><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception><exception cref="T:System.InvalidOperationException">Attempt to illegally modify a server-side collection.</exception>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates appending mailboxes to the server.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub MailboxCollectionTest()
   ' Login
   Imap1.Login(Server, User, Pass)

   ' Create a new mailbox.
   Imap1.Mailboxes.Add("MyNewBox")

   ' Get the Mailbox in a short variable name to reduce typing.
   Dim Box As New Mailbox = Imap1.Mailboxes("MyNewBox")

   ' APPEND some test messages
   Dim i As Integer
   For i = 0 To 5
      ' Dynamically create a new message
      Dim Msg As New MessageStream()
      Msg.To.Add(New MailAddress("me@test.com"))
      Msg.From = New MailAddress("you@test.com")
      Msg.Subject = "test # " + i
      Msg.Text = "Hello, how are you?"

      ' Append the message
      Box.Messages.Add(msg)
   Next

   ' Refresh the mail box so new messages will be included
   Box.Refresh()

   ' Display a list of the message identifiers.
   Debug.WriteLine(Box.Messages.ToString())

   ' Clear all messages
   Box.Messages.Clear()

   ' Logout
   Imap1.Logout()
End Sub
<span class="lang">[C#]</span>
private void MailboxCollectionTest()
{
   // Login
   imap1.Login(Server, User, Pass);

   // Create a new mailbox.
   imap1.Mailboxes.Add("MyNewBox");

   // Get the Mailbox in a short variable name to reduce typing.
   Mailbox box = imap1.Mailboxes["MyNewBox"];

   // APPEND some test messages
   for(int i=0; i &lt; 5; i++)
   {
      // Dynamically create a new message
      MessageStream msg = new MessageStream();
      msg.To.Add(new MailAddress("me@test.com"));
      msg.From = new MailAddress("you@test.com");
      msg.Subject = "test # " + i;
      msg.Text = "Hello, how are you?";

      // Append the message
      box.Messages.Add(msg);
   }

   // Refresh the mail box so new messages will be included
   box.Refresh();

   // Display a list of the message identifiers.
   Debug.WriteLine(box.Messages.ToString());

   // Clear all messages
   box.Messages.Clear();

   // Logout
   imap1.Logout();
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MailboxCollection.BeginAdd(System.String,System.Object)">
            <summary>Begins to asynchronously add a new mailbox to the server.</summary><remarks>
				<p>The MailboxCollection.BeginAdd method begins to asynchronously
				create a new mailbox on the server 
				using the specified <i>name</i> by sending the IMAP CREATE command. 
				When complete, the Imap.EndMailboxAdd event is raised. <i>name</i> will
				be used to create the mailbox "within" the currently selected mailbox by adding
				<i>name</i> to the parent mailboxes name. If there is no parent of this mailbox,
				then the new mailbox will be a top-level mailbox.</p>
				<p>After calling this method, the MailboxCollection will be automatically updated to
				reflect the current state of the collection. There is no need to explicitly call MailboxCollection.Refresh.</p>
			</remarks><param name="name">The name of the newly created mailbox.</param><param name="state">User state information.</param><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception><exception cref="T:System.InvalidOperationException">BeginXXX method used without providing an EndXXX event handler <p>--or--</p>Attempt to illegally modify a server-side collection.</exception><returns>An IAsyncResult that represents the asynchronous operation, which could still be pending.</returns>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates asynchronously creating a new mailbox.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
private void AsynchronousMailboxCreateTest()
{
   ' Login to the server.
   Imap1.Login(Server, User, Pass)

   ' Begin to asynchronously create a new mailbox. When
   ' complete, the Imap.EndMailboxAdd event will be raised.
   Imap1.Mailboxes.BeginAdd("MyNewMailbox", Nothing)
}

Private Sub Imap1_EndMailboxAdd(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureMail.MailboxEventArgs) Handles Imap1.EndMailboxAdd
   If e.Exception Is Nothing Then
      Debug.WriteLine("New mailbox " + e.Mailbox.Name + " created.")
   Else
      Debug.WriteLine("Exception received: " + e.Exception.Message)
   End If
End Sub
<span class="lang">[C#]</span>
private void AsynchronousMailboxCreateTest()
{
   // Login to the server.
   imap1.Login(Server, User, Pass);

   // Begin to asynchronously create a new mailbox. When
   // complete, the Imap.EndMailboxAdd event will be raised.
   imap1.Mailboxes.BeginAdd("MyNewMailbox", null);
}

private void imap1_EndMailboxAdd(object sender, Dart.PowerTCP.SecureMail.MailboxEventArgs e)
{
   if(e.Exception == null)
      Debug.WriteLine("New mailbox " + e.Mailbox.Name + " created.");
   else
      Debug.WriteLine("Exception received: " + e.Exception.Message);
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MailboxCollection.Remove(Dart.PowerTCP.Mail.Mailbox)">
            <summary>Removes a mailbox from the server.</summary><remarks>
				<p>The MailboxCollection.Remove method removes the mailbox which is equal to
				<i>value</i> from the server by sending the IMAP DELETE command.</p>
				<p>After calling this method, the MailboxCollection will be automatically updated to
				reflect the current state of the collection. There is no need to explicitly call MailboxCollection.Refresh.</p>
			</remarks><param name="value">The Mailbox object representing the mailbox to remove.</param><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception><exception cref="T:System.InvalidOperationException">Attempt to illegally modify a server-side collection.</exception>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates some of the methods of MailboxCollection.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub MailboxCollectionDemo()
   ' Login
   Imap1.Login(Server, User, Pass)

   ' Create a test mailbox
   Imap1.Mailboxes.Add("MyNewMailbox")

   ' Get the name into a short variable name for less typing
   Dim Box As New Mailbox = imap1.Mailboxes("MyNewMailbox")

   ' Create a message from a message stored on file.
   Dim Msg as new MessageStream(New FileStream("C:\mymsg.txt", FileMode.Open))

   ' Add a new message with flags and an internal date
   Dim InternalDate As New System.DateTime(2000, 1, 1)
   ImapMessage ImapMsg = Box.Messages.Add(Msg, ImapFlags.Flagged, internalDate);

   ' Remove the mailbox
   Imap1.Mailboxes.Remove(box)

   ' Logout
   imap1.Logout()
End Sub
<span class="lang">[C#]</span>
private void MailboxCollectionDemo()
{
   // Login
   imap1.Login(Server, User, Pass);

   // Create a test mailbox
   imap1.Mailboxes.Add("MyNewMailbox");

   // Get the name into a short variable name for less typing
   Mailbox box = imap1.Mailboxes["MyNewMailbox"];

   // Create a message from a message stored on file.
   MessageStream msg = new MessageStream(new FileStream("C:\\mymsg.txt", FileMode.Open));

   // Add a new message with flags and an internal date
   System.DateTime internalDate = new System.DateTime(2000, 1, 1);
   ImapMessage imapMsg = box.Messages.Add(msg, ImapFlags.Flagged, internalDate);

   // Remove the mailbox
   imap1.Mailboxes.Remove(box);

   // Logout
   imap1.Logout();
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MailboxCollection.BeginRemove(Dart.PowerTCP.Mail.Mailbox,System.Object)">
            <summary>Begins to asynchronously remove a mailbox from the server.</summary><remarks>
				<p>The MailboxCollection.BeginRemove method begins to asynchronously remove the mailbox which is equal to
				<i>value</i> from the server by sending the IMAP DELETE command. Upon completion, the Imap.EndMailboxRemove 
				event is raised.</p>
				<p>After calling this method, the MailboxCollection will be automatically updated to
				reflect the current state of the collection. There is no need to explicitly call MailboxCollection.Refresh.</p>
			</remarks><param name="value">The Mailbox object representing the mailbox to remove.</param><param name="state">User state information.</param><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception><exception cref="T:System.InvalidOperationException">BeginXXX method used without providing an EndXXX event handler <p>--or--</p>Attempt to illegally modify a server-side collection.</exception><returns>An IAsyncResult that represents the asynchronous operation, which could still be pending.</returns>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates some of the methods of MailboxCollection.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub MailboxCollectionDemo()
   ' Login
   Imap1.Login(Server, User, Pass)

   ' Create a test mailbox
   Imap1.Mailboxes.Add("MyNewMailbox")

   ' Get the name into a short variable name for less typing
   Dim Box As New Mailbox = imap1.Mailboxes("MyNewMailbox")

   ' Create a message from a message stored on file.
   Dim Msg as new MessageStream(New FileStream("C:\mymsg.txt", FileMode.Open))

   ' Add a new message with flags and an internal date
   Dim InternalDate As New System.DateTime(2000, 1, 1)
   ImapMessage ImapMsg = Box.Messages.Add(Msg, ImapFlags.Flagged, internalDate);

   ' Remove the mailbox
   Imap1.Mailboxes.Remove(box)

   ' Logout
   imap1.Logout()
End Sub
<span class="lang">[C#]</span>
private void MailboxCollectionDemo()
{
   // Login
   imap1.Login(Server, User, Pass);

   // Create a test mailbox
   imap1.Mailboxes.Add("MyNewMailbox");

   // Get the name into a short variable name for less typing
   Mailbox box = imap1.Mailboxes["MyNewMailbox"];

   // Create a message from a message stored on file.
   MessageStream msg = new MessageStream(new FileStream("C:\\mymsg.txt", FileMode.Open));

   // Add a new message with flags and an internal date
   System.DateTime internalDate = new System.DateTime(2000, 1, 1);
   ImapMessage imapMsg = box.Messages.Add(msg, ImapFlags.Flagged, internalDate);

   // Remove the mailbox
   imap1.Mailboxes.Remove(box);

   // Logout
   imap1.Logout();
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MailboxCollection.Refresh">
            <summary>Refreshes the list of mailboxes represented by this collection.</summary><remarks>
				<p>The MailboxCollection.Refresh method refreshes the list of mailboxes represented by this collection.  
				This could be either the list of top-level mailboxes or a set of child mailboxes.</p>
				<p>If the contents of the MailboxCollection are modified by using the methods of the MailboxCollection
				the collection will be automatically refreshed. MailboxCollection.Refresh would typically only be
				used to refresh the collection if two users are using the same mail account simultaneously.</p>
			</remarks><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MailboxCollection.BeginRefresh(System.Object)">
            <summary>Begins to asynchronously refresh the list of mailboxes represented by this collection.</summary><remarks>
				<p>The MailboxCollection.BeginRefresh method begins to asynchronously refresh the list of mailboxes represented by this collection.
				This could be either the list of top-level mailboxes or a set of child mailboxes.
				Upon completion, the Imap.EndMailboxRefresh event will be raised.  
				</p>
				<p>If the contents of the MailboxCollection are modified by using the methods of the MailboxCollection
				the collection will be automatically refreshed. MailboxCollection.BeginRefresh would typically only be
				used to refresh the collection if two users are using the same mail account simultaneously.</p>
			</remarks><param name="state">User state information.</param><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception><exception cref="T:System.InvalidOperationException">BeginXXX method used without providing an EndXXX event handler.</exception><returns>An IAsyncResult that represents the asynchronous operation, which could still be pending.</returns>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MailboxCollection.IndexOf(Dart.PowerTCP.Mail.Mailbox)">
            <summary>
				Searches for the specified <i>value</i> and returns the zero-based index of the first occurrence within the entire collection.
			</summary><remarks>
				<p>The collection is searched forward starting at the first element and ending at the last element.</p>
				<p>This method performs a linear search. On average, this is an O(n/2) operation, where n is Count. The longest search is an O(n) operation.</p>
				<p>This method determines equality by calling Object.Equals.</p>
			</remarks><returns>
				The zero-based index of the first occurrence of value within the entire collection, if found; otherwise, -1.
			</returns><param name="value">The Object to locate in the collection.</param>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MailboxCollection.Contains(Dart.PowerTCP.Mail.Mailbox)">
            <summary>
				Determines whether an element is in the collection.
			</summary><remarks>
				<p>This method performs a linear search; therefore, the average execution time is proportional to Count. That is, this method is an O(n) operation, where n is Count.</p>
				<p>This method determines equality by calling Object.Equals.</p>
			</remarks><param name="value">The Object to locate in the collection. The element to locate can be a null reference (Nothing in Visual Basic). </param><returns>
				true if item is found in the collection; otherwise, false.
			</returns>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MailboxCollection.Add(System.Object)">
            <summary>Always throws an InvalidOperationException.</summary><remarks>
				<p>Use MailboxCollection.Add(string) to add a new mailbox.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MailboxCollection.CopyTo(System.Array)">
            <summary>
				Copies the entire collection to a compatible one-dimensional Array.
			</summary><remarks>
				<p>The specified array must be of a compatible type.</p>
				<p>This method uses Array.Copy to copy the elements.</p>
			</remarks><param name="array">The one-dimensional Array that is the destination of the elements copied from ArrayList. The Array must have zero-based indexing.</param><exception cref="T:System.ArgumentNullException">array is a null reference (Nothing in Visual Basic).</exception><exception cref="T:System.ArgumentException">array is multidimensional.</exception><exception cref="T:System.InvalidCastException">The type of the source ArrayList cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MailboxCollection.Insert(System.Int32,System.Object)">
            <summary>
				Inserts an element into the collection at the specified index.
			</summary><remarks>
				<p>If Count already equals Capacity, the capacity of the list is doubled by automatically reallocating the internal array before the new element is inserted.</p>
				<p>If index is equal to Count, value is added to the end of ArrayList.</p>
				<p>In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hashtable.</p>
			</remarks><param name="index">The zero-based index at which value should be inserted.</param><param name="value">The Object to insert.</param><exception cref="T:System.ArgumentOutOfRangeException">
			index is less than zero. 
			<P>-or-</P>
				<P>index is greater than Count.</P>
			</exception><exception cref="T:System.NotSupportedException">
			The ArrayList is read-only. 
			<p>-or-</p>
				<p>The ArrayList has a fixed size.</p>
			</exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MailboxCollection.IndexOf(System.Object)">
            <summary>
				Searches for the specified <i>value</i> and returns the zero-based index of the first occurrence within the entire collection.
			</summary><remarks>
				<p>The collection is searched forward starting at the first element and ending at the last element.</p>
				<p>This method performs a linear search. On average, this is an O(n/2) operation, where n is Count. The longest search is an O(n) operation.</p>
				<p>This method determines equality by calling Object.Equals.</p>
			</remarks><returns>
				The zero-based index of the first occurrence of value within the entire collection, if found; otherwise, -1.
			</returns><param name="value">The Object to locate in the collection.</param>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MailboxCollection.Contains(System.Object)">
            <summary>
				Determines whether an element is in the collection.
			</summary><remarks>
				<p>This method performs a linear search; therefore, the average execution time is proportional to Count. That is, this method is an O(n) operation, where n is Count.</p>
				<p>This method determines equality by calling Object.Equals.</p>
			</remarks><param name="value">The Object to locate in the collection. The element to locate can be a null reference (Nothing in Visual Basic). </param><returns>
				true if item is found in the collection; otherwise, false.
			</returns>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MailboxCollection.Remove(System.Object)">
            <summary>Removes a mailbox from the server.</summary><remarks>
				<p>The MailboxCollection.Remove method removes the mailbox which is equal to
				<i>value</i> from the server by sending the IMAP DELETE command.</p>
				<p>After calling this method, the MailboxCollection will be automatically updated to
				reflect the current state of the collection. There is no need to explicitly call MailboxCollection.Refresh.
				In addition, the object in the coll
				</p>
			</remarks><param name="value">The object representing the mailbox to remove.</param><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad IMAP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MailboxCollection.RemoveAt(System.Int32)">
            <summary>Removes an element at the specified index from the collection.</summary><member/><param name="index">The zero-based index of the element to remove.</param><exception cref="T:System.ArgumentOutOfRangeException">
				<I>index</I> is less than zero. 
			<P>-or-</P>
				<P>
					<I>index</I> is equal to or greater than Count.</P>
			</exception><remarks>
				<p>When an item is removed, the elements that follow the removed element move up to occupy the vacated spot.</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.MailboxCollection.Item(System.Int32)">
            <summary>
				Gets or sets the element at the specified index.
			</summary><param name="index">The zero-based index of the element to get or set.</param><value>The element at the specified index.</value><exception cref="T:System.ArgumentOutOfRangeException">
				<I>Index</I> is less than zero. 
<P>-or-</P>
				<P>
					<I>Index</I> is equal to or greater than <A href="frlrfsystemcollectionsarraylistclasscounttopic.htm">Count</A>.</P>
			</exception><remarks>
				<p>This property provides the ability to access a specific element in the 
collection by using the following syntax: <CODE class="ce">myCollection[Index]</CODE>.</p>
				<p>
				Note, intellisense may not work on members of objects referenced by using this indexer.
				If you would like intellisense to work, get the object referenced by the indexer into 
				it's own variable.
				</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.MailboxCollection.Item(System.String)">
            <summary>Gets the element with the specified <i>name</i>.</summary><remarks>
				<p>This method performs a linear search, returning the Mailbox with
			the Mailbox.Name equal to <i>name</i>.</p>
			</remarks><returns>If a mailbox with a name matching <i>name</i> is found, this method returns the Mailbox object
			representing that mailbox; null otherwise.</returns><param name="name">The mailbox name to search for.</param>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates logging into an IMAP server, copying read messages to a Deleted mailbox, and deleting them.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub DoMove()
   ' Demonstrate moving Read messages from "INBOX" to a "Deleted Items" box
   Try
      ' Do synchronous login with AutoList
      Imap1.Login("myServer", "myAccount", "myPassword")

      ' Create Mailbox objects for easier reference
      Dim InboxBox As Mailbox = Imap1.CurrentMailbox ' After Login with AutoList, this will be "INBOX"
      Dim DeletedBox As Mailbox = Imap1.Mailboxes("Deleted Items")

      ' Update Messages Count in "Deleted Items" box
      DeletedBox.Refresh()

      ' Display Messages Count in both boxes
      LabelDisplay.Text = InboxBox.Messages.Count.ToString() + "  " + DeletedBox.Messages.Count.ToString()

      ' Get an array of ImapMessages with just flags
      Dim Messages As ImapMessage() = InboxBox.Get(InboxBox.Messages(0), InboxBox.Messages(InboxBox.Messages.Count-1), ImapMessageSections.Flags)

      ' Copy Read Messages to "Deleted Items" box and Mark them for Deletion
      Dim Msg as ImapMessage
      For Each Msg in Messages
        If Msg.Seen Then 'If Seen flag is set 
           Msg.CopyTo(DeletedBox) ' Copy to "Deleted Items" box
           Msg.Delete = Grue ' Set deleted flag in "INBOX"
        End If
      Next

      'Permanently Remove Copied Messages from "INBOX"
      InboxBox.Purge()

      'Update Messages Count in "Deleted Items"
      DeletedBox.Refresh()

      'Display new Messages Counts
      LabelDisplay.Text = InboxBox.Messages.Count.ToString() + "  " + DeletedBox.Messages.Count.ToString()

      'Logout from server
      Imap1.Logout()
   
   Catch Ex As Exception
       ' Show MessageBox if error occurs
       MessageBox.Show(Ex.Message, "Error Message", MessageBoxButtons.OK, MessageBoxIcon.Error)
   End Try
End Sub
<span class="lang">[C#]</span>
private void DoMove()
{
   //Demonstrate moving Read messages from "INBOX" to a "Deleted Items" box
   try
   {
      //Do synchronous login with AutoList
      imap1.Login("myServer", "myAccount", "myPassword");

      //Create Mailbox objects for easier reference
     Mailbox inboxBox = imap1.CurrentMailbox; //After Login with AutoList, this will be "INBOX"
     Mailbox deletedBox = imap1.Mailboxes["Deleted Items"];

     //Update Messages Count in "Deleted Items" box
     deletedBox.Refresh();

     //Display Messages Count in both boxes
     labelDisplay.Text = inboxBox.Messages.Count.ToString() + "  " + deletedBox.Messages.Count.ToString();

     //Get an array of ImapMessages with just flags
     ImapMessage[] messages = inboxBox.Get(inboxBox.Messages[0], inboxBox.Messages[inboxBox.Messages.Count-1], ImapMessageSections.Flags);

     //Copy Read Messages to "Deleted Items" box and Mark them for Deletion
     foreach (ImapMessage msg in messages)
     {
       if (msg.Seen) //If Seen flag is set
       {
          msg.CopyTo(deletedBox); //Copy to "Deleted Items" box
          msg.Delete = true; //Set deleted flag in "INBOX"
       }
     }

     //Permanently Remove Copied Messages from "INBOX"
     inboxBox.Purge();

     //Update Messages Count in "Deleted Items"
     deletedBox.Refresh();

     //Display new Messages Counts
     labelDisplay.Text = inboxBox.Messages.Count.ToString() + "  " + deletedBox.Messages.Count.ToString();

     //Logout from server
     imap1.Logout();
   }
   catch (Exception ex)
   {
      //Show MessageBox if error occurs
      MessageBox.Show(ex.Message, "Error Message", MessageBoxButtons.OK, MessageBoxIcon.Error);
   }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="T:Dart.PowerTCP.Mail.HeaderLabelType">
            <summary>
				Enumerates header labels that can be added to a message.
			</summary><remarks>
				<p>To add a header line, simply use the MailHeader.Add method, specifying the header type and value. 
				To add a header line not specified in this enumeration, use the MailHeader.Add method, specifying
				HeaderLabelType.UserDefined as the label, and your entire custom header line as the value.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates the many ways a MIME message can be created.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class. In additon, import System.IO, as a FileStream will be used.

' Create a MessageStream object
Dim msg As New MessageStream()

' Add a normal recipient
msg.To.Add(New MailAddress("you@test.com"))

' Specify the sender
msg.From = New MailAddress("me@test.com")

' Specify the subject
msg.Subject = "Test"

' Add a MIME attachment
msg.Parts.Attachments.Add(New MimeAttachmentStream("C:\files\graph.bmp"))

' Add some MIME text (Setting MessageStream.Text also does this).
msg.Parts.Simple.Add(New MessagePartStream("More text here"))

' Create a complex MIME part from a stored message.
msg.Parts.Complex.Add(New MessageStream(New FileStream("C:\\message.eml", FileMode.Open)))

' Create a custom MIME boundary to use. (the component will 
' create a default MIME boundary to use if this isn't specified)
msg.MimeBoundary = "----MyBoundary-----"

' Override automatic date setting
msg.Date = ""

' Add a header line.
msg.Header.Add(HeaderLabelType.Organization, "My Organization")

' Now add a custom header line.
msg.Header.Add("X-My-Field: My Value")

' Specify the server
Smtp1.Server = "mail.test.com"

' Send the message
Smtp1.Send(msg)
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class. In addition, import System.IO, as a FileStream will be used.\

// Create a MessageStream object
MessageStream msg = new MessageStream();

// Add a normal recipient
msg.To.Add(new MailAddress("you@test.com"));

// Specify the sender
msg.From = new MailAddress("me@test.com");

// Specify the subject
msg.Subject = "Test";

// Add a MIME attachment
msg.Parts.Attachments.Add(new MimeAttachmentStream("C:\\files\\graph.bmp"));

// Add some MIME text (MessageStream.Text also does this).
msg.Parts.Simple.Add(new MessagePartStream("More text here"));
		
// Create a complex MIME part from a stored message.
msg.Parts.Complex.Add(new MessageStream(new FileStream("C:\\message.eml", FileMode.Open)));

// Create a custom MIME boundary to use. (the component will 
// create a default MIME boundary to use if this isn't specified)
msg.MimeBoundary = "----MyBoundary-----";

// Override automatic date setting
msg.Date = "";

// Add a header line.
msg.Header.Add(HeaderLabelType.Organization, "My Organization");

// Now add a custom header line.
msg.Header.Add("X-My-Field: My Value");

// Specify the server
smtp1.Server = "mail.test.com";

// Send the message
smtp1.Send(msg);
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.To">
            <summary>
				"To:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.CC">
            <summary>
				"CC:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.AlsoControl">
            <summary>
				"Also-Control:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.AlternateRecipient">
            <summary>
				"Alternate-Recipient:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.ApparentlyTo">
            <summary>
				"Apparently-To:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.Approved">
            <summary>
				"Approved:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.ArticleNames">
            <summary>
				"Article-Names:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.ArticleUpdates">
            <summary>
				"Article-Updates:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.AutoForwarded">
            <summary>
				"Auto-Forwarded:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.Comments">
            <summary>
				"Comments:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.ContentBase">
            <summary>
				"Content-Base:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.ContentConversion">
            <summary>
				"Content-Conversion:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.ContentDescription">
            <summary>
				"Content-Description:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.ContentDisposition">
            <summary>
				"Content-Disposition:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.ContentID">
            <summary>
				"Content-ID:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.ContentIdentifier">
            <summary>
				"Content-Identifier:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.ContentLanguage">
            <summary>
				"Content-Language:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.ContentLength">
            <summary>
				"Content-Length:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.ContentLocation">
            <summary>
				"Content-Location:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.ContentMD5">
            <summary>
				"Content-MD5:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.ContentReturn">
            <summary>
				"Content-Return:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.ContentSGMLEntity">
            <summary>
				"Content-SGML-Entity:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.ContentTransferEncoding">
            <summary>
				"Content-Transfer-Encoding:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.ContentType">
            <summary>
				"Content-Type:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.Control">
            <summary>
				"Control:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.Conversion">
            <summary>
				"Conversion:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.ConversionWithLoss">
            <summary>
				"Conversion-With-Loss:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.Date">
            <summary>
				"Date:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.DeliveryDate">
            <summary>
				"Delivery-Date:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.DeliveryReport">
            <summary>
				"Delivery-Report:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.DiscardedX400IPMSExtensions">
            <summary>
				"Discarded-X400-IPMS-Extensions:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.DiscardedX400MTSExtensions">
            <summary>
				"Discarded-X400-MTS-Extensions:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.DiscloseRecipients">
            <summary>
				"Disclose-Recipients:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.Distribution">
            <summary>
				"Distribution:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.DLExpansionHistoryIndication">
            <summary>
				"DL-Expansion-History-Indication:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.Encoding">
            <summary>
				"Encoding:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.ErrorsTo">
            <summary>
				"Errors-To:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.Expires">
            <summary>
				"Expires:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.Fax">
            <summary>
				"Fax:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.Fcc">
            <summary>
				"Fcc:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.FollowupTo">
            <summary>
				"Followup-To:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.ForComment">
            <summary>
				"For-Comment:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.ForHandling">
            <summary>
				"For-Handling:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.From">
            <summary>
				"From:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.GenerateDeliveryReport">
            <summary>
				"Generate-Delivery-Report:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.Importance">
            <summary>
				"Importance:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.InReplyTo">
            <summary>
				"In-Reply-To:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.IncompleteCopy">
            <summary>
				"Incomplete-Copy:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.Keywords">
            <summary>
				"Keywords:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.Language">
            <summary>
				"Language:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.Lines">
            <summary>
				"Lines:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.MailSystemVersion">
            <summary>
				"Mail-System-Version:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.Mailer">
            <summary>
				"X-Mailer:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.MessageID">
            <summary>
				"Message-ID"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.MessageType">
            <summary>
				"Message-Type:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.MIMEVersion">
            <summary>	
				"MIME-Version:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.Newsgroups">
            <summary>
				"Newsgroups:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.Obsoletes">
            <summary>
				"Obsoletes:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.Organisation">
            <summary>
				"Organisation:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.Organization">
            <summary>
				"Organization:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.OriginalEncodedInformationTypes">
            <summary>
				"Original-Encoded-Information-Types:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.OriginatingClient">
            <summary>
				"Originating-Client:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.Path">
            <summary>
				"Path:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.Phone">
            <summary>
				"Phone:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.Precedence">
            <summary>
				"Precedence:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.PreventNonDeliveryReport">
            <summary>
				"Prevent-NonDelivery-Report:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.XPriority">
            <summary>
				"X-Priority:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.Received">
            <summary>
				"Received:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.References">
            <summary>
				"References:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.ReplyBy">
            <summary>
				"Reply-By:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.ReplyTo">
            <summary>
				"Reply-To:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.ReturnPath">
            <summary>
				"Return-Path:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.ReturnReceiptTo">
            <summary>
				"Return-Receipt-To:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.SeeAlso">
            <summary>
				"See-Also:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.Sender">
            <summary>
				"Sender:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.Sensitivity">
            <summary>
				"Sensitivity:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.Status">
            <summary>
				"Status:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.Subject">
            <summary>
				"Subject:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.Summary">
            <summary>
				"Summary:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.Supersedes">
            <summary>
				"Supersedes:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.Telefax">
            <summary>
				"Telefax:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.X400ContentReturn">
            <summary>
				"X400-Content-Return:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.XMailer">
            <summary>
				"X-Mailer:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.XNewsreader">
            <summary>
				"X-Newsreader:"
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.HeaderLabelType.Xref">
            <summary>
				"Xref:"
			</summary>
        </member>
        <member name="T:Dart.PowerTCP.Mail.MailHeader">
            <summary>
				Collection representing the header of an Internet email message.
			</summary><remarks>
				<p>When using PowerTCP Secure Mail for .NET, mail header lines are managed by 
				accessing the MessageStream.Header collection. Since this class inherits from ArrayList
				common ArrayList members can be used such as Count, Add, Remove, Sort, Clear, etc. In addition
				some members are available which are specific to a mail header. For example, MailHeader.MaxLineLength
				specifies the maximum size for a header line.</p>
				<p>Some header lines are added by use of a high-level member. For example, setting MessageStream.Subject will
				add a "Subject:" header line to this collection.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MailHeader.#ctor">
            <summary>
				Initializes a new instance of the MailHeader class.
			</summary><remarks>
				<p>The default constructor creates a new instance of the MailHeader class that is empty.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MailHeader.#ctor(System.String)">
            <summary>
				Initializes a new instance of the MailHeader class.
			</summary><remarks>
				<p>This constructor creates a new instance of the MailHeader class, filling the object
				with the data contained within <i>header</i>. <i>header</i> should contain header fields
				and labels in the format "label: field" and should be delimited with CRLFs. If a header field is added that is also encapsulated by a high-level
				property (for example, the "Subject:" header line is also encapsulated by MessageStream.Subject) the data 
				will be propagated to this property.</p>
			</remarks><param name="header">A <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> containing CRLF delimited header fields and labels, terminated with CRLFCRLF.</param>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MailHeader.#ctor(System.IO.Stream)">
            <summary>
				Initializes a new instance of the MailHeader class.
			</summary><remarks>
				<p>This constructor creates a new instance of the MailHeader class, filling the object
				with the data contained within <i>header</i>. <i>header</i> should contain header fields
				and labels in the format "label: field" and should be delimited with CRLFs. If a header field is added that is also encapsulated by a high-level
				property (for example, the "Subject:" header line is also encapsulated by MessageStream.Subject) the data 
				will be propagated to this property.</p>
			</remarks><param name="header">A <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> containing CRLF delimited header fields and labels, terminated with CRLFCRLF.</param>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MailHeader.Add(Dart.PowerTCP.Mail.HeaderLabelType,System.String)">
            <summary>
				Add a header line to the MailHeader collection.
			</summary><param name="label">A HeaderLabelType representing the header label.</param><param name="value">A string representing the header value.</param><returns>The index at which the <i>labelValueString</i> was added.</returns><remarks><p>Use this method to add a header line to the MailHeader collection. The HeaderLabelType enumeration enumerates most commonly used
			header types, the string <i>value</i> modifies the header label type. An example of adding a heade using this method is 
			<code class="ce">MailHeader.Add(HeaderLabelType.Organisation, "Dart");</code> which adds the header line "Organisation: Dart".</p>
			<p>Some header lines are encapsulated by high-level properties. For example, the "Subject:" header line is also encapsulated by the
			MessageStream.Subject property. If a header line is added that is also encapsulated by a high-level property, the value of the header line
			will be propagated to the high-level property.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates the many ways a MIME message can be created.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class. In additon, import System.IO, as a FileStream will be used.

' Create a MessageStream object
Dim msg As New MessageStream()

' Add a normal recipient
msg.To.Add(New MailAddress("you@test.com"))

' Specify the sender
msg.From = New MailAddress("me@test.com")

' Specify the subject
msg.Subject = "Test"

' Add a MIME attachment
msg.Parts.Attachments.Add(New MimeAttachmentStream("C:\files\graph.bmp"))

' Add some MIME text (Setting MessageStream.Text also does this).
msg.Parts.Simple.Add(New MessagePartStream("More text here"))

' Create a complex MIME part from a stored message.
msg.Parts.Complex.Add(New MessageStream(New FileStream("C:\\message.eml", FileMode.Open)))

' Create a custom MIME boundary to use. (the component will 
' create a default MIME boundary to use if this isn't specified)
msg.MimeBoundary = "----MyBoundary-----"

' Override automatic date setting
msg.Date = ""

' Add a header line.
msg.Header.Add(HeaderLabelType.Organization, "My Organization")

' Now add a custom header line.
msg.Header.Add("X-My-Field: My Value")

' Specify the server
Smtp1.Server = "mail.test.com"

' Send the message
Smtp1.Send(msg)
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class. In addition, import System.IO, as a FileStream will be used.\

// Create a MessageStream object
MessageStream msg = new MessageStream();

// Add a normal recipient
msg.To.Add(new MailAddress("you@test.com"));

// Specify the sender
msg.From = new MailAddress("me@test.com");

// Specify the subject
msg.Subject = "Test";

// Add a MIME attachment
msg.Parts.Attachments.Add(new MimeAttachmentStream("C:\\files\\graph.bmp"));

// Add some MIME text (MessageStream.Text also does this).
msg.Parts.Simple.Add(new MessagePartStream("More text here"));
		
// Create a complex MIME part from a stored message.
msg.Parts.Complex.Add(new MessageStream(new FileStream("C:\\message.eml", FileMode.Open)));

// Create a custom MIME boundary to use. (the component will 
// create a default MIME boundary to use if this isn't specified)
msg.MimeBoundary = "----MyBoundary-----";

// Override automatic date setting
msg.Date = "";

// Add a header line.
msg.Header.Add(HeaderLabelType.Organization, "My Organization");

// Now add a custom header line.
msg.Header.Add("X-My-Field: My Value");

// Specify the server
smtp1.Server = "mail.test.com";

// Send the message
smtp1.Send(msg);
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MailHeader.Add(System.String)">
            <summary>
				Add a header line to the MailHeader collection.
			</summary><param name="labelValueString">A string representing a header line.</param><returns>The index at which the <i>labelValueString</i> was added to the collection.</returns><remarks><p>Use this method to add a string representing a header line to the MailHeader collection.
			<i>labelValueString</i> should be in the format "Label: Value".</p>
			<p>Some header lines are encapsulated by high-level properties. For example, the "Subject:" header line is also encapsulated by the
			MessageStream.Subject property. If a header line is added that is also encapsulated by a high-level property, the value of the header line
			will be propagated to the high-level property.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates the many ways a MIME message can be created.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class. In additon, import System.IO, as a FileStream will be used.

' Create a MessageStream object
Dim msg As New MessageStream()

' Add a normal recipient
msg.To.Add(New MailAddress("you@test.com"))

' Specify the sender
msg.From = New MailAddress("me@test.com")

' Specify the subject
msg.Subject = "Test"

' Add a MIME attachment
msg.Parts.Attachments.Add(New MimeAttachmentStream("C:\files\graph.bmp"))

' Add some MIME text (Setting MessageStream.Text also does this).
msg.Parts.Simple.Add(New MessagePartStream("More text here"))

' Create a complex MIME part from a stored message.
msg.Parts.Complex.Add(New MessageStream(New FileStream("C:\\message.eml", FileMode.Open)))

' Create a custom MIME boundary to use. (the component will 
' create a default MIME boundary to use if this isn't specified)
msg.MimeBoundary = "----MyBoundary-----"

' Override automatic date setting
msg.Date = ""

' Add a header line.
msg.Header.Add(HeaderLabelType.Organization, "My Organization")

' Now add a custom header line.
msg.Header.Add("X-My-Field: My Value")

' Specify the server
Smtp1.Server = "mail.test.com"

' Send the message
Smtp1.Send(msg)
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class. In addition, import System.IO, as a FileStream will be used.\

// Create a MessageStream object
MessageStream msg = new MessageStream();

// Add a normal recipient
msg.To.Add(new MailAddress("you@test.com"));

// Specify the sender
msg.From = new MailAddress("me@test.com");

// Specify the subject
msg.Subject = "Test";

// Add a MIME attachment
msg.Parts.Attachments.Add(new MimeAttachmentStream("C:\\files\\graph.bmp"));

// Add some MIME text (MessageStream.Text also does this).
msg.Parts.Simple.Add(new MessagePartStream("More text here"));
		
// Create a complex MIME part from a stored message.
msg.Parts.Complex.Add(new MessageStream(new FileStream("C:\\message.eml", FileMode.Open)));

// Create a custom MIME boundary to use. (the component will 
// create a default MIME boundary to use if this isn't specified)
msg.MimeBoundary = "----MyBoundary-----";

// Override automatic date setting
msg.Date = "";

// Add a header line.
msg.Header.Add(HeaderLabelType.Organization, "My Organization");

// Now add a custom header line.
msg.Header.Add("X-My-Field: My Value");

// Specify the server
smtp1.Server = "mail.test.com";

// Send the message
smtp1.Send(msg);
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MailHeader.Add(System.Object)">
            <summary>
				Add a header line to the MailHeader collection.
			</summary><param name="labelValueString">An object that can be cast to a string representing a header line.</param><returns>The index at which the header line was added to the collection.</returns><remarks><p>Use this method to add an object which can be cast to a string representing a header line to the MailHeader collection.
			<i>labelValueString</i> should be in the format "Label: Value".</p>
			<p>Some header lines are encapsulated by high-level properties. For example, the "Subject:" header line is also encapsulated by the
			MessageStream.Subject property. If a header line is added that is also encapsulated by a high-level property, the value of the header line
			will be propagated to the high-level property.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates the many ways a MIME message can be created.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class. In additon, import System.IO, as a FileStream will be used.

' Create a MessageStream object
Dim msg As New MessageStream()

' Add a normal recipient
msg.To.Add(New MailAddress("you@test.com"))

' Specify the sender
msg.From = New MailAddress("me@test.com")

' Specify the subject
msg.Subject = "Test"

' Add a MIME attachment
msg.Parts.Attachments.Add(New MimeAttachmentStream("C:\files\graph.bmp"))

' Add some MIME text (Setting MessageStream.Text also does this).
msg.Parts.Simple.Add(New MessagePartStream("More text here"))

' Create a complex MIME part from a stored message.
msg.Parts.Complex.Add(New MessageStream(New FileStream("C:\\message.eml", FileMode.Open)))

' Create a custom MIME boundary to use. (the component will 
' create a default MIME boundary to use if this isn't specified)
msg.MimeBoundary = "----MyBoundary-----"

' Override automatic date setting
msg.Date = ""

' Add a header line.
msg.Header.Add(HeaderLabelType.Organization, "My Organization")

' Now add a custom header line.
msg.Header.Add("X-My-Field: My Value")

' Specify the server
Smtp1.Server = "mail.test.com"

' Send the message
Smtp1.Send(msg)
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class. In addition, import System.IO, as a FileStream will be used.\

// Create a MessageStream object
MessageStream msg = new MessageStream();

// Add a normal recipient
msg.To.Add(new MailAddress("you@test.com"));

// Specify the sender
msg.From = new MailAddress("me@test.com");

// Specify the subject
msg.Subject = "Test";

// Add a MIME attachment
msg.Parts.Attachments.Add(new MimeAttachmentStream("C:\\files\\graph.bmp"));

// Add some MIME text (MessageStream.Text also does this).
msg.Parts.Simple.Add(new MessagePartStream("More text here"));
		
// Create a complex MIME part from a stored message.
msg.Parts.Complex.Add(new MessageStream(new FileStream("C:\\message.eml", FileMode.Open)));

// Create a custom MIME boundary to use. (the component will 
// create a default MIME boundary to use if this isn't specified)
msg.MimeBoundary = "----MyBoundary-----";

// Override automatic date setting
msg.Date = "";

// Add a header line.
msg.Header.Add(HeaderLabelType.Organization, "My Organization");

// Now add a custom header line.
msg.Header.Add("X-My-Field: My Value");

// Specify the server
smtp1.Server = "mail.test.com";

// Send the message
smtp1.Send(msg);
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MailHeader.Insert(System.Int32,System.Object)">
            <summary>
				Inserts an element into the collection at the specified index.
			</summary><remarks>
				<p>If Count already equals Capacity, the capacity of the list is doubled by automatically reallocating the internal array before the new element is inserted.</p>
				<p>If index is equal to Count, value is added to the end of ArrayList.</p>
				<p>In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hashtable.</p>
			</remarks><param name="index">The zero-based index at which value should be inserted.</param><param name="value">The Object to insert.</param><exception cref="T:System.ArgumentOutOfRangeException">
			index is less than zero. 
			<P>-or-</P>
				<P>index is greater than Count.</P>
			</exception><exception cref="T:System.NotSupportedException">
			The ArrayList is read-only. 
			<p>-or-</p>
				<p>The ArrayList has a fixed size.</p>
			</exception>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates the many ways a MIME message can be created.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class. In additon, import System.IO, as a FileStream will be used.

' Create a MessageStream object
Dim msg As New MessageStream()

' Add a normal recipient
msg.To.Add(New MailAddress("you@test.com"))

' Specify the sender
msg.From = New MailAddress("me@test.com")

' Specify the subject
msg.Subject = "Test"

' Add a MIME attachment
msg.Parts.Attachments.Add(New MimeAttachmentStream("C:\files\graph.bmp"))

' Add some MIME text (Setting MessageStream.Text also does this).
msg.Parts.Simple.Add(New MessagePartStream("More text here"))

' Create a complex MIME part from a stored message.
msg.Parts.Complex.Add(New MessageStream(New FileStream("C:\\message.eml", FileMode.Open)))

' Create a custom MIME boundary to use. (the component will 
' create a default MIME boundary to use if this isn't specified)
msg.MimeBoundary = "----MyBoundary-----"

' Override automatic date setting
msg.Date = ""

' Add a header line.
msg.Header.Add(HeaderLabelType.Organization, "My Organization")

' Now add a custom header line.
msg.Header.Add("X-My-Field: My Value")

' Specify the server
Smtp1.Server = "mail.test.com"

' Send the message
Smtp1.Send(msg)
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class. In addition, import System.IO, as a FileStream will be used.\

// Create a MessageStream object
MessageStream msg = new MessageStream();

// Add a normal recipient
msg.To.Add(new MailAddress("you@test.com"));

// Specify the sender
msg.From = new MailAddress("me@test.com");

// Specify the subject
msg.Subject = "Test";

// Add a MIME attachment
msg.Parts.Attachments.Add(new MimeAttachmentStream("C:\\files\\graph.bmp"));

// Add some MIME text (MessageStream.Text also does this).
msg.Parts.Simple.Add(new MessagePartStream("More text here"));
		
// Create a complex MIME part from a stored message.
msg.Parts.Complex.Add(new MessageStream(new FileStream("C:\\message.eml", FileMode.Open)));

// Create a custom MIME boundary to use. (the component will 
// create a default MIME boundary to use if this isn't specified)
msg.MimeBoundary = "----MyBoundary-----";

// Override automatic date setting
msg.Date = "";

// Add a header line.
msg.Header.Add(HeaderLabelType.Organization, "My Organization");

// Now add a custom header line.
msg.Header.Add("X-My-Field: My Value");

// Specify the server
smtp1.Server = "mail.test.com";

// Send the message
smtp1.Send(msg);
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MailHeader.Remove(Dart.PowerTCP.Mail.HeaderLabelType)">
            <summary>
				Remove a header line from the MailHeader collection.
			</summary><param name="type">A HeaderLabelType representing the header label to remove.</param><remarks><p>Use this method to remove a header label from the MailHeader collection. If a header is found matching the
			HeaderLabelType <i>label</i>, that header label will be removed.</p>
			<p>Some header lines are encapsulated by high-level properties. For example, the "Subject:" header line is also encapsulated by the
			MessageStream.Subject property.  If a header line is removed that is also encapsulated by a high-level property, the value of the high-level property
			will be changed to reflect the header.</p>
			</remarks><returns>
				If the specified header line is present, this method returns the removed header value, without the CRLF.
				If the specified header line is not present, this method returns null.
			</returns>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MailHeader.Remove(System.String)">
            <summary>
				Remove a header line from the MailHeader collection.
			</summary><param name="label">A string representing the header label to remove.</param><remarks><p>Use this method to remove a header label from the MailHeader collection. If a header label is found matching the
			string <i>label</i>, that header line will be removed.</p>
			<p>Some header labels are encapsulated by high-level properties. For example, the "Subject:" header line is also encapsulated by the
			MessageStream.Subject property. If a header line is removed that is also encapsulated by a high-level property, the value of the high-level property
			will be changed to reflect the current status of the header.</p>
			</remarks><returns>
				If the specified header line is present, this method returns the value of the removed header, without the CRLF.
				If the specified header line is not present, this method returns null.
			</returns>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MailHeader.ToString">
            <summary>
				Returns all of the elements in the MailHeaders collection as a string.
			</summary><returns>
				A string containing the values of all header lines in the collection.
			</returns><remarks>
				<p>Use this method to return all of the header lines in the MailHeaders collection
				as a string. Header lines will be delimited by CRLF. If a header line
				exceeds MailHeader.MaxLineLength a CRLF + Space will be inserted into the byte array.
				The byte array will be terminated with CRLFCRLF.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MailHeader.GetBytes">
            <summary>
				Returns all of the elements in the MailHeaders collection as an array of bytes
			</summary><returns>
				A byte array containing the values of all header lines in the collection.
			</returns><remarks>
				<p>Use this method to return all of the header lines in the MailHeaders collection
				as an array of bytes. Header lines will be delimited by CRLF. If a header line
				exceeds MailHeader.MaxLineLength a CRLF + Space will be inserted into the byte array.
				The byte array will be terminated with CRLFCRLF.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MailHeader.GetEnumerator">
            <summary>
				Returns an enumerator for the collection.
			</summary><returns>
				An IEnumerator for the entire collection.
			</returns><remarks>
				<P>Enumerators only allow reading the data in the collection. Enumerators cannot 
			be used to modify the underlying collection.</P>
				<P>Initially, the enumerator is positioned before the first element in the 
			collection. <A href="frlrfsystemcollectionsienumeratorclassresettopic.htm">IEnumerator.Reset</A> also 
			brings the enumerator back to this position. At this position, calling <A href="frlrfsystemcollectionsienumeratorclasscurrenttopic.htm">IEnumerator.Current</A> throws 
			an exception. Therefore, you must call <A href="frlrfsystemcollectionsienumeratorclassmovenexttopic.htm">IEnumerator.MoveNext</A> to 
			advance the enumerator to the first element of the collection before reading the 
			value of <B>IEnumerator.Current</B>.</P>
				<P>
					<B>IEnumerator.Current</B> returns the same object until either <B>IEnumerator.MoveNext</B> or 
			<B>IEnumerator.Reset</B> is called. <B>IEnumerator.MoveNext</B> sets <B>IEnumerator.Current</B> to the next 
			element.</P>
				<P>After the end of the collection is passed, the enumerator is positioned after 
			the last element in the collection, and calling <B>IEnumerator.MoveNext</B> returns 
			<B>false</B>. If the last call to <B>IEnumerator.MoveNext</B> returned <B>false</B>, calling 
			<B>IEnumerator.Current</B> throws an exception. To set <B>IEnumerator.Current</B> to the first element 
			of the collection again, you can call <B>IEnumerator.Reset</B> followed by 
			<B>IEnumerator.MoveNext</B>.</P>
				<p>This method is used by the "foreach" construct.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MailHeader.CopyTo(Dart.PowerTCP.Mail.MailHeader,System.Int32)">
            <summary>
				Copies the entire collection to a compatible one-dimensional Array, starting at the specified index of the target array.
			</summary><remarks>
				<p>The specified array must be of a compatible type.</p>
				<p>This method uses Array.Copy to copy the elements.</p>
			</remarks><param name="array">The one-dimensional Array that is the destination of the elements copied from ArrayList. The Array must have zero-based indexing.</param><param name="index">The zero-based index in array at which copying begins.</param><exception cref="T:System.ArgumentNullException">array is a null reference (Nothing in Visual Basic).</exception><exception cref="T:System.ArgumentException">array is multidimensional.</exception><exception cref="T:System.InvalidCastException">The type of the source ArrayList cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="P:Dart.PowerTCP.Mail.MailHeader.MaxLineLength">
            <summary>
				The maximum length of a header line.
			</summary><value>
				An Integer representing the maximum length of a header line. The default
				value is 997.
			</value><remarks>
				<p>If a header line exceeds the value specified by this property, a CRLF + Space will
				be inserted.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.MailHeader.Item(Dart.PowerTCP.Mail.HeaderLabelType)">
            <summary>
				Gets or sets the element matching the specified HeaderLabelType.
			</summary><param name="type">The HeaderLabelType of the header value to get or set.</param><value>The element at the specified index.</value><remarks>
				<p>This property provides the ability to access a specific element in the collection by using the following syntax: <CODE class="ce">myCollection[HeaderLabelType]</CODE>.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.MailHeader.Item(System.String)">
            <summary>
				Gets or sets the element with a header label that matches the <i>index.</i>.
			</summary><param name="label">A string representing the header label, the value of which you would like to get or set.</param><value>The element at the specified index.</value><remarks>
				<p>This property provides the ability to access a specific element in the 
collection by using the following syntax: <CODE class="ce">myCollection[string]</CODE>. A colon must
				be present at the end of <i>index</i> in order for a match to be found.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.MailHeader.Item(System.Int32)">
            <summary>
				Gets or sets the element at the specified index.
			</summary><param name="index">The zero-based index of the element to get or set.</param><value>The element at the specified index.</value><exception cref="T:System.ArgumentOutOfRangeException">
				<I>Index</I> is less than zero. 
<P>-or-</P>
				<P>
					<I>Index</I> is equal to or greater than <A href="frlrfsystemcollectionsarraylistclasscounttopic.htm">Count</A>.</P>
			</exception><remarks>
				<p>This property provides the ability to access a specific element in the 
collection by using the following syntax: <CODE class="ce">myCollection[Index]</CODE>.</p>
				<p>
				Note, intellisense may not work on members of objects referenced by using this indexer.
				If you would like intellisense to work, get the object referenced by the indexer into 
				it's own variable.
				</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="T:Dart.PowerTCP.Mail.MessagePartStream">
            <summary>
				Represents a simple inline MIME part. 
			</summary><remarks>
				<p>The MessagePartStream object encapsulates a simple inline MIME part.
				Most commonly, this part will be MIME text. Common usage will probably be similar to
				the following.</p>
				<p><b>Creating a MessagePartStream</b> will most commonly be performed by creating a new
				instance of a MessagePartStream object, passing the text for the part. This object can then 
				be added to a MessageStream object by using <a href="Dart.PowerTCP.Mail.MessagePartStreams.Add.html">MessageStream.Parts.Simple.Add</a>.</p>
				<p><b>Accessing a MessagePartStream</b> will most commonly involve iterating through the
				<a href="Dart.PowerTCP.Mail.Parts.Simple.html">MessageStream.Parts.Simple</a> collection and accessing the <a href="Dart.PowerTCP.Mail.MessagePartStream.Text.html">MessageStream.Parts.Simple[n].Text</a> property
				(for the unencoded text) or the <a href="Dart.PowerTCP.Mail.MessagePartStream.Content.html">MessageStream.Parts.Simple[n].Content</a> property (for a MemoryStream '
				containing the part content).</p>
				<p>To use MIME attachments use the MimeAttachmentStream object. To use complex
				multi-part MIMe parts, use the MessageStream object.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MessagePartStream.#ctor">
            <summary>
				Initializes a new MessagePartStream.
			</summary><remarks>
				<p>Use this constructor to create an empty MessagePartStream object.
				Create the part by setting the properties of the MessagePartStream object,
				such as MessagePartStream.Charset, MessagePartStream.Text, MessagePartStream.Type, etc.</p>
				<p>When creating a MessagePartStream using this constructor, MessagePartStream.MimeEncoding
				will default to ContentEncoding.QuotedPrintable.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MessagePartStream.#ctor(System.String)">
            <summary>	
				Initializes a new MessagePartStream with the provided <i>content</i>.
			</summary><remarks>
				<p>Use this constructor to create a MessagePartStream object initialized with <i>content</i>.
				MessagePartStream.Text will contain <i>content</i>.
				Continue creating the part by setting the properties of the MessagePartStream object,
				such as MessagePartStream.Charset, MessagePartStream.Type, etc.</p>
				<p>When creating a MessagePartStream using this constructor, MessagePartStream.MimeEncoding
				will default to ContentEncoding.QuotedPrintable.</p>
			</remarks><param name="content">The string to use to initialize the object.</param>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates the many ways a MIME message can be created.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class. In additon, import System.IO, as a FileStream will be used.

' Create a MessageStream object
Dim msg As New MessageStream()

' Add a normal recipient
msg.To.Add(New MailAddress("you@test.com"))

' Specify the sender
msg.From = New MailAddress("me@test.com")

' Specify the subject
msg.Subject = "Test"

' Add a MIME attachment
msg.Parts.Attachments.Add(New MimeAttachmentStream("C:\files\graph.bmp"))

' Add some MIME text (Setting MessageStream.Text also does this).
msg.Parts.Simple.Add(New MessagePartStream("More text here"))

' Create a complex MIME part from a stored message.
msg.Parts.Complex.Add(New MessageStream(New FileStream("C:\\message.eml", FileMode.Open)))

' Create a custom MIME boundary to use. (the component will 
' create a default MIME boundary to use if this isn't specified)
msg.MimeBoundary = "----MyBoundary-----"

' Override automatic date setting
msg.Date = ""

' Add a header line.
msg.Header.Add(HeaderLabelType.Organization, "My Organization")

' Now add a custom header line.
msg.Header.Add("X-My-Field: My Value")

' Specify the server
Smtp1.Server = "mail.test.com"

' Send the message
Smtp1.Send(msg)
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class. In addition, import System.IO, as a FileStream will be used.\

// Create a MessageStream object
MessageStream msg = new MessageStream();

// Add a normal recipient
msg.To.Add(new MailAddress("you@test.com"));

// Specify the sender
msg.From = new MailAddress("me@test.com");

// Specify the subject
msg.Subject = "Test";

// Add a MIME attachment
msg.Parts.Attachments.Add(new MimeAttachmentStream("C:\\files\\graph.bmp"));

// Add some MIME text (MessageStream.Text also does this).
msg.Parts.Simple.Add(new MessagePartStream("More text here"));
		
// Create a complex MIME part from a stored message.
msg.Parts.Complex.Add(new MessageStream(new FileStream("C:\\message.eml", FileMode.Open)));

// Create a custom MIME boundary to use. (the component will 
// create a default MIME boundary to use if this isn't specified)
msg.MimeBoundary = "----MyBoundary-----";

// Override automatic date setting
msg.Date = "";

// Add a header line.
msg.Header.Add(HeaderLabelType.Organization, "My Organization");

// Now add a custom header line.
msg.Header.Add("X-My-Field: My Value");

// Specify the server
smtp1.Server = "mail.test.com";

// Send the message
smtp1.Send(msg);
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MessagePartStream.#ctor(System.String,Dart.PowerTCP.Mail.ContentType,Dart.PowerTCP.Mail.ContentEncoding,System.String)">
            <summary>	
				Initializes a new MessagePartStream with the provided parameters.
			</summary><remarks>
				<p>Use this constructor to create a MessagePartStream object initialized with <i>content</i>.
				MessagePartStream.Text will contain <i>content</i>.
				Continue creating the part by setting the properties of the MessagePartStream object,
				such as MessagePartStream.Charset, MessagePartStream.Type, etc.</p>
				<p>When creating a MessagePartStream using this constructor, MessagePartStream.MimeEncoding
				will default to ContentEncoding.QuotedPrintable.</p>
			</remarks><param name="content">The string to use to initialize the object.</param><param name="charset">The character set to use for the part.</param><param name="type">A ContentType specifying the content type to use.</param><param name="encoding">A ContentEncoding type specifying the MIME encoding to use.</param>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MessagePartStream.#ctor(System.String,System.String)">
            <summary>	
				Initializes a new MessagePartStream with the provided parameters.
			</summary><remarks>
				<p>Use this constructor to create a MessagePartStream object initialized with <i>content</i>.
				MessagePartStream.Text will contain <i>content</i>.
				Continue creating the part by setting the properties of the MessagePartStream object,
				such as MessagePartStream.Charset, MessagePartStream.Type, etc.</p>
				<p>When creating a MessagePartStream using this constructor, MessagePartStream.MimeEncoding
				will default to ContentEncoding.QuotedPrintable.</p>
			</remarks><param name="content">The string to use to initialize the object.</param><param name="charset">The character set to use for the part.</param>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MessagePartStream.#ctor(System.String,Dart.PowerTCP.Mail.ContentType,Dart.PowerTCP.Mail.ContentEncoding,System.String,System.String)">
            <summary>	
				Initializes a new MessagePartStream with the provided parameters.
			</summary><remarks>
				<p>Use this constructor to create a complete MessagePartStream object.</p>
			</remarks><param name="text">The string to use to initialize the object.</param><param name="type">A ContentType specifying the content type to use.</param><param name="encoding">A ContentEncoding type specifying the MIME encoding to use.</param><param name="charset">The character set to use for the part.</param><param name="fileName">The filename to use for the part.</param>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MessagePartStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
				Reads at least one byte of data from the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> and copies it into the provided buffer. 
			</summary><param name="buffer">The storage location for the received data.</param><param name="offset">The zero-based position in the buffer at which to store the received data.</param><param name="count">The maximum number of bytes to read.</param><returns>
				The total number of bytes read into the buffer.
			</returns><exception cref="T:System.IO.IOException">Thrown when the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> is not readable.</exception><exception cref="T:System.ArgumentNullException">Thrown when the buffer or callback is null.</exception><exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is less than zero or when count is less than or equal to zero.</exception><exception cref="T:System.ArgumentException">Thrown when the (offset + count) &gt; buffer.Length.</exception><remarks>
				<p>This method reads the bytes from the Stream to <i>buffer</i>, starting from the 
				position specified by <i>offset</i> and reading the number of bytes specified by <i>count</i>.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MessagePartStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
				Writes a sequence of bytes to the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> and returns when the operation is complete.
			</summary><param name="buffer">The storage location for the written data.</param><param name="offset">The zero-based position in the buffer from which to begin writing from.</param><param name="count">The exact number of bytes to write.</param><exception cref="T:System.IO.IOException">Thrown when the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> is not writable.</exception><exception cref="T:System.ArgumentNullException">Thrown when the buffer is null.</exception><exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is less than zero or when count is less than or equal to zero.</exception><exception cref="T:System.ArgumentException">Thrown when the (offset + count) &gt; buffer.Length.</exception><remarks>
				<p>This method writes bytes contained in <i>buffer</i> to the Stream, starting from the 
				position specified by <i>offset</i> and writing the number of bytes specified by <i>count</i>.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MessagePartStream.ToString">
            <summary>
				Returns the content of the MessagePartStream as a string.
			</summary><returns>
				A string representing the content of the MessagePartStream.
			</returns><remarks>
				<p>This method returns the same thing as MessagePartStream.Text.</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.MessagePartStream.Text">
            <summary>
				Gets or sets the text for the part.
			</summary><value>
				A string representing the text for the part.
			</value><remarks>
				<p>Gets or sets a string representation of the unencoded text in this object.
				When reading this value, the text returned is converted to a string based on the Charset property.
Also, when setting this value, the text is converted to bytes based on the Charset property
				</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.MessagePartStream.Content">
            <summary>
				Returns a <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> object containing the data of the part represented by the Stream
			</summary><value>
				A <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> object containing the data of the part represented by the Stream.
			</value><remarks>
				<p>Use the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> exposed by this property to write to or read from the AttachmentStream.
			If the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> was created with UseMemoryStreams = true, this property will return a MemoryStream,
			otherwise, it will return a FileStream.
			</p>
				<p>When using a MessagePartStream, this property returns the unencoded text as a MemoryStream.</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.MessagePartStream.Type">
            <summary>
				Gets or sets the "Content-Type" header of the message or part.
			</summary><value>
				A string representing the Content-Type of the message or part.
			</value><remarks>
				<p>The "Content-Type" header notifies receiving mail clients of the type 
				of data contained within the MIME part, enabling them to properly handle the data.
				For example, this value
				could be "text/plain", signifying that the content is displayable text.
				As another example, this value could be "multipart/mixed" or "multipart/alternative"
				signifying that the part contains multiple nested parts.
				</p>
				<p>If the part is not a MIME part or the message is not a MIME message, this property returns an
				empty string.</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.MessagePartStream.ContentType">
            <summary>
				Gets or sets the "Content-Type" header of the message or part.
			</summary><value>
				A string representing the Content-Type of the message or part.
			</value><remarks>
				<p>The "Content-Type" header notifies receiving mail clients of the type 
				of data contained within the MIME part, enabling them to properly handle the data.
				For example, this value
				could be "text/plain", signifying that the content is displayable text.
				As another example, this value could be "multipart/mixed" or "multipart/alternative"
				signifying that the part contains multiple nested parts.
				</p>
				<p>If the part is not a MIME part or the message is not a MIME message, this property returns an
				empty string.</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.MessagePartStream.Header">
            <summary>
				Gets any headers for the part.
			</summary><value>
				A CRLF-delimited string of headers for the part.
			</value><remarks>
				<p>Normally, headers for a part is handled by the object
				and is made accessible as a high-level property. For example, the "Content-Type:" header
				is accessible through the Type property. This property returns a list of all MIME headers for the part.</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.MessagePartStream.Charset">
            <summary>
				Gets and sets the character set used for string/byte array conversions.
			</summary><value>
				A string representing the character set used.
			</value><remarks>
				<p>This value defaults to the language used on the runtime machine (accessible through
				System.Text.Encoding.Default.BodyName). Set this property
				to the desired character set string to override this behavior.
				An example charset for Kanji is "ISO-2022-JP", while standard ASCII is: "ISO-8859-1".
				</p>
				<p>When communicating with clients from other countries set this property based on the standard string defined for the language intended.
				This enables the International client to be able to properly decode the data.
				</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.MessagePartStream.ContentId">
            <summary>
				Provides access to the "Content-ID" header line of the part.
			</summary><value>
				A string representing the value of the "Content-ID" header line.
			</value><remarks>
				<p>This property is used by HTML email to support a link from the HTML content.
					When creating an HTML message using the MessageStream(String) constructor,
					this property will be automatically set.
				</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.MessagePartStream.FileName">
            <summary>
				Gets or sets the file name used for this attachment or part.
			</summary><value>
				A string representing the file name used for this attachment or part.
			</value><remarks>
				<p>When possible, this property is set by information available about the file.
				When creating attachments, this information is obtained by information passed into the constructor.
				For example, if the attachment was created from a FileStream, this property is derived from the
				FileStream.Name property. If you wish to change the filename, simply set this property to a different value.
				</p>
				<p>When getting attachments, this information is obtained from information available in the message.
				For example, if the attachment is a MIME part, this property will reflect the filename listed in the "Content-Disposition:"
				header.
				</p>
				<p>If the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> is a MessagePartStream, then this property is read-only.</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.MessagePartStream.Position">
            <summary>
				Gets or sets the current position of this stream.
			</summary><value>
				The current position of this stream.
			</value><remarks>
				<p>If the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> is a CodingStream or a MessageStream or a <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> derived
				from CodingStream or MessageStream, this property can only be set to 0. Setting
				the property to any other value results in a NotSupportedException.</p>
			</remarks><exception cref="T:System.NotSupportedException">The <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> does not support setting the Position to any value except 0.</exception>
        </member>
        <member name="T:Dart.PowerTCP.Mail.Parts">
            <summary>
				The Parts class contains collections of MIME part collections.
			</summary><remarks>
				<p>The Parts class contains all MIME-related collections for the 
				message. The collections are as follows:</p>
				<ul>
					<li>Parts.Attachments, a collection of MimeAttachmentStreams, contains all MIME attachments in the message.</li>
					<li>Parts.Simple, a collection of MessagePartStreams, contains all simple inline MIME parts in the message.</li>
					<li>Parts.Complex, a collection of MessageStreams, contains all complex MIME parts in the message. A complex 
					part is either a mail message (which could then be used as an initializer for a new MessageStream object) or
					has multi-part structure.</li>
				</ul>
				<p>The Parts class is accessable through MessageStream.Parts. All non-Mime parts of the message
				are accessable through MessageStream.NonMime.</p>
				<p>This collection contains all streams sent inside MIME partitions in this message.  Advanced users may wish to add different types of Streams than those supported at the basic level to this object.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates the many ways a MIME message can be created.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class. In additon, import System.IO, as a FileStream will be used.

' Create a MessageStream object
Dim msg As New MessageStream()

' Add a normal recipient
msg.To.Add(New MailAddress("you@test.com"))

' Specify the sender
msg.From = New MailAddress("me@test.com")

' Specify the subject
msg.Subject = "Test"

' Add a MIME attachment
msg.Parts.Attachments.Add(New MimeAttachmentStream("C:\files\graph.bmp"))

' Add some MIME text (Setting MessageStream.Text also does this).
msg.Parts.Simple.Add(New MessagePartStream("More text here"))

' Create a complex MIME part from a stored message.
msg.Parts.Complex.Add(New MessageStream(New FileStream("C:\\message.eml", FileMode.Open)))

' Create a custom MIME boundary to use. (the component will 
' create a default MIME boundary to use if this isn't specified)
msg.MimeBoundary = "----MyBoundary-----"

' Override automatic date setting
msg.Date = ""

' Add a header line.
msg.Header.Add(HeaderLabelType.Organization, "My Organization")

' Now add a custom header line.
msg.Header.Add("X-My-Field: My Value")

' Specify the server
Smtp1.Server = "mail.test.com"

' Send the message
Smtp1.Send(msg)
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class. In addition, import System.IO, as a FileStream will be used.\

// Create a MessageStream object
MessageStream msg = new MessageStream();

// Add a normal recipient
msg.To.Add(new MailAddress("you@test.com"));

// Specify the sender
msg.From = new MailAddress("me@test.com");

// Specify the subject
msg.Subject = "Test";

// Add a MIME attachment
msg.Parts.Attachments.Add(new MimeAttachmentStream("C:\\files\\graph.bmp"));

// Add some MIME text (MessageStream.Text also does this).
msg.Parts.Simple.Add(new MessagePartStream("More text here"));
		
// Create a complex MIME part from a stored message.
msg.Parts.Complex.Add(new MessageStream(new FileStream("C:\\message.eml", FileMode.Open)));

// Create a custom MIME boundary to use. (the component will 
// create a default MIME boundary to use if this isn't specified)
msg.MimeBoundary = "----MyBoundary-----";

// Override automatic date setting
msg.Date = "";

// Add a header line.
msg.Header.Add(HeaderLabelType.Organization, "My Organization");

// Now add a custom header line.
msg.Header.Add("X-My-Field: My Value");

// Specify the server
smtp1.Server = "mail.test.com";

// Send the message
smtp1.Send(msg);
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Parts.#ctor">
            <summary>
				Initializes a new instance of the Parts class. 
			</summary><remarks>
				<p>The default constructor initializes a new Parts class.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Parts.Clear">
            <summary>
				Recursively removes all attachments from the MessageStream.
			</summary><remarks>
				<p>This method clears all attachments from <a href="Dart.PowerTCP.Mail.NonMime.Attachments.html">MessageStream.NonMime.Attachments</a>,
				<a href="Dart.PowerTCP.Mail.Parts.Attachments.html">MessageStream.Parts.Attachments</a>, and recursive attachments contained within 
				<a href="Dart.PowerTCP.Mail.Parts.Complex.html">MessageStream.Parts.Complex</a>.
				</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Parts.Remove(System.Object)">
            <summary>
				Removes the specified object from the collection.
			</summary><param name="obj">The object to remove from the collection.</param><remarks>
			<p>
				Use this method to remove an object from the Parts collection. Since the Parts
				collection actually reflects the value of the other collections (Parts.Attachments,
				<a href="Dart.PowerTCP.Mail.MessageStream.Attachments.html">Parts.Complex[n].Attachments</a>, and NonMime.Attachments) the Remove method of each of
				these collections will be called on <i>obj</i>.
			</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Parts.Add(System.Object)">
            <summary>
				Inserts the specified object into the collection as an MIME part.
			</summary><param name="newStream">A <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> containing data representing a complete MIME part.</param><remarks>
			<p>
				Use this method to add a <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> containing data representing a complete MIME part.
				Generally, MIME parts are added by using the Add method for any of the collections
				contained within Parts (Parts.Attachments.Add, Parts.Simple.Add, or Parts.Complex.Add).
				This method should only be used by advanced users who want to add a custom MIME part.
			</p>
			</remarks><exception cref="T:Dart.PowerTCP.Mail.InvalidParameterTypeException"><i>newStream</i> is not a Stream.</exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Parts.Add(System.IO.Stream)">
            <summary>
				Inserts the specified object into the collection as an MIME part.
			</summary><param name="newStream">A <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> containing data representing a complete MIME part.</param><remarks>
			<p>
				Use this method to add a <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> containing data representing a complete MIME part.
				Generally, MIME parts are added by using the Add method for any of the collections
				contained within Parts (Parts.Attachments.Add, Parts.Simple.Add, or Parts.Complex.Add).
				This method should only be used by advanced users who want to add a custom MIME part.
			</p>
			</remarks><exception cref="T:Dart.PowerTCP.Mail.InvalidParameterTypeException"><i>newStream</i> is not a Stream.</exception>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Parts.Simple">
            <summary>
				Gets or sets a collection of MessagePartStream objects.
			</summary><value>
				A MessagePartStreams collection containing MessagePartStream objects.
			</value><remarks>
				<p>The Parts.Simple property is a MessagePartStreams collection containing simple inline MIME 
				   message parts.
				</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates the many ways a MIME message can be created.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class. In additon, import System.IO, as a FileStream will be used.

' Create a MessageStream object
Dim msg As New MessageStream()

' Add a normal recipient
msg.To.Add(New MailAddress("you@test.com"))

' Specify the sender
msg.From = New MailAddress("me@test.com")

' Specify the subject
msg.Subject = "Test"

' Add a MIME attachment
msg.Parts.Attachments.Add(New MimeAttachmentStream("C:\files\graph.bmp"))

' Add some MIME text (Setting MessageStream.Text also does this).
msg.Parts.Simple.Add(New MessagePartStream("More text here"))

' Create a complex MIME part from a stored message.
msg.Parts.Complex.Add(New MessageStream(New FileStream("C:\\message.eml", FileMode.Open)))

' Create a custom MIME boundary to use. (the component will 
' create a default MIME boundary to use if this isn't specified)
msg.MimeBoundary = "----MyBoundary-----"

' Override automatic date setting
msg.Date = ""

' Add a header line.
msg.Header.Add(HeaderLabelType.Organization, "My Organization")

' Now add a custom header line.
msg.Header.Add("X-My-Field: My Value")

' Specify the server
Smtp1.Server = "mail.test.com"

' Send the message
Smtp1.Send(msg)
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class. In addition, import System.IO, as a FileStream will be used.\

// Create a MessageStream object
MessageStream msg = new MessageStream();

// Add a normal recipient
msg.To.Add(new MailAddress("you@test.com"));

// Specify the sender
msg.From = new MailAddress("me@test.com");

// Specify the subject
msg.Subject = "Test";

// Add a MIME attachment
msg.Parts.Attachments.Add(new MimeAttachmentStream("C:\\files\\graph.bmp"));

// Add some MIME text (MessageStream.Text also does this).
msg.Parts.Simple.Add(new MessagePartStream("More text here"));
		
// Create a complex MIME part from a stored message.
msg.Parts.Complex.Add(new MessageStream(new FileStream("C:\\message.eml", FileMode.Open)));

// Create a custom MIME boundary to use. (the component will 
// create a default MIME boundary to use if this isn't specified)
msg.MimeBoundary = "----MyBoundary-----";

// Override automatic date setting
msg.Date = "";

// Add a header line.
msg.Header.Add(HeaderLabelType.Organization, "My Organization");

// Now add a custom header line.
msg.Header.Add("X-My-Field: My Value");

// Specify the server
smtp1.Server = "mail.test.com";

// Send the message
smtp1.Send(msg);
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Parts.Complex">
            <summary>
				Gets or sets a collection of MessageStream objects.
			</summary><value>
				A MessageStreams collection containing MessageStream objects.
			</value><remarks>
				<p>The Parts.Complex property is a MessageStreams collection containing all complex
				   message parts. A complex part is EITHER a mail message OR has a multi-part structure.
				</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates the many ways a MIME message can be created.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class. In additon, import System.IO, as a FileStream will be used.

' Create a MessageStream object
Dim msg As New MessageStream()

' Add a normal recipient
msg.To.Add(New MailAddress("you@test.com"))

' Specify the sender
msg.From = New MailAddress("me@test.com")

' Specify the subject
msg.Subject = "Test"

' Add a MIME attachment
msg.Parts.Attachments.Add(New MimeAttachmentStream("C:\files\graph.bmp"))

' Add some MIME text (Setting MessageStream.Text also does this).
msg.Parts.Simple.Add(New MessagePartStream("More text here"))

' Create a complex MIME part from a stored message.
msg.Parts.Complex.Add(New MessageStream(New FileStream("C:\\message.eml", FileMode.Open)))

' Create a custom MIME boundary to use. (the component will 
' create a default MIME boundary to use if this isn't specified)
msg.MimeBoundary = "----MyBoundary-----"

' Override automatic date setting
msg.Date = ""

' Add a header line.
msg.Header.Add(HeaderLabelType.Organization, "My Organization")

' Now add a custom header line.
msg.Header.Add("X-My-Field: My Value")

' Specify the server
Smtp1.Server = "mail.test.com"

' Send the message
Smtp1.Send(msg)
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class. In addition, import System.IO, as a FileStream will be used.\

// Create a MessageStream object
MessageStream msg = new MessageStream();

// Add a normal recipient
msg.To.Add(new MailAddress("you@test.com"));

// Specify the sender
msg.From = new MailAddress("me@test.com");

// Specify the subject
msg.Subject = "Test";

// Add a MIME attachment
msg.Parts.Attachments.Add(new MimeAttachmentStream("C:\\files\\graph.bmp"));

// Add some MIME text (MessageStream.Text also does this).
msg.Parts.Simple.Add(new MessagePartStream("More text here"));
		
// Create a complex MIME part from a stored message.
msg.Parts.Complex.Add(new MessageStream(new FileStream("C:\\message.eml", FileMode.Open)));

// Create a custom MIME boundary to use. (the component will 
// create a default MIME boundary to use if this isn't specified)
msg.MimeBoundary = "----MyBoundary-----";

// Override automatic date setting
msg.Date = "";

// Add a header line.
msg.Header.Add(HeaderLabelType.Organization, "My Organization");

// Now add a custom header line.
msg.Header.Add("X-My-Field: My Value");

// Specify the server
smtp1.Server = "mail.test.com";

// Send the message
smtp1.Send(msg);
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Parts.Attachments">
            <summary>
				Gets or sets a collection of MimeAttachmentStream objects.
			</summary><value>
				A MimeAttachmentStreams collection containing MimeAttachmentStream objects.
			</value><remarks>
				<p>The Parts.Attachments property is a MimeAttachmentStreams collection containing all MIME attachments in the 
				message.
				</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates the many ways a MIME message can be created.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class. In additon, import System.IO, as a FileStream will be used.

' Create a MessageStream object
Dim msg As New MessageStream()

' Add a normal recipient
msg.To.Add(New MailAddress("you@test.com"))

' Specify the sender
msg.From = New MailAddress("me@test.com")

' Specify the subject
msg.Subject = "Test"

' Add a MIME attachment
msg.Parts.Attachments.Add(New MimeAttachmentStream("C:\files\graph.bmp"))

' Add some MIME text (Setting MessageStream.Text also does this).
msg.Parts.Simple.Add(New MessagePartStream("More text here"))

' Create a complex MIME part from a stored message.
msg.Parts.Complex.Add(New MessageStream(New FileStream("C:\\message.eml", FileMode.Open)))

' Create a custom MIME boundary to use. (the component will 
' create a default MIME boundary to use if this isn't specified)
msg.MimeBoundary = "----MyBoundary-----"

' Override automatic date setting
msg.Date = ""

' Add a header line.
msg.Header.Add(HeaderLabelType.Organization, "My Organization")

' Now add a custom header line.
msg.Header.Add("X-My-Field: My Value")

' Specify the server
Smtp1.Server = "mail.test.com"

' Send the message
Smtp1.Send(msg)
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class. In addition, import System.IO, as a FileStream will be used.\

// Create a MessageStream object
MessageStream msg = new MessageStream();

// Add a normal recipient
msg.To.Add(new MailAddress("you@test.com"));

// Specify the sender
msg.From = new MailAddress("me@test.com");

// Specify the subject
msg.Subject = "Test";

// Add a MIME attachment
msg.Parts.Attachments.Add(new MimeAttachmentStream("C:\\files\\graph.bmp"));

// Add some MIME text (MessageStream.Text also does this).
msg.Parts.Simple.Add(new MessagePartStream("More text here"));
		
// Create a complex MIME part from a stored message.
msg.Parts.Complex.Add(new MessageStream(new FileStream("C:\\message.eml", FileMode.Open)));

// Create a custom MIME boundary to use. (the component will 
// create a default MIME boundary to use if this isn't specified)
msg.MimeBoundary = "----MyBoundary-----";

// Override automatic date setting
msg.Date = "";

// Add a header line.
msg.Header.Add(HeaderLabelType.Organization, "My Organization");

// Now add a custom header line.
msg.Header.Add("X-My-Field: My Value");

// Specify the server
smtp1.Server = "mail.test.com";

// Send the message
smtp1.Send(msg);
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Parts.Item(System.Int32)">
            <summary>
				Gets or sets the element at the specified index.
			</summary><param name="index">The zero-based index of the element to get or set.</param><value>The element at the specified index.</value><exception cref="T:System.ArgumentOutOfRangeException">
				<I>Index</I> is less than zero. 
<P>-or-</P>
				<P>
					<I>Index</I> is equal to or greater than <A href="frlrfsystemcollectionsarraylistclasscounttopic.htm">Count</A>.</P>
			</exception><remarks>
				<p>This property provides the ability to access a specific element in the 
collection by using the following syntax: <CODE class="ce">myCollection[Index]</CODE>.</p>
				<p>
				Note, intellisense may not work on members of objects referenced by using this indexer.
				If you would like intellisense to work, get the object referenced by the indexer into 
				it's own variable.
				</p>
			</remarks>
        </member>
        <member name="T:Dart.PowerTCP.Mail.MessageStream">
            <summary>
				Represents an email message.
			</summary><remarks>
				<p>The MessageStream object represents an Internet email message. Most mail operations
				with PowerTCP Secure Mail for .NET (both sending and receiving) will require use of the MessageStream object. Many properties
				of the MessageStream object are collections, enabling easy management of message entities. The following
				list contains collections useful when sending or receiving mail:</p>
				<ul>
					<li><b> MessageStream.NonMime </b> contains all non-MIME parts.</li>
					<li><b><a href="Dart.PowerTCP.Mail.NonMime.Text.html">MessageStream.NonMime.Text</a></b> contains the non-MIME text of the message.</li>
					<li><b><a href="Dart.PowerTCP.Mail.NonMime.Attachments.html">MessageStream.NonMime.Attachments</a></b> contains the non-MIME attachments for the message.</li>
					<li><b> MessageStream.Parts </b> contains all MIME parts.</li>
					<li><b><a href="Dart.PowerTCP.Mail.Parts.Simple.html">MessageStream.Parts.Simple</a></b> contains all simple, inline MIME parts (such as MIME text).</li>
					<li><b><a href="Dart.PowerTCP.Mail.Parts.Attachments.html">MessageStream.Parts.Attachments</a></b> contains all MIME attachments.</li>
					<li><b><a href="Dart.PowerTCP.Mail.Parts.Complex.html">MessageStream.Parts.Complex</a></b> contains all complex (multipart) MIME parts.</li>
					<li><b> MessageStream.To </b> contains all normal recipients.</li>
					<li><b> MessageStream.CC </b> contains all carbon-copy recipients.</li>
					<li><b> MessageStream.BCC </b> contains all blind carbon-copy recipients.</li>
					<li><b> MessageStream.Header </b> contains the header for the message.</li>
					<li><b> MessageStream.Attachments </b> contains all the recursive attachments for the entire message (including 
						<a href="Dart.PowerTCP.Mail.NonMime.Attachments.html">MessageStream.NonMime.Attachments</a>, <a href="Dart.PowerTCP.Mail.Parts.Attachments.html">MessageStream.Parts.Attachments</a>, and recursive <a href="Dart.PowerTCP.Mail.Parts.Complex.html">MessageStream.Parts.Complex</a>
						attachments.</li> 
				</ul>
				<p>When using the MessageStream object, message parts are always encoded/decoded "on the fly", which both increases the 
				speed of processing and eliminates use of temp files in encoding/decoding.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates creating a basic MIME message with a single attachment.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Create a MessageStream object
Dim msg As New MessageStream()

' Add a normal recipient
msg.To.Add(New MailAddress("you@test.com"))

' Add a CC recipient
msg.CC.Add(New MailAddress("you2@test.com"))

' Add a BCC recipient
msg.BCC.Add(New MailAddress("you3@test.com"))

' Specify the sender
msg.From = New MailAddress("me@test.com")

' Specify the subject
msg.Subject = "Hello"

' Add some text to the message.
msg.Text = "Hi everyone. How are ya doing?"

' Add an attachment
msg.Attachments.Add("C:\files\graph.jpg")

' Specify the server
Smtp1.Server = "mail.test.com"

' Send the message
Smtp1.Send(msg)
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Create a MessageStream object
MessageStream msg = new MessageStream();

// Add a normal recipient
msg.To.Add(new MailAddress("you@test.com"));

// Add a CC recipient
msg.CC.Add(new MailAddress("you2@test.com"));

// Add a BCC recipient
msg.BCC.Add(new MailAddress("you3@test.com"));

// Specify the sender
msg.From = new MailAddress("me@test.com");

// Specify the subject
msg.Subject = "Hello";

// Add some text to the message.
msg.Text = "Hi everyone. How are ya doing?";

// Add an attachment
msg.Attachments.Add("C:\\files\\graph.jpg");

// Specify the server
smtp1.Server = "mail.test.com";

// Send the message
smtp1.Send(msg);
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MessageStream.#ctor(System.String)">
            <summary>
				Initializes a new instance of the MessageStream object with an HTML-ready email message.
			</summary><remarks>
				<p>This constructor creates a MessageStream object, initializing it with HTML text and resources, creating a ready-to-send email message with a single line of code. Once created,
				altering the MessageStream object is not recommended.</p>
				<p>When using this constructor, the file <i>htmlFileName</i> is scanned for resource links
				(such as the &lt;img&gt; tag specifying an image). These resources are added as MIME parts, and
				the actual HTML tag referencing the resource is modified to reference the resource within the message. The HTML text is stripped
				out and added as a text part for any email client that cannot read HTML formatted email.</p>
				<p>If the HTML file contains any absolute links to resources on the Internet (for example, 
				&lt;img src="http://www.myserver.com/images/mypic.gif" /&gt; they will be unable to be added.
				If an resource is unable to be added, no exception will be thrown.
				</p>
			</remarks><param name="htmlFileName">The HTML file to create a message from.</param>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MessageStream.#ctor(System.IO.Stream,System.String)">
            <summary>
				Initializes a new instance of the MessageStream object with an HTML-ready email message.
			</summary><remarks>
				<p>This constructor creates a MessageStream object, initializing it with HTML text and resources, creating a ready-to-send email message with a single line of code. 
				Once created,
				altering the MessageStream object is not recommended.</p>
				<p>This constructor is provided if you have HTML data in memory that you wish to 
				create an HTML email from.</p>
				<p>The data within the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> <i>html</i> is scanned for resource links 
				(such as the &lt;img&gt; tag specifying an image). The <i>baseDirectory</i>
				parameter is the base directory from which relative urls are computed
				These resources (if found) are added as MIME parts, and the actual HTML tag referencing this resource is modified to reference the resource within the message.
				The HTML text is stripped
				out and added as a text part for any email client that cannot read HTML formatted email.</p>
				<p>If the HTML file contains any absolute links to resources on the Internet (for example, 
				&lt;img src="http://www.myserver.com/images/mypic.gif" /&gt; they will be unchanged.
				</p>
			</remarks><param name="html">The <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> containing HTML file data to create a message from.</param><param name="baseDirectory">The base directory from which relative urls are computed.</param>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MessageStream.Clone">
            <summary>
				Creates a shallow copy of the MessageStream.
			</summary><remarks>
				<p>A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but it does not copy the objects that the references refer to. The references in the new collection point to the same objects that the references in the original collection point to.</p>
				<p>In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MessageStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
				Reads at least one byte of data from the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> and copies it into the provided buffer. 
			</summary><param name="buffer">The storage location for the received data.</param><param name="offset">The zero-based position in the buffer at which to store the received data.</param><param name="count">The maximum number of bytes to read.</param><returns>
				The total number of bytes read into the buffer.
			</returns><exception cref="T:System.IO.IOException">Thrown when the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> is not readable.</exception><exception cref="T:System.ArgumentNullException">Thrown when the buffer or callback is null.</exception><exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is less than zero or when count is less than or equal to zero.</exception><exception cref="T:System.ArgumentException">Thrown when the (offset + count) &gt; buffer.Length.</exception><remarks>
				<p>This method reads the bytes from the Stream to <i>buffer</i>, starting from the 
				position specified by <i>offset</i> and reading the number of bytes specified by <i>count</i>.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MessageStream.Read(System.Byte[])">
            <summary>
				Reads at least one byte of data from the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> and copies it into the provided buffer. 
			</summary><param name="buffer">The storage location for the received data.</param><returns>
				The total number of bytes read into the buffer.
			</returns><exception cref="T:System.IO.IOException">Thrown when the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> is not readable.</exception><exception cref="T:System.ArgumentNullException">Thrown when the buffer or callback is null.</exception><remarks>
				<p>This is a convenience method for all derived classes, calling Read(buffer,0, buffer.Length) on the stream.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MessageStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
				Writes a sequence of bytes to the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> and returns when the operation is complete.
			</summary><param name="buffer">The storage location for the written data.</param><param name="offset">The zero-based position in the buffer from which to begin writing from.</param><param name="count">The exact number of bytes to write.</param><exception cref="T:System.IO.IOException">Thrown when the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> is not writable.</exception><exception cref="T:System.ArgumentNullException">Thrown when the buffer is null.</exception><exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is less than zero or when count is less than or equal to zero.</exception><exception cref="T:System.ArgumentException">Thrown when the (offset + count) &gt; buffer.Length.</exception><remarks>
				<p>This method writes bytes contained in <i>buffer</i> to the Stream, starting from the 
				position specified by <i>offset</i> and writing the number of bytes specified by <i>count</i>.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MessageStream.Write(System.Byte[])">
            <summary>
				Writes a sequence of bytes to the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> and returns when the operation is complete.
			</summary><param name="buffer">The source location of the data to write.</param><exception cref="T:System.IO.IOException">Thrown when the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> is not writable.</exception><exception cref="T:System.ArgumentNullException">Thrown when the buffer is null.</exception><exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is less than zero or when count is less than or equal to zero.</exception><exception cref="T:System.ArgumentException">Thrown when the (offset + count) &gt; buffer.Length.</exception><remarks>
				<p>This method is a convenience overload for all derived classes by writing the entire buffer to the Stream. This method calls Write(buffer, 0, buffer.length).</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MessageStream.ToArray">
            <summary>
				Returns a byte array representation of the encoded message.
			</summary><returns>
				An array of bytes representing the encoded message.
			</returns><remarks>
				<p>This method is provided as a shortcut method to get the
				encoded message as an array of bytes.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MessageStream.CopyStream(System.IO.Stream,System.IO.Stream)">
            <summary>
				Copies the contents of one <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> to another.
			</summary><param name="source">The source <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> to copy from.</param><param name="destination">The destination <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> to copy to.</param><remarks>
				<p><i>source</i> is copied until it cannot be read anymore into <i>destination</i>.  
				Neither <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> has their position reset, though it is generally recommended that the <i>destination</i> Stream's position be set to 0 after this operation is complete.

				It is also generally recommended that both the source and destination <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> positions be set to zero after this operation is completed.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MessageStream.Store(System.IO.Stream)">
            <summary>
				Stores the encoded MessageStream to the provided Stream.
			</summary><param name="destination">The <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> to store the MessageStream to.</param><remarks>
				<p>This method stores the MessageStream to the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> specified by <i>destination</i>. 
					This method is often useful to see the message structure
					for diagnostic purposes.
				</p>
				<p>This method can be considered a reciprocal operation to creating a new MessageStream
				object initialized with an encoded message.
				</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MessageStream.Store(System.String)">
            <summary>
				Stores the encoded MessageStream to the file specified by <i>fileName</i>.
			</summary><param name="fileName">The name of the file to store the MessageStream to.</param><remarks>
				<p>This method stores the MessageStream to the file specified by <i>fileName</i>. 
					This method is often useful to see the message structure
					for diagnostic purposes.
				</p>
				<p>This method can be considered a reciprocal operation to creating a new MessageStream
				object initialized with an encoded message.
				</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MessageStream.ToString">
            <summary>
				Returns a string representation of the encoded message.
			</summary><returns>
				A string representing the encoded message.
			</returns><remarks>
				<p>This method is provided as a shortcut method to get the
				encoded message as a string.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MessageStream.Forward(System.String,System.Boolean)">
            <summary>
				Returns a MessageStream object formatted for a forwarded message.
			</summary><returns>
				A MessageStream object formatted for a forwarded message.
			</returns><param name="text">The new text for the forwarded message.</param><param name="attachment">Determines if an attachment should be created from the forwarded part of the message.</param><remarks>
				<p>If <i>attachment</i> is false, this method will create a second part from the
				original message with Content-Type equal to "Message/RFC822". If <i>attachment</i>
				is true, this method will create an attachment from the original message with 
				Content-Type equal to "Message/RFC822".	 "FW:" will automatically
				be prepended to the subject line of the newly created message.
				</p>
				<p>This method does not change the original message.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MessageStream.Forward(System.String)">
            <summary>
				Returns a MessageStream object formatted for a forwarded message.
			</summary><returns>
				A MessageStream object formatted for a forwarded message.
			</returns><param name="text">The new text for the forwarded message.</param><remarks>
				<p>This method moves this message’s text parts into a part 
				and creates a new part initialized with <i>text</i>. The new message
				contains the original message plus attachments. "FW:" will automatically
				be prepended to the subject line of the newly created message.
				</p>
				<p>This method does not change the original message.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MessageStream.Reply(System.Boolean,System.String,System.String)">
            <summary>
				Returns a MessageStream object formatted for a reply message.
			</summary><returns>
				A MessageStream object formatted for a reply message.
			</returns><param name="all">Specifies if the reply should be for the original sender, or all recipients in the header.</param><param name="text">The new text for the reply message.</param><param name="prompt">Specifies a string to add to the beginning of each CRLF delimited line.</param><remarks>
				<p>This method creates a new part initialized with the text of the message.  Note that the MessageStream object is not aware of who the current user is, so if all is set, the current user’s address should be removed from MessageStream.To. "RE:" will automatically
				be prepended to the subject line.</p>
				<p>This method changes the original message by removing any attachments and adding a new text part.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MessageStream.Reply(System.Boolean,System.String)">
            <summary>
				Returns a MessageStream object formatted for a reply message.
			</summary><returns>
				A MessageStream object formatted for a reply message.
			</returns><param name="all">Specifies if the reply should be for the original sender, or all recipients in the header.</param><param name="text">The new text for the reply message.</param><remarks>
				<p>This method creates a new part initialized with the text of the message.  Note that the MessageStream object is not aware of who the current user is, so if all is set, the current user’s address should be removed from MessageStream.To. "RE:" will automatically
				be prepended to the subject line. A "&gt;" will automatically be added to the beginning of each CRLF delimited line.</p>
				<p>This method changes the original message by removing any attachments and adding a new text part.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MessageStream.ResetPosition">
            <summary>
				Resets the position of the MessageStream and all Streams contained
				within the MessageStreams as resources to 0.
			</summary><remarks>
				<p>This method sets the position of the MessageStream and each resource Stream
				(for example, all MimeAttachmentStreams in MessageStreams.Parts.Attachments) to 0.
				</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MessageStream.#ctor">
            <summary>
				Initializes a new instance of the MessageStream object.
			</summary><remarks>
				<p>This constructor initializes a new instance of the MessageStream 
				object with default values.
				</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates creating a basic MIME message with a single attachment.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Create a MessageStream object
Dim msg As New MessageStream()

' Add a normal recipient
msg.To.Add(New MailAddress("you@test.com"))

' Add a CC recipient
msg.CC.Add(New MailAddress("you2@test.com"))

' Add a BCC recipient
msg.BCC.Add(New MailAddress("you3@test.com"))

' Specify the sender
msg.From = New MailAddress("me@test.com")

' Specify the subject
msg.Subject = "Hello"

' Add some text to the message.
msg.Text = "Hi everyone. How are ya doing?"

' Add an attachment
msg.Attachments.Add("C:\files\graph.jpg")

' Specify the server
Smtp1.Server = "mail.test.com"

' Send the message
Smtp1.Send(msg)
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Create a MessageStream object
MessageStream msg = new MessageStream();

// Add a normal recipient
msg.To.Add(new MailAddress("you@test.com"));

// Add a CC recipient
msg.CC.Add(new MailAddress("you2@test.com"));

// Add a BCC recipient
msg.BCC.Add(new MailAddress("you3@test.com"));

// Specify the sender
msg.From = new MailAddress("me@test.com");

// Specify the subject
msg.Subject = "Hello";

// Add some text to the message.
msg.Text = "Hi everyone. How are ya doing?";

// Add an attachment
msg.Attachments.Add("C:\\files\\graph.jpg");

// Specify the server
smtp1.Server = "mail.test.com";

// Send the message
smtp1.Send(msg);
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MessageStream.Dispose(System.Boolean)">
            <summary>
			Releases all resources associated with the object.
			</summary><remarks>
				<p>The Object.Dispose method abruptly aborts the connection and releases all resources.</p>
				<p>Object.Dispose should ONLY be used to release all resources used by the
object, and the object should not be used subsequently. If an abort is
desired, then Object.Close or Object.Connection.Close if available should be used to terminate
activity and reset the object. The Object cannot be used once Object.Dispose() or Object.Dispose(true) are called.
</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MessageStream.Close">
            <summary>
				Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream.
			</summary>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MessageStream.Dispose">
            <summary>
			Releases all resources associated with the object.
			</summary><remarks>
				<p>The Object.Dispose method abruptly aborts the connection and releases all resources.</p>
				<p>Object.Dispose should ONLY be used to release all resources used by the
object, and the object should not be used subsequently. If an abort is
desired, then Object.Close or Object.Connection.Close if available should be used to terminate
activity and reset the object. The Object cannot be used once Object.Dispose() or Object.Dispose(true) are called.
</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MessageStream.#ctor(System.Boolean)">
            <summary>
				Initializes a new instance of the MessageStream object.
			</summary><remarks>
				<p>This constructor initializes a new instance of the MessageStream
				object with default values. If <i>useMemoryStreams</i> is true, attachments will be
				decoded as MemoryStreams, enabling ease-of-use in your application without having to 
				write any data to a temp file and increased performance. If <i>useMemoryStreams</i> is false, attachments will
				be decoded as FileStreams.</p>
			</remarks><param name="useMemoryStreams">Determines if attachments are decoded and stored as FileStreams or MemoryStreams.</param>
        </member>
        <member name="F:Dart.PowerTCP.Mail.MessageStream.m_SubPart">
            <summary>
            Private constructor used for creating sub-parts
            </summary>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MessageStream.#ctor(System.IO.Stream)">
            <summary>
				Initializes a new instance of the MessageStream object with an encoded message.
			</summary><remarks>
				<p>
				<i>message</i> should be a <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> containing encoded message data.
				This constructor fills the MessageStream object with the input message, breaking it up 
				into its component parts, and decoding it where necessary.  
				This method stops when it hits the end of Stream. This constructor
				is intended to be used when loading an encoded message from a stream, 
				such as a <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> filled by the Store method.</p>
			</remarks><param name="message">A <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> object containing encoded message data.</param>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MessageStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
				Initializes a new instance of the MessageStream object with an encoded message.
			</summary><remarks>
				<p>
				<i>message</i> should be a <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> containing encoded message data.
				This constructor fills the MessageStream object with the input message, breaking it up 
				into its component parts, and decoding it where necessary.  
				This method stops when it hits the end of Stream. This constructor
				is intended to be used when loading an encoded message from a stream, 
				such as a <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> filled by the Store method.</p>
				<p>If <i>useMemoryStreams</i> is true, attachments will be
				decoded as MemoryStreams, enabling ease-of-use and increased performance in your application without having to 
				write any data to a temp file. If <i>useMemoryStreams</i> is false, attachments will
				be decoded as FileStreams.</p>
			</remarks><param name="useMemoryStreams">Determines if attachments are decoded as and stored as FileStreams or MemoryStreams.</param><param name="message">A <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> object containing encoded message data.</param>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MessageStream.Flush">
            <summary>
				Updates the underlying data source or repository with the current state of the 
				buffer and then clears the buffer. 
			</summary><exception cref="T:System.IO.IOException">An I/O error occurs.</exception><exception cref="T:System.ObjectDisposedException">The <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> is closed.</exception><remarks>
				<p>If the Stream contains any internal Streams as members, this method will also cause the Flush method of all
					internal Streams.
				</p>
				<p>
				This method MUST be called when writing is complete for operations to operate properly. One example is when creating a message 
				comprised of only headers. If Flush is not called, the headers will be lost.
				</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MessageStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
				Sets the position within the current <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> to the specified value. Always throws a NotSupportedException.
			</summary><param name="offset">The new position within the stream</param><param name="origin">A value of type SeekOrigin, which acts as the seek reference point.</param><exception cref="T:System.NotSupportedException">Always thrown by this method.</exception><remarks>
				This method is not supported, and always throws a NotSupportedException.
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MessageStream.SetLength(System.Int64)">
            <summary>
				Sets the length of the current <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> to the specified value. Always throws a NotSupportedException.
			</summary><param name="value">The value at which to set the length.</param><exception cref="T:System.NotSupportedException">Always thrown by this method.</exception><remarks>
				This method is not supported, and always throws a NotSupportedException.
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.MessageStream.Parts">
            <summary>
				Gets a Parts class representing MIME parts in the message.
			</summary><value>
				A Parts class.
			</value><remarks>
				<p>The Parts class contains three collections which represent MIME parts.
				Parts.Simple contains any simple, inline MIME parts (such as MIME text). These
				objects are represented by MessagePartStreams. Parts.Attachments contains any
				MIME attachmments. These objects are represented by MimeAttahmentStreams. Parts.Complex
				contains any complex (multi-part) MIME parts. These objects are represented by MessageStreams.
				</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.MessageStream.NonMime">
            <summary>
				Gets a NonMime class representing non-MIME message parts.
			</summary><value>
				A NonMime class.
			</value><remarks>
				<p>The NonMime class is a simple, two property class.
				NonMime.Text gets or sets non-MIME text for the message.
				NonMime.Attachments is a collection containing any non-MIME
				attachments for the message.
				</p>
				<p>Non-MIME message parts will appear between the header and 
				any MIME parts, if any are present.</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.MessageStream.Attachments">
            <summary>
				Gets a collection containing all recursive attachments contained within the message
			</summary><value>
				Attachments collection.
			</value><remarks>
				<p>This property is an Attachments collection which reflects all attachments in this message that are held at any layer of the recursive message structure.
				Essentially, this collection is the combination of all items held in the <a href="Dart.PowerTCP.Mail.NonMime.Attachments.html">MessageStream.NonMime.Attachments</a> collection (non-MIME attachments), the
				<a href="Dart.PowerTCP.Mail.Parts.Attachments.html">MessageStream.Parts.Attachments</a> collection (MIME attachments), and recursive attachments contained within all the layers of <a href="Dart.PowerTCP.Mail.Parts.Complex.html">MessageStream.Parts.Complex</a>.
				The end result is that this collection contains every attachment that exists at any level in the message. You can also get these attachments by referencing
				the appropriate collection. For example, if you only care about accessing MIME attachments, simply access the <a href="Dart.PowerTCP.Mail.Parts.Attachments.html">MessageStream.Parts.Attachments</a> collection and
				bypass the MessageStream.Attachments collection.
				</p>
				<p>If you wish to add attachments to this collection using MessageStream.Attachments.Add, they should be of 
				type MimeAttachmentStream.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates creating a basic MIME message with a single attachment.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Create a MessageStream object
Dim msg As New MessageStream()

' Add a normal recipient
msg.To.Add(New MailAddress("you@test.com"))

' Add a CC recipient
msg.CC.Add(New MailAddress("you2@test.com"))

' Add a BCC recipient
msg.BCC.Add(New MailAddress("you3@test.com"))

' Specify the sender
msg.From = New MailAddress("me@test.com")

' Specify the subject
msg.Subject = "Hello"

' Add some text to the message.
msg.Text = "Hi everyone. How are ya doing?"

' Add an attachment
msg.Attachments.Add("C:\files\graph.jpg")

' Specify the server
Smtp1.Server = "mail.test.com"

' Send the message
Smtp1.Send(msg)
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Create a MessageStream object
MessageStream msg = new MessageStream();

// Add a normal recipient
msg.To.Add(new MailAddress("you@test.com"));

// Add a CC recipient
msg.CC.Add(new MailAddress("you2@test.com"));

// Add a BCC recipient
msg.BCC.Add(new MailAddress("you3@test.com"));

// Specify the sender
msg.From = new MailAddress("me@test.com");

// Specify the subject
msg.Subject = "Hello";

// Add some text to the message.
msg.Text = "Hi everyone. How are ya doing?";

// Add an attachment
msg.Attachments.Add("C:\\files\\graph.jpg");

// Specify the server
smtp1.Server = "mail.test.com";

// Send the message
smtp1.Send(msg);
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.MessageStream.Text">
            <summary>
				Gets or sets the text for the message.
			</summary><value>
				A string representing the text for the message, if any is present.
			</value><remarks>
				<p>The behavior of this property depends on if it is a Get or Set operation:</p>
				<ul>
					<li><b>When getting MessageStream.Text</b> this property returns the first "text/plain" or "text/html"
					part contained within <a href="Dart.PowerTCP.Mail.Parts.Simple.html">MessageStream.Parts.Simple</a>. If there are none there, this property returns the first 
					"text/plain" or "text/html" part that appears inside a multi-part part in <a href="Dart.PowerTCP.Mail.Parts.Complex.html">MessageStream.Parts.Complex</a>, from a recursive search.  If there 
					is no "text/plain" or "text/html" inline part in the message, this returns <a href="Dart.PowerTCP.Mail.NonMime.Text.html">MessageStream.NonMime.Text</a>. If there is no non-MIME text, this
					property returns an empty string.
					</li>	
					<li><b>When setting MessageStream.Text</b> this property adds a new MessagePartStream containing this text to the <a href="Dart.PowerTCP.Mail.Parts.Simple.html">MessageStream.Parts.Simple</a>
					collection.
					</li>
				</ul>	
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates creating a basic MIME message with a single attachment.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Create a MessageStream object
Dim msg As New MessageStream()

' Add a normal recipient
msg.To.Add(New MailAddress("you@test.com"))

' Add a CC recipient
msg.CC.Add(New MailAddress("you2@test.com"))

' Add a BCC recipient
msg.BCC.Add(New MailAddress("you3@test.com"))

' Specify the sender
msg.From = New MailAddress("me@test.com")

' Specify the subject
msg.Subject = "Hello"

' Add some text to the message.
msg.Text = "Hi everyone. How are ya doing?"

' Add an attachment
msg.Attachments.Add("C:\files\graph.jpg")

' Specify the server
Smtp1.Server = "mail.test.com"

' Send the message
Smtp1.Send(msg)
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Create a MessageStream object
MessageStream msg = new MessageStream();

// Add a normal recipient
msg.To.Add(new MailAddress("you@test.com"));

// Add a CC recipient
msg.CC.Add(new MailAddress("you2@test.com"));

// Add a BCC recipient
msg.BCC.Add(new MailAddress("you3@test.com"));

// Specify the sender
msg.From = new MailAddress("me@test.com");

// Specify the subject
msg.Subject = "Hello";

// Add some text to the message.
msg.Text = "Hi everyone. How are ya doing?";

// Add an attachment
msg.Attachments.Add("C:\\files\\graph.jpg");

// Specify the server
smtp1.Server = "mail.test.com";

// Send the message
smtp1.Send(msg);
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.MessageStream.Charset">
            <summary>
				Gets and sets the character set used for string/byte array conversions.
			</summary><value>
				A string representing the character set used.
			</value><remarks>
				<p>This value defaults to the language used on the runtime machine (accessible through
				System.Text.Encoding.Default.BodyName). Set this property
				to the desired character set string to override this behavior.
				An example charset for Kanji is "ISO-2022-JP", while standard ASCII is: "ISO-8859-1".
				</p>
				<p>When communicating with clients from other countries set this property based on the standard string defined for the language intended.
				This enables the International client to be able to properly decode the data.
				</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.MessageStream.Subject">
            <summary>
				Sets the "SUBJECT:" header field in the message.
			</summary><remarks>
				<p>Setting this property causes the "SUBJECT:" header field to be added
				to the message.
				This property is provided as an easy-to-use, high-level 
				alternative to MessageStream.Headers.Add(HeaderLabelType.Subject).</p>
			</remarks><value>
				A string representing the date to list after the "SUBJECT:" header field.
			</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates creating a basic MIME message with a single attachment.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Create a MessageStream object
Dim msg As New MessageStream()

' Add a normal recipient
msg.To.Add(New MailAddress("you@test.com"))

' Add a CC recipient
msg.CC.Add(New MailAddress("you2@test.com"))

' Add a BCC recipient
msg.BCC.Add(New MailAddress("you3@test.com"))

' Specify the sender
msg.From = New MailAddress("me@test.com")

' Specify the subject
msg.Subject = "Hello"

' Add some text to the message.
msg.Text = "Hi everyone. How are ya doing?"

' Add an attachment
msg.Attachments.Add("C:\files\graph.jpg")

' Specify the server
Smtp1.Server = "mail.test.com"

' Send the message
Smtp1.Send(msg)
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Create a MessageStream object
MessageStream msg = new MessageStream();

// Add a normal recipient
msg.To.Add(new MailAddress("you@test.com"));

// Add a CC recipient
msg.CC.Add(new MailAddress("you2@test.com"));

// Add a BCC recipient
msg.BCC.Add(new MailAddress("you3@test.com"));

// Specify the sender
msg.From = new MailAddress("me@test.com");

// Specify the subject
msg.Subject = "Hello";

// Add some text to the message.
msg.Text = "Hi everyone. How are ya doing?";

// Add an attachment
msg.Attachments.Add("C:\\files\\graph.jpg");

// Specify the server
smtp1.Server = "mail.test.com";

// Send the message
smtp1.Send(msg);
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.MessageStream.ReturnReceiptTo">
            <summary>
				Sets the "RETURN-RECEIPT-TO:" header field in the message.
			</summary><remarks>
				<p>Setting this property causes the "RETURN-RECEIPT-TO:" header field to be added
				to the message.
				This property is provided as an easy-to-use, high-level 
				alternative to MessageStream.Headers.Add(HeaderLabelType.ReturnReceiptTo).</p>
			</remarks><value>
				A string representing the date to list after the "RETURN-RECEIPT-TO:" header field.
			</value>
        </member>
        <member name="P:Dart.PowerTCP.Mail.MessageStream.Mailer">
            <summary>
				Sets the "X-MAILER:" header field in the message.
			</summary><remarks>
				<p>Setting this property causes the "X-MAILER:" header field to be added
				to the message.
				This property is provided as an easy-to-use, high-level 
				alternative to MessageStream.Headers.Add(HeaderLabelType.XMailer).</p>
			</remarks><value>
				A string representing the date to list after the "X-MAILER:" header field.
			</value>
        </member>
        <member name="P:Dart.PowerTCP.Mail.MessageStream.Type">
            <summary>
				Gets or sets the "Content-Type" header of the message or part.
			</summary><value>
				A string representing the Content-Type of the message or part.
			</value><remarks>
				<p>The "Content-Type" header notifies receiving mail clients of the type 
				of data contained within the MIME part, enabling them to properly handle the data.
				For example, this value
				could be "text/plain", signifying that the content is displayable text.
				As another example, this value could be "multipart/mixed" or "multipart/alternative"
				signifying that the part contains multiple nested parts.
				</p>
				<p>If the part is not a MIME part or the message is not a MIME message, this property returns an
				empty string.</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.MessageStream.MimeBoundary">
            <summary>
				Gets or sets the boundary between MIME parts.
			</summary><value>
				A string representing the boundary used between MIME parts.
			</value><remarks>
				<p>This boundary is used as a unique identifier to separate parts, and should not appear in any part on its own.
				If this property is not set when creating a MIME message, a MIME boundary will be created for you.
				</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates the many ways a MIME message can be created.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class. In additon, import System.IO, as a FileStream will be used.

' Create a MessageStream object
Dim msg As New MessageStream()

' Add a normal recipient
msg.To.Add(New MailAddress("you@test.com"))

' Specify the sender
msg.From = New MailAddress("me@test.com")

' Specify the subject
msg.Subject = "Test"

' Add a MIME attachment
msg.Parts.Attachments.Add(New MimeAttachmentStream("C:\files\graph.bmp"))

' Add some MIME text (Setting MessageStream.Text also does this).
msg.Parts.Simple.Add(New MessagePartStream("More text here"))

' Create a complex MIME part from a stored message.
msg.Parts.Complex.Add(New MessageStream(New FileStream("C:\\message.eml", FileMode.Open)))

' Create a custom MIME boundary to use. (the component will 
' create a default MIME boundary to use if this isn't specified)
msg.MimeBoundary = "----MyBoundary-----"

' Override automatic date setting
msg.Date = ""

' Add a header line.
msg.Header.Add(HeaderLabelType.Organization, "My Organization")

' Now add a custom header line.
msg.Header.Add("X-My-Field: My Value")

' Specify the server
Smtp1.Server = "mail.test.com"

' Send the message
Smtp1.Send(msg)
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class. In addition, import System.IO, as a FileStream will be used.\

// Create a MessageStream object
MessageStream msg = new MessageStream();

// Add a normal recipient
msg.To.Add(new MailAddress("you@test.com"));

// Specify the sender
msg.From = new MailAddress("me@test.com");

// Specify the subject
msg.Subject = "Test";

// Add a MIME attachment
msg.Parts.Attachments.Add(new MimeAttachmentStream("C:\\files\\graph.bmp"));

// Add some MIME text (MessageStream.Text also does this).
msg.Parts.Simple.Add(new MessagePartStream("More text here"));
		
// Create a complex MIME part from a stored message.
msg.Parts.Complex.Add(new MessageStream(new FileStream("C:\\message.eml", FileMode.Open)));

// Create a custom MIME boundary to use. (the component will 
// create a default MIME boundary to use if this isn't specified)
msg.MimeBoundary = "----MyBoundary-----";

// Override automatic date setting
msg.Date = "";

// Add a header line.
msg.Header.Add(HeaderLabelType.Organization, "My Organization");

// Now add a custom header line.
msg.Header.Add("X-My-Field: My Value");

// Specify the server
smtp1.Server = "mail.test.com";

// Send the message
smtp1.Send(msg);
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.MessageStream.To">
            <summary>
				Gets a MailAddresses collection of normal recipients.
			</summary><remarks>
				<p>Use the MessageStream.To property to add, remove, or otherwise manage
				any normal recipients. Mail addresses in this collection will be
				listed after the SMTP "RCPT TO" command, and also added to the message header
				after the "To:" label. In addition, the addresses in this collection are also 
				accessable in the MessageStream.Headers collection.
				</p>
			</remarks><value>
				MailAddresses collection.
			</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates creating a basic MIME message with a single attachment.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Create a MessageStream object
Dim msg As New MessageStream()

' Add a normal recipient
msg.To.Add(New MailAddress("you@test.com"))

' Add a CC recipient
msg.CC.Add(New MailAddress("you2@test.com"))

' Add a BCC recipient
msg.BCC.Add(New MailAddress("you3@test.com"))

' Specify the sender
msg.From = New MailAddress("me@test.com")

' Specify the subject
msg.Subject = "Hello"

' Add some text to the message.
msg.Text = "Hi everyone. How are ya doing?"

' Add an attachment
msg.Attachments.Add("C:\files\graph.jpg")

' Specify the server
Smtp1.Server = "mail.test.com"

' Send the message
Smtp1.Send(msg)
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Create a MessageStream object
MessageStream msg = new MessageStream();

// Add a normal recipient
msg.To.Add(new MailAddress("you@test.com"));

// Add a CC recipient
msg.CC.Add(new MailAddress("you2@test.com"));

// Add a BCC recipient
msg.BCC.Add(new MailAddress("you3@test.com"));

// Specify the sender
msg.From = new MailAddress("me@test.com");

// Specify the subject
msg.Subject = "Hello";

// Add some text to the message.
msg.Text = "Hi everyone. How are ya doing?";

// Add an attachment
msg.Attachments.Add("C:\\files\\graph.jpg");

// Specify the server
smtp1.Server = "mail.test.com";

// Send the message
smtp1.Send(msg);
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.MessageStream.CC">
            <summary>
				Gets a MailAddresses collection of carbon copy recipients.
			</summary><remarks>
				<p>Use the MessageStream.CC property to add, remove, or otherwise manage
				any carbon copy recipients. Mail addresses in this collection will be
				listed after the SMTP "RCPT TO" command, and also added to the message header
				after the "CC:" label. In addition, the addresses in this collection are also 
				accessable in the MessageStream.Headers collection.
				</p>
			</remarks><value>
				MailAddresses collection.
			</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates creating a basic MIME message with a single attachment.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Create a MessageStream object
Dim msg As New MessageStream()

' Add a normal recipient
msg.To.Add(New MailAddress("you@test.com"))

' Add a CC recipient
msg.CC.Add(New MailAddress("you2@test.com"))

' Add a BCC recipient
msg.BCC.Add(New MailAddress("you3@test.com"))

' Specify the sender
msg.From = New MailAddress("me@test.com")

' Specify the subject
msg.Subject = "Hello"

' Add some text to the message.
msg.Text = "Hi everyone. How are ya doing?"

' Add an attachment
msg.Attachments.Add("C:\files\graph.jpg")

' Specify the server
Smtp1.Server = "mail.test.com"

' Send the message
Smtp1.Send(msg)
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Create a MessageStream object
MessageStream msg = new MessageStream();

// Add a normal recipient
msg.To.Add(new MailAddress("you@test.com"));

// Add a CC recipient
msg.CC.Add(new MailAddress("you2@test.com"));

// Add a BCC recipient
msg.BCC.Add(new MailAddress("you3@test.com"));

// Specify the sender
msg.From = new MailAddress("me@test.com");

// Specify the subject
msg.Subject = "Hello";

// Add some text to the message.
msg.Text = "Hi everyone. How are ya doing?";

// Add an attachment
msg.Attachments.Add("C:\\files\\graph.jpg");

// Specify the server
smtp1.Server = "mail.test.com";

// Send the message
smtp1.Send(msg);
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.MessageStream.BCC">
            <summary>
				Gets a MailAddresses collection of blind carbon copy recipients.
			</summary><remarks>
				<p>Use the MessageStream.BCC property to add, remove, or otherwise manage
				any blind carbon copy recipients. Mail addresses in this collection will be
				listed after the SMTP "RCPT TO" command, but will not be included as part of the
				message header.
				</p>
				<p>An alternative to using the MessageStream.BCC is to add any blind carbon
				copy recipients to 
				Smtp.Recipients, which will have the exact same effect as adding them to MessageStream.BCC.</p>
			</remarks><value>
				MailAddresses collection.
			</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates creating a basic MIME message with a single attachment.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Create a MessageStream object
Dim msg As New MessageStream()

' Add a normal recipient
msg.To.Add(New MailAddress("you@test.com"))

' Add a CC recipient
msg.CC.Add(New MailAddress("you2@test.com"))

' Add a BCC recipient
msg.BCC.Add(New MailAddress("you3@test.com"))

' Specify the sender
msg.From = New MailAddress("me@test.com")

' Specify the subject
msg.Subject = "Hello"

' Add some text to the message.
msg.Text = "Hi everyone. How are ya doing?"

' Add an attachment
msg.Attachments.Add("C:\files\graph.jpg")

' Specify the server
Smtp1.Server = "mail.test.com"

' Send the message
Smtp1.Send(msg)
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Create a MessageStream object
MessageStream msg = new MessageStream();

// Add a normal recipient
msg.To.Add(new MailAddress("you@test.com"));

// Add a CC recipient
msg.CC.Add(new MailAddress("you2@test.com"));

// Add a BCC recipient
msg.BCC.Add(new MailAddress("you3@test.com"));

// Specify the sender
msg.From = new MailAddress("me@test.com");

// Specify the subject
msg.Subject = "Hello";

// Add some text to the message.
msg.Text = "Hi everyone. How are ya doing?";

// Add an attachment
msg.Attachments.Add("C:\\files\\graph.jpg");

// Specify the server
smtp1.Server = "mail.test.com";

// Send the message
smtp1.Send(msg);
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.MessageStream.From">
            <summary>
				Gets or sets the MailAddress object which specifies who the email is from.
			</summary><value>
				MailAddress object
			</value><remarks>
				<p>This property is a MailAddress object specifying who the email is from.
				To set this property, simply create a new instance of a MailAddress object and set
				it equal to this property.</p>
				<p>Setting this property causes the "FROM:" header line to be added to the message and
				the value of this property is sent after the SMTP "MAIL FROM" command.
				If you do not wish for this to occur, simply do not set this property and set the Smtp.MailFrom
				property, the value of which will be sent after the SMTP "MAIL FROM" command but will not be added
				to the header.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates creating a basic MIME message with a single attachment.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Create a MessageStream object
Dim msg As New MessageStream()

' Add a normal recipient
msg.To.Add(New MailAddress("you@test.com"))

' Add a CC recipient
msg.CC.Add(New MailAddress("you2@test.com"))

' Add a BCC recipient
msg.BCC.Add(New MailAddress("you3@test.com"))

' Specify the sender
msg.From = New MailAddress("me@test.com")

' Specify the subject
msg.Subject = "Hello"

' Add some text to the message.
msg.Text = "Hi everyone. How are ya doing?"

' Add an attachment
msg.Attachments.Add("C:\files\graph.jpg")

' Specify the server
Smtp1.Server = "mail.test.com"

' Send the message
Smtp1.Send(msg)
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Create a MessageStream object
MessageStream msg = new MessageStream();

// Add a normal recipient
msg.To.Add(new MailAddress("you@test.com"));

// Add a CC recipient
msg.CC.Add(new MailAddress("you2@test.com"));

// Add a BCC recipient
msg.BCC.Add(new MailAddress("you3@test.com"));

// Specify the sender
msg.From = new MailAddress("me@test.com");

// Specify the subject
msg.Subject = "Hello";

// Add some text to the message.
msg.Text = "Hi everyone. How are ya doing?";

// Add an attachment
msg.Attachments.Add("C:\\files\\graph.jpg");

// Specify the server
smtp1.Server = "mail.test.com";

// Send the message
smtp1.Send(msg);
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.MessageStream.Date">
            <summary>
				Sets the "DATE:" header field in the message.
			</summary><remarks>
				<p>Setting this property causes the "DATE:" header field to be added
				to the message.
				This property is provided as an easy-to-use, high-level 
				alternative to MessageStream.Headers.Add(HeaderLabelType.Date).</p>
				<p>This property is automatically added when a message is constructed using
				a MessageStream. If you do not wish for the "Date" header to be added, set this
				property to an empty string.
				</p>
			</remarks><value>
				A string representing the date to list after the "DATE:" header field.
			</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates the many ways a MIME message can be created.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class. In additon, import System.IO, as a FileStream will be used.

' Create a MessageStream object
Dim msg As New MessageStream()

' Add a normal recipient
msg.To.Add(New MailAddress("you@test.com"))

' Specify the sender
msg.From = New MailAddress("me@test.com")

' Specify the subject
msg.Subject = "Test"

' Add a MIME attachment
msg.Parts.Attachments.Add(New MimeAttachmentStream("C:\files\graph.bmp"))

' Add some MIME text (Setting MessageStream.Text also does this).
msg.Parts.Simple.Add(New MessagePartStream("More text here"))

' Create a complex MIME part from a stored message.
msg.Parts.Complex.Add(New MessageStream(New FileStream("C:\\message.eml", FileMode.Open)))

' Create a custom MIME boundary to use. (the component will 
' create a default MIME boundary to use if this isn't specified)
msg.MimeBoundary = "----MyBoundary-----"

' Override automatic date setting
msg.Date = ""

' Add a header line.
msg.Header.Add(HeaderLabelType.Organization, "My Organization")

' Now add a custom header line.
msg.Header.Add("X-My-Field: My Value")

' Specify the server
Smtp1.Server = "mail.test.com"

' Send the message
Smtp1.Send(msg)
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class. In addition, import System.IO, as a FileStream will be used.\

// Create a MessageStream object
MessageStream msg = new MessageStream();

// Add a normal recipient
msg.To.Add(new MailAddress("you@test.com"));

// Specify the sender
msg.From = new MailAddress("me@test.com");

// Specify the subject
msg.Subject = "Test";

// Add a MIME attachment
msg.Parts.Attachments.Add(new MimeAttachmentStream("C:\\files\\graph.bmp"));

// Add some MIME text (MessageStream.Text also does this).
msg.Parts.Simple.Add(new MessagePartStream("More text here"));
		
// Create a complex MIME part from a stored message.
msg.Parts.Complex.Add(new MessageStream(new FileStream("C:\\message.eml", FileMode.Open)));

// Create a custom MIME boundary to use. (the component will 
// create a default MIME boundary to use if this isn't specified)
msg.MimeBoundary = "----MyBoundary-----";

// Override automatic date setting
msg.Date = "";

// Add a header line.
msg.Header.Add(HeaderLabelType.Organization, "My Organization");

// Now add a custom header line.
msg.Header.Add("X-My-Field: My Value");

// Specify the server
smtp1.Server = "mail.test.com";

// Send the message
smtp1.Send(msg);
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.MessageStream.Position">
            <summary>
				Gets or sets the current position of this stream.
			</summary><value>
				The current position of this stream.
			</value><remarks>
				<p>If the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> is a CodingStream or a MessageStream or a <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> derived
				from CodingStream or MessageStream, this property can only be set to 0. Setting
				the property to any other value results in a NotSupportedException.</p>
			</remarks><exception cref="T:System.NotSupportedException">The <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> does not support setting the Position to any value except 0.</exception>
        </member>
        <member name="P:Dart.PowerTCP.Mail.MessageStream.Length">
            <summary>The length of the stream</summary><remarks>
				<p>This value represents the number in bytes of the length of the stream.</p>
			</remarks><summary>
				Gets the length in bytes of the stream.
			</summary><value>
				A long value representing the length of the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> in bytes.
			</value><remarks>
				<p>If the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> is a CodingStream or a <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> derived from CodingStream, 
				this property is
				an estimate and should not be considered accurate. 
				When using a MessageStream, MessageStream.Length cannot be depended on to be completely accurate once an object is set by the user.  It is only precise during write operations.
				With all other 
				PowerTCP Streams this number should be accurate.</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.MessageStream.Header">
            <summary>
				Gets or sets a MailHeader collection representing the mail header lines of the message. Inherits from ArrayList.
			</summary><value>
				A MailHeader collection representing the mail header lines.
			</value><remarks>
				<p>When creating a message, mail header lines can be added two ways:</p>
				<ul>
					<li>They can be explicitly added by using MessageStream.Header.Add.</li>
					<li>They can be added by using a high-level property, such as MessageStream.Subject.</li>
				<p>In the latter case, setting MessageStream.Subject will actually add a item to the MailHeader
				collection and, as a result, this collection will always reflect the current header of the message.
				The reverse is also true. For example, if MessageStream.Header.Add(HeaderLabelType.Subject, "Hello") was 
				used, the MessageStream.Subject property would return "Hello". 
				</p>
				<p>The "Content-Type" header line can also be altered by accessing the MailHeader collection but this is not recommended.
				The recommended way to alter this header line is by setting MessageStream.Type.
				</p>
				</ul>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates the many ways a MIME message can be created.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class. In additon, import System.IO, as a FileStream will be used.

' Create a MessageStream object
Dim msg As New MessageStream()

' Add a normal recipient
msg.To.Add(New MailAddress("you@test.com"))

' Specify the sender
msg.From = New MailAddress("me@test.com")

' Specify the subject
msg.Subject = "Test"

' Add a MIME attachment
msg.Parts.Attachments.Add(New MimeAttachmentStream("C:\files\graph.bmp"))

' Add some MIME text (Setting MessageStream.Text also does this).
msg.Parts.Simple.Add(New MessagePartStream("More text here"))

' Create a complex MIME part from a stored message.
msg.Parts.Complex.Add(New MessageStream(New FileStream("C:\\message.eml", FileMode.Open)))

' Create a custom MIME boundary to use. (the component will 
' create a default MIME boundary to use if this isn't specified)
msg.MimeBoundary = "----MyBoundary-----"

' Override automatic date setting
msg.Date = ""

' Add a header line.
msg.Header.Add(HeaderLabelType.Organization, "My Organization")

' Now add a custom header line.
msg.Header.Add("X-My-Field: My Value")

' Specify the server
Smtp1.Server = "mail.test.com"

' Send the message
Smtp1.Send(msg)
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class. In addition, import System.IO, as a FileStream will be used.\

// Create a MessageStream object
MessageStream msg = new MessageStream();

// Add a normal recipient
msg.To.Add(new MailAddress("you@test.com"));

// Specify the sender
msg.From = new MailAddress("me@test.com");

// Specify the subject
msg.Subject = "Test";

// Add a MIME attachment
msg.Parts.Attachments.Add(new MimeAttachmentStream("C:\\files\\graph.bmp"));

// Add some MIME text (MessageStream.Text also does this).
msg.Parts.Simple.Add(new MessagePartStream("More text here"));
		
// Create a complex MIME part from a stored message.
msg.Parts.Complex.Add(new MessageStream(new FileStream("C:\\message.eml", FileMode.Open)));

// Create a custom MIME boundary to use. (the component will 
// create a default MIME boundary to use if this isn't specified)
msg.MimeBoundary = "----MyBoundary-----";

// Override automatic date setting
msg.Date = "";

// Add a header line.
msg.Header.Add(HeaderLabelType.Organization, "My Organization");

// Now add a custom header line.
msg.Header.Add("X-My-Field: My Value");

// Specify the server
smtp1.Server = "mail.test.com";

// Send the message
smtp1.Send(msg);
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.MessageStream.CanSeek">
            <summary>
				Gets a value indicating whether the current <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> supports seeking.
			</summary><value>
				This property always returns false;
			</value><remarks>
				Streams used by PowerTCP do not support seeking. This property always returns false.
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.MessageStream.CanRead">
            <summary>	
				Gets a value indicating whether the current <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> supports reading.
			</summary><value>
				true if reading is currently allowed, and false if not.
			</value><remarks>
				<p>If Position &lt; Length, this property returns true to indicate bytes are
			available to be read, otherwise false.</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.MessageStream.CanWrite">
            <summary>
				Gets a value indicating whether the current <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> supports writing.
			</summary><value>
				true if the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> supports writing; false otherwise;
			</value><remarks>
				<p>If Position = Length, this property returns true to indicate bytes can be
				written, otherwise false.</p>
			</remarks>
        </member>
        <member name="T:Dart.PowerTCP.Mail.MimeAttachmentStream">
            <summary>
				Represents a MIME attachment.
			</summary><remarks>
				<p>The MimeAttachmentStream object encapsulates a MIME attachment.
				Common usage will probably be similar to
				the following.</p>
				<p><b>Creating a MimeAttachmentStream</b> will begin by creating a new
				instance of a MimeAttachmentStream object, passing in a <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> containing the data to add as an attachment, or a filename of the
				attachment. This object can then 
				be added to a MessageStream object by using <a href="Dart.PowerTCP.Mail.MimeAttachmentStreams.Add.html">MessageStream.Parts.Attachments.Add</a>
				or MessageStreams.Attachments.Add.</p>
				<p><b>Accessing a MessagePartStream</b> will most commonly involve iterating through the
				<a href="Dart.PowerTCP.Mail.Parts.Attachments.html">MessageStream.Parts.Attachments</a> collection and using the <a href="Dart.PowerTCP.Mail.Parts.Attachments.html">MessageStream.Parts.Attachments</a>.Save method
				to save the attachment to a file or the <a href="Dart.PowerTCP.Mail.Parts.Attachments.html">MessageStream.Parts.Attachments</a>.Content property to get the
				attachment data as a Stream.</p>
				<p>To use simple inline MIME parts, use the MessagePartStream class.To use complex
				multi-part MIME parts, use the MessageStream object.</p>
			</remarks>
        </member>
        <member name="T:Dart.PowerTCP.Mail.AttachmentStream">
            <summary>
				Represents a non-MIME attached file.
			</summary><remarks>
				<p>The AttachmentStream class represents a non-MIME attachment, which can either be 
				Uuencoded or Yencoded, but is always read out as Uuencoded.</p>
				<p>If you are getting messages that contain non-MIME attachments these attachments
				would be located in <a href="Dart.PowerTCP.Mail.NonMime.Attachments.html">MessageStream.NonMime.Attachments</a>. These attachments are also 
				accessable in the MessageStream.Attachments collection.</p>
				<p>If you are creating a message that contains non-MIME attachments this can be
				done several different ways. If the attachment is located on disk, simply create
				a new AttachmentStream, passing the filename of the file into the constructor. If
				the attachment is in any other type of <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> (such as a MemoryStream), simply create
				a new AttachmentStream passing this <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> into the constructor.</p>
				<p>When creating an AttachmentStream the data will always be read out as a Uuencoded attachment.
				Fot this reason, a new AttachmenStream will
				be created with AttachmentStream.MimeEncoding = ContentEncoding.Uuencode. Changing this 
				property could result in incorrect message structure.</p>
				<p>
					This is the base class for MimeAttachmentStream, so all MimeAttachmentStreams are AttachmentStreams, though they have additional Mime headers and can have other encoding types.
				</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.AttachmentStream.Save">
            <summary>
				Saves the attachment.
			</summary><remarks>
				<p>This method saves the attachment to the default directory, using the FileName property.  Does not overwrite.</p>
				<p>If the current attachment is represented by a MemoryStream (for example, if Pop.UseMemoryStreams
				is true) do not use this method. Use one of the Save overloads which allow specification of the 
				filename to save the attachment to.
				</p>
				<p>
				If overwrite is false, it will try for up to 16 times to create a file with a number on the end.  If it can't make any of those without overwriting, it creates a unique name based on the date and time appended on to the end of the filename but before the extension (in the format file(date time).txt).
				</p>
				<p>This method reads data until 0 bytes are returned, indicating the end of the stream.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.AttachmentStream.Save(System.String)">
            <summary>
				Saves the attachment.
			</summary><param name="fileName">The name of the file to save the attachment to.</param><remarks>
				<p>This method saves the attachment to the file specified by <i>fileName</i>. Does not overwrite.</p>
				<p>This method reads data until 0 bytes are returned, indicating the end of the stream.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.AttachmentStream.Save(System.String,System.Boolean)">
            <summary>
				Saves the attachment.
			</summary><param name="fileName">The name of the file to save the attachment to.</param><param name="overwrite">Specifies if the destination file should be overwritten.</param><remarks>
				<p>This method saves the attachment to the file specified by <i>fileName</i>. If <i>overwrite</i>
				is true, any file with the same name and path is overwritten.
				</p>
				<p>
				If overwrite is false, it will try for up to 16 times to create a file with a number on the end.  If it can't make any of those without overwriting, it creates a unique name based on the date and time appended on to the end of the filename but before the extension (in the format file(date time).txt).
				</p>
				<p>This method reads data until 0 bytes are returned, indicating the end of the stream.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.AttachmentStream.Close">
            <summary>
				Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream.
			</summary>
        </member>
        <member name="M:Dart.PowerTCP.Mail.AttachmentStream.Dispose">
            <summary>
				Releases all resources associated with the object.
			</summary><remarks>
				<p>The AttachmentStream.Dispose method is intended for closing files (and deleting temporary files created when this object is created during a MessageStream.Write operation), so that they can be used elsewhere. It is critical that the user either call Content.Close() or AttachmentStream.Dispose() before trying to open a file contained in an AttachmentStream.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.AttachmentStream.Finalize">
            <remarks>
				This is used by the System to clean up resources for the noted object.  This method is needed to make sure critical cleanup information is not lost before Object.Dispose is called.  
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.AttachmentStream.#ctor(System.IO.FileStream)">
            <summary>
				Initializes a new AttachmentStream with the file data contained in <i>content</i>.
			</summary><param name="content">The FileStream containing data from which an attachment will be created.</param><remarks>
				<p>Use this constructor if you wish to create an AttachmentStream  from
				a file on disk, and you wish to have control over the FileStream used. Creating an Attachment in this
				manner would involve creating a FileStream initialized with file data. Pass this FileStream into
			    the AttachmentStream constructor. You can then perform further action on the FileStream (such as
				closing the FileStream). If you would like to create a new AttachmentStream from a file without
				creating a FileStream, use the AttachmentStream(string) constructor.</p>
				<p>When creating an AttachmentStream using this constructor, the AttachmentStream.FileName property
				will be everything after the last "/" OR "\\" ("\" in VB) in the FileStream.Name property.</p>
				<p>When creating an AttachmentStream the data will always be read out as a Uuencoded attachment.
				Fot this reason, a new AttachmenStream will
				be created with AttachmentStream.MimeEncoding = ContentEncoding.Uuencode. Changing this 
				property could result in incorrect message structure.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.AttachmentStream.#ctor(System.String)">
            <summary>
				Initializes a new AttachmentStream with the file data contained in the file specified by <i>fileName</i>.
			</summary><param name="fileName">The name of the file to add as an attachment.</param><remarks>
				<p>Use this constructor if you wish to create an AttachmentStream from
				a file on disk.</p>
				<p>When creating an AttachmentStream using this constructor, the AttachmentStream.FileName property
				will be everything after the last "/" OR "\\" ("\" in VB) in <i>fileName</i>.</p>
				<p>When creating an AttachmentStream the data will always be read out as a Uuencoded attachment.
				Fot this reason, a new AttachmenStream will
				be created with AttachmentStream.MimeEncoding = ContentEncoding.Uuencode. Changing this 
				property could result in incorrect message structure.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates creating a basic non-MIME message with a single attachment.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Create a MessageStream object
Dim msg As New MessageStream()

' Add a normal recipient
msg.To.Add(New MailAddress("you@test.com"))

' Specify the sender
msg.From = New MailAddress("me@test.com")

' Specify the subject
msg.Subject = "Test"

' Add Non-MIME text
msg.NonMime.Text = "Hello. How are you"

' Add a Non-MIME, Uuencoded attachment.
msg.NonMime.Attachments.Add(New AttachmentStream("C:\\files\\graph.jpg"))

' Specify the server
Smtp1.Server = "mail.test.com"

' Send the message
Smtp1.Send(msg)
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Create a MessageStream object
MessageStream msg = new MessageStream();

// Add a normal recipient
msg.To.Add(new MailAddress("you@test.com"));

// Specify the sender
msg.From = new MailAddress("me@test.com");

// Specify the subject
msg.Subject = "Test";

// Add Non-MIME text
msg.NonMime.Text = "Hello. How are you";

// Add a Non-MIME, Uuencoded attachment.
msg.NonMime.Attachments.Add(new AttachmentStream("C:\\files\\graph.jpg"));

// Specify the server
smtp1.Server = "mail.test.com";

// Send the message
smtp1.Send(msg);
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.AttachmentStream.#ctor(System.IO.Stream,System.String,Dart.PowerTCP.Mail.ContentEncoding)">
            <summary>
				Initializes a new AttachmentStream with the data contained in <i>attachment</i>.
			</summary><param name="attachment">The <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> containing data from which an attachment will be created.</param><param name="fileName">The filename of the attachment.</param><param name="encoding">The encoding type of the attachment.</param><p>Use this constructor if you wish to create an AttachmentStream from any <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> object. A good
				example where this may be useful is in the case of creating an Attachment from data in memory using
				a MemoryStream.
				Creating an Attachment in this
				manner would involve creating a <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> initialized with data. Pass this <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> into
			    the AttachmentStream constructor, along with the name you wish the attachment to have, and the
				encoding type for the attachment. Since an AttachmentStream is intended to be used only as a non-MIME
				attachment, be sure <i>encoding</i> is ContentEncoding.Uuencode, or incorrect message
				structure could result.</p>
        </member>
        <member name="P:Dart.PowerTCP.Mail.AttachmentStream.Content">
            <summary>
				Returns a <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> object containing the data of the part represented by the Stream
			</summary><value>
				A <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> object containing the data of the part represented by the Stream.
			</value><remarks>
				<p>Use the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> exposed by this property to write to or read from the AttachmentStream.
			If the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> was created with UseMemoryStreams = true, this property will return a MemoryStream,
			otherwise, it will return a FileStream.
			</p>
				<p>When using a MessagePartStream, this property returns the unencoded text as a MemoryStream.</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.AttachmentStream.FileName">
            <summary>
				Gets or sets the file name used for this attachment or part.
			</summary><value>
				A string representing the file name used for this attachment or part.
			</value><remarks>
				<p>When possible, this property is set by information available about the file.
				When creating attachments, this information is obtained by information passed into the constructor.
				For example, if the attachment was created from a FileStream, this property is derived from the
				FileStream.Name property. If you wish to change the filename, simply set this property to a different value.
				</p>
				<p>When getting attachments, this information is obtained from information available in the message.
				For example, if the attachment is a MIME part, this property will reflect the filename listed in the "Content-Disposition:"
				header.
				</p>
				<p>If the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> is a MessagePartStream, then this property is read-only.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MimeAttachmentStream.#ctor">
            <summary>
				Initializes a new MimeAttachmentStream.
			</summary><remarks>
				<p>Use this constructor to create an empty MimeAttachmentStream object.
				Create the part by using the MimeAttachmentStream.Content.Write method. Normally 
				MimeAttachmentStreams can be created by passing a <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> or file name into
				the constructor. This constructor is reserved for advanced users.</p>
				<p>When creating a MessagePartStream using this constructor, MessagePartStream.MimeEncoding
				will default to ContentEncoding.Base64.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MimeAttachmentStream.#ctor(System.Boolean)">
            <summary>
				Initializes a new MimeAttachmentStream object.
			</summary><remarks>
				<p>Use this constructor to create an empty MimeAttachmentStream object. If <i>useMemoryStream</i>
				is true, the MimeAttachmentStream.Content property will be a MemoryStream. If <i>useMemoryStream</i>
				is false, the MimeAttachmentStream.Content property will be a FileStream.
				Create the part by using the MimeAttachmentStream.Content.Write method. Normally 
				MimeAttachmentStreams can be created by passing a <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> or file name into
				the constructor. This constructor is reserved for advanced users.</p>
				<p>When creating a MessagePartStream using this constructor, MessagePartStream.MimeEncoding
				will default to ContentEncoding.Base64.</p>
				<param name="useMemoryStream">true if MimeAttachmentStream.Content should be a MemoryStream,
				false if MimeAttachmentStream.Content should be a FileStream.</param>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MimeAttachmentStream.#ctor(System.IO.FileStream)">
            <summary>
				Initializes a new MimeAttachmentStream object.
			</summary><remarks>
				<p>Use this constructor to create an new MimeAttachmentStream object initialized
				to the data provided in <i>content</i>.</p>
				<p>When creating a MessagePartStream using this constructor, MessagePartStream.MimeEncoding
				will default to ContentEncoding.Base64.</p>
				<param name="content">The FileStream to use to initialize the object.</param>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MimeAttachmentStream.#ctor(System.String)">
            <summary>
				Initializes a new MimeAttachmentStream object.
			</summary><remarks>
				<p>Use this constructor to create an new MimeAttachmentStream object initialized
				to the data provided in <i>fileName</i>. This constructor was provided as an easy-to-use
				alternative to MimeAttachmentStream(FileStream) as they both create an attachment from a file,
				but with MimeAttachmentStream(String) constructor, the FileStream is created internally.</p>
				<p>When creating a MessagePartStream using this constructor, MessagePartStream.MimeEncoding
				will default to ContentEncoding.Base64.</p>
				<param name="fileName">The name of the file to use to initialize the object.</param>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates the many ways a MIME message can be created.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class. In additon, import System.IO, as a FileStream will be used.

' Create a MessageStream object
Dim msg As New MessageStream()

' Add a normal recipient
msg.To.Add(New MailAddress("you@test.com"))

' Specify the sender
msg.From = New MailAddress("me@test.com")

' Specify the subject
msg.Subject = "Test"

' Add a MIME attachment
msg.Parts.Attachments.Add(New MimeAttachmentStream("C:\files\graph.bmp"))

' Add some MIME text (Setting MessageStream.Text also does this).
msg.Parts.Simple.Add(New MessagePartStream("More text here"))

' Create a complex MIME part from a stored message.
msg.Parts.Complex.Add(New MessageStream(New FileStream("C:\\message.eml", FileMode.Open)))

' Create a custom MIME boundary to use. (the component will 
' create a default MIME boundary to use if this isn't specified)
msg.MimeBoundary = "----MyBoundary-----"

' Override automatic date setting
msg.Date = ""

' Add a header line.
msg.Header.Add(HeaderLabelType.Organization, "My Organization")

' Now add a custom header line.
msg.Header.Add("X-My-Field: My Value")

' Specify the server
Smtp1.Server = "mail.test.com"

' Send the message
Smtp1.Send(msg)
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class. In addition, import System.IO, as a FileStream will be used.\

// Create a MessageStream object
MessageStream msg = new MessageStream();

// Add a normal recipient
msg.To.Add(new MailAddress("you@test.com"));

// Specify the sender
msg.From = new MailAddress("me@test.com");

// Specify the subject
msg.Subject = "Test";

// Add a MIME attachment
msg.Parts.Attachments.Add(new MimeAttachmentStream("C:\\files\\graph.bmp"));

// Add some MIME text (MessageStream.Text also does this).
msg.Parts.Simple.Add(new MessagePartStream("More text here"));
		
// Create a complex MIME part from a stored message.
msg.Parts.Complex.Add(new MessageStream(new FileStream("C:\\message.eml", FileMode.Open)));

// Create a custom MIME boundary to use. (the component will 
// create a default MIME boundary to use if this isn't specified)
msg.MimeBoundary = "----MyBoundary-----";

// Override automatic date setting
msg.Date = "";

// Add a header line.
msg.Header.Add(HeaderLabelType.Organization, "My Organization");

// Now add a custom header line.
msg.Header.Add("X-My-Field: My Value");

// Specify the server
smtp1.Server = "mail.test.com";

// Send the message
smtp1.Send(msg);
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MimeAttachmentStream.#ctor(System.String,System.String)">
            <summary>
				Initializes a new MimeAttachmentStream object.
			</summary><remarks>
				<p>Use this constructor to create an new MimeAttachmentStream object initialized
				to the data provided in <i>fileName</i> using the provided <i>charset</i>. This constructor was provided as an easy-to-use
				alternative to MimeAttachmentStream(FileStream) as they both create an attachment from a file,
				but with MimeAttachmentStream(String) constructor, the FileStream is created internally.</p>
				<p>When creating a MessagePartStream using this constructor, MessagePartStream.MimeEncoding
				will default to ContentEncoding.Base64.</p>
				<param name="fileName">The name of the file to use to initialize the object.</param>
				<param name="charset">The character set to use for the part.</param>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MimeAttachmentStream.#ctor(System.IO.Stream,System.String,Dart.PowerTCP.Mail.ContentType,Dart.PowerTCP.Mail.ContentEncoding,System.String)">
            <summary>
				Initializes a new MimeAttachmentStream object.
			</summary><remarks>
				<p>Use this constructor to create an new MimeAttachmentStream object initialized
				with a Stream. This constructor is useful if you have data in memory (perhaps in a MemoryStream object)
				that you wish to add as an attachment. You can simply create an attachment from the MemoryStream directly
				as opposed to having to create a temp file.</p>
				<param name="content">A <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> containing data to be added as an attachment.</param>
				<param name="type">A ContentType specifying the content type to use.</param>
				<param name="encoding">A ContentEncoding type specifying the MIME encoding to use.</param>
				<param name="charset">The character set to use for the part.</param>
				<param name="fileName">The name of the file to use to initialize the object.</param>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MimeAttachmentStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
				Reads at least one byte of data from the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> and copies it into the provided buffer. 
			</summary><param name="buffer">The storage location for the received data.</param><param name="offset">The zero-based position in the buffer at which to store the received data.</param><param name="count">The maximum number of bytes to read.</param><returns>
				The total number of bytes read into the buffer.
			</returns><exception cref="T:System.IO.IOException">Thrown when the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> is not readable.</exception><exception cref="T:System.ArgumentNullException">Thrown when the buffer or callback is null.</exception><exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is less than zero or when count is less than or equal to zero.</exception><exception cref="T:System.ArgumentException">Thrown when the (offset + count) &gt; buffer.Length.</exception><remarks>
				<p>This method reads the bytes from the Stream to <i>buffer</i>, starting from the 
				position specified by <i>offset</i> and reading the number of bytes specified by <i>count</i>.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MimeAttachmentStream.Read(System.Byte[])">
            <summary>
				Reads at least one byte of data from the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> and copies it into the provided buffer. 
			</summary><param name="buffer">The storage location for the received data.</param><returns>
				The total number of bytes read into the buffer.
			</returns><exception cref="T:System.IO.IOException">Thrown when the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> is not readable.</exception><exception cref="T:System.ArgumentNullException">Thrown when the buffer or callback is null.</exception><remarks>
				<p>This is a convenience method for all derived classes, calling Read(buffer,0, buffer.Length) on the stream.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MimeAttachmentStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
				Writes a sequence of bytes to the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> and returns when the operation is complete.
			</summary><param name="buffer">The storage location for the written data.</param><param name="offset">The zero-based position in the buffer from which to begin writing from.</param><param name="count">The exact number of bytes to write.</param><exception cref="T:System.IO.IOException">Thrown when the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> is not writable.</exception><exception cref="T:System.ArgumentNullException">Thrown when the buffer is null.</exception><exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is less than zero or when count is less than or equal to zero.</exception><exception cref="T:System.ArgumentException">Thrown when the (offset + count) &gt; buffer.Length.</exception><remarks>
				<p>This method writes bytes contained in <i>buffer</i> to the Stream, starting from the 
				position specified by <i>offset</i> and writing the number of bytes specified by <i>count</i>.</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.MimeAttachmentStream.Type">
            <summary>
				Gets or sets the "Content-Type" header of the message or part.
			</summary><value>
				A string representing the Content-Type of the message or part.
			</value><remarks>
				<p>The "Content-Type" header notifies receiving mail clients of the type 
				of data contained within the MIME part, enabling them to properly handle the data.
				For example, this value
				could be "text/plain", signifying that the content is displayable text.
				As another example, this value could be "multipart/mixed" or "multipart/alternative"
				signifying that the part contains multiple nested parts.
				</p>
				<p>If the part is not a MIME part or the message is not a MIME message, this property returns an
				empty string.</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.MimeAttachmentStream.Header">
            <summary>
				Gets any headers for the part.
			</summary><value>
				A CRLF-delimited string of headers for the part.
			</value><remarks>
				<p>Normally, headers for a part is handled by the object
				and is made accessible as a high-level property. For example, the "Content-Type:" header
				is accessible through the Type property. This property returns a list of all MIME headers for the part.</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.MimeAttachmentStream.Length">
            <summary>The length of the stream</summary><remarks>
				<p>This value represents the number in bytes of the length of the stream.</p>
			</remarks><summary>
				Gets the length in bytes of the stream.
			</summary><value>
				A long value representing the length of the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> in bytes.
			</value><remarks>
				<p>If the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> is a CodingStream or a <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> derived from CodingStream, 
				this property is
				an estimate and should not be considered accurate. 
				When using a MessageStream, MessageStream.Length cannot be depended on to be completely accurate once an object is set by the user.  It is only precise during write operations.
				With all other 
				PowerTCP Streams this number should be accurate.</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.MimeAttachmentStream.Position">
            <summary>
				Gets or sets the current position of this stream.
			</summary><value>
				The current position of this stream.
			</value><remarks>
				<p>If the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> is a CodingStream or a MessageStream or a <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> derived
				from CodingStream or MessageStream, this property can only be set to 0. Setting
				the property to any other value results in a NotSupportedException.</p>
			</remarks><exception cref="T:System.NotSupportedException">The <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> does not support setting the Position to any value except 0.</exception>
        </member>
        <member name="T:Dart.PowerTCP.Mail.MimePart">
            <summary>
            This object provides most of the MIME header work for both MessagePartStream and MimeAttachmentStream objects.
            </summary>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MimePart.CheckHeaders(System.Byte[],System.Int32@,System.Int32@)">
            <summary>
            Called from Write(), accumulates header lines and parses them, initializing member values.
            </summary>
            <param name="buffer"></param>
            <param name="offset">Update offset to look past processed bytes.</param>
            <param name="count">Update count to indicate number of bytes left.</param>
        </member>
        <member name="T:Dart.PowerTCP.Mail.NonMime">
            <summary>
				Contains all non-MIME parts of a message.
			</summary><remarks>
				<p>Messages could have two different types of parts, MIME and non-MIME.
				Any MIME parts are located in MessageStream.Parts, an instance of the Parts class. Any
				non-MIME parts are located in MessageStream.NonMime, an instance of the non-MIME class. MessageStream.NonMime will
				have content under one of two circumstances:</p>
				<ol>
					<li>The message is an plain RFC822 (non-MIME) message.</li>
					<li>The message is a MIME message containing non-MIME parts.</li>
				</ol>
				<p>In the latter case, this often occurs with text that appears before
				the first MIME part that is intended to be read by non-MIME browsers.
				Also, a message could contain MIME parts along with a non-MIME 
				attachment, again appearing before any MIME parts.
				</p>
				<p>If you wish to create a MessageStream object representing a plain RFC822 message, you must do so by using
				<a href="Dart.PowerTCP.Mail.NonMime.Text.html">MessageStream.NonMime.Text</a> and <a href="Dart.PowerTCP.Mail.NonMime.Attachments.html">MessageStream.NonMime.Attachments</a>. Setting MessageStream.Text 
				or MessageStream.Attachments creates a MIME message.</p>
				<p>If you are getting messages that have any non-Mime attachments, they 
				would be accessable either in <a href="Dart.PowerTCP.Mail.NonMime.Attachments.html">MessageStream.NonMime.Attachments</a> or MessageStream.Attachments.</p>
				<p>MIME parts are accessable through MessageStream.Parts.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates creating a basic non-MIME message with a single attachment.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Create a MessageStream object
Dim msg As New MessageStream()

' Add a normal recipient
msg.To.Add(New MailAddress("you@test.com"))

' Specify the sender
msg.From = New MailAddress("me@test.com")

' Specify the subject
msg.Subject = "Test"

' Add Non-MIME text
msg.NonMime.Text = "Hello. How are you"

' Add a Non-MIME, Uuencoded attachment.
msg.NonMime.Attachments.Add(New AttachmentStream("C:\\files\\graph.jpg"))

' Specify the server
Smtp1.Server = "mail.test.com"

' Send the message
Smtp1.Send(msg)
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Create a MessageStream object
MessageStream msg = new MessageStream();

// Add a normal recipient
msg.To.Add(new MailAddress("you@test.com"));

// Specify the sender
msg.From = new MailAddress("me@test.com");

// Specify the subject
msg.Subject = "Test";

// Add Non-MIME text
msg.NonMime.Text = "Hello. How are you";

// Add a Non-MIME, Uuencoded attachment.
msg.NonMime.Attachments.Add(new AttachmentStream("C:\\files\\graph.jpg"));

// Specify the server
smtp1.Server = "mail.test.com";

// Send the message
smtp1.Send(msg);
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.NonMime.Attachments">
            <summary>
				Gets or sets any non-MIME attachments, which can be Uuencoded or Yencoded, although they are always read out as Uuencoded.
			</summary><value>
				An AttachmentStreams collection containing any non-MIME attachments.
			</value><remarks>
				<p>The NonMime.Attachments collection contains all non-MIME attachments. These attachments
				can be Uuencoded or Yencoded, although attachments of this type are always Uuencoded when read out.
				Uuencoding is an encoding alternative to MIME and may be preferred when sending mail
				to non-MIME enabled clients.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates creating a basic non-MIME message with a single attachment.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Create a MessageStream object
Dim msg As New MessageStream()

' Add a normal recipient
msg.To.Add(New MailAddress("you@test.com"))

' Specify the sender
msg.From = New MailAddress("me@test.com")

' Specify the subject
msg.Subject = "Test"

' Add Non-MIME text
msg.NonMime.Text = "Hello. How are you"

' Add a Non-MIME, Uuencoded attachment.
msg.NonMime.Attachments.Add(New AttachmentStream("C:\\files\\graph.jpg"))

' Specify the server
Smtp1.Server = "mail.test.com"

' Send the message
Smtp1.Send(msg)
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Create a MessageStream object
MessageStream msg = new MessageStream();

// Add a normal recipient
msg.To.Add(new MailAddress("you@test.com"));

// Specify the sender
msg.From = new MailAddress("me@test.com");

// Specify the subject
msg.Subject = "Test";

// Add Non-MIME text
msg.NonMime.Text = "Hello. How are you";

// Add a Non-MIME, Uuencoded attachment.
msg.NonMime.Attachments.Add(new AttachmentStream("C:\\files\\graph.jpg"));

// Specify the server
smtp1.Server = "mail.test.com";

// Send the message
smtp1.Send(msg);
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.NonMime.Text">
            <summary>
				Gets or sets the non-MIME text.
			</summary><value>
				A string representing the non-MIME text of the message, or an empty
				string if no non-MIME text exits.
			</value><remarks>
			<p>If you wish to create a MessageStream object representing a plain RFC822 message with text, you must use this property. 
			In addition, this property is useful to set if you are creating a MIME message but would 
			like to include a non-MIME part for browsers that cannot read MIME.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates creating a basic non-MIME message with a single attachment.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Create a MessageStream object
Dim msg As New MessageStream()

' Add a normal recipient
msg.To.Add(New MailAddress("you@test.com"))

' Specify the sender
msg.From = New MailAddress("me@test.com")

' Specify the subject
msg.Subject = "Test"

' Add Non-MIME text
msg.NonMime.Text = "Hello. How are you"

' Add a Non-MIME, Uuencoded attachment.
msg.NonMime.Attachments.Add(New AttachmentStream("C:\\files\\graph.jpg"))

' Specify the server
Smtp1.Server = "mail.test.com"

' Send the message
Smtp1.Send(msg)
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Create a MessageStream object
MessageStream msg = new MessageStream();

// Add a normal recipient
msg.To.Add(new MailAddress("you@test.com"));

// Specify the sender
msg.From = new MailAddress("me@test.com");

// Specify the subject
msg.Subject = "Test";

// Add Non-MIME text
msg.NonMime.Text = "Hello. How are you";

// Add a Non-MIME, Uuencoded attachment.
msg.NonMime.Attachments.Add(new AttachmentStream("C:\\files\\graph.jpg"));

// Specify the server
smtp1.Server = "mail.test.com";

// Send the message
smtp1.Send(msg);
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="T:Dart.PowerTCP.Mail.Attachments">
            <summary>
				Contains all recursive attachments contained in the message.
			</summary><remarks>
				<p>The Attachments collection provides a convenient way to access
				all attachments contained in the MessageStream. When using PowerTCP Mail
				for .NET, there are two different types of attachments:
				</p>
				<ul>
					<li>MimeAttachmentStreams, representing MIME attachments.</li>
					<li>AttachmentStreams, representing non-MIME attachments, which can be Uuencoded or Yencoded, but are always Uuencoded when read out.</li>
				</ul>	
				<p>The Attachments collection contains all MimeAttachmentStream objects
located in either <a href="Dart.PowerTCP.Mail.Parts.Attachments.html">MessageStream.Parts.Attachments</a> or recursive attachments
within <a href="Dart.PowerTCP.Mail.Parts.Complex.html">MessageStream.Parts.Complex</a>, and all AttachmentStream objects located
in <a href="Dart.PowerTCP.Mail.NonMime.Attachments.html">MessageStream.NonMime.Attachments</a>.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates creating a basic MIME message with a single attachment.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Create a MessageStream object
Dim msg As New MessageStream()

' Add a normal recipient
msg.To.Add(New MailAddress("you@test.com"))

' Add a CC recipient
msg.CC.Add(New MailAddress("you2@test.com"))

' Add a BCC recipient
msg.BCC.Add(New MailAddress("you3@test.com"))

' Specify the sender
msg.From = New MailAddress("me@test.com")

' Specify the subject
msg.Subject = "Hello"

' Add some text to the message.
msg.Text = "Hi everyone. How are ya doing?"

' Add an attachment
msg.Attachments.Add("C:\files\graph.jpg")

' Specify the server
Smtp1.Server = "mail.test.com"

' Send the message
Smtp1.Send(msg)
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Create a MessageStream object
MessageStream msg = new MessageStream();

// Add a normal recipient
msg.To.Add(new MailAddress("you@test.com"));

// Add a CC recipient
msg.CC.Add(new MailAddress("you2@test.com"));

// Add a BCC recipient
msg.BCC.Add(new MailAddress("you3@test.com"));

// Specify the sender
msg.From = new MailAddress("me@test.com");

// Specify the subject
msg.Subject = "Hello";

// Add some text to the message.
msg.Text = "Hi everyone. How are ya doing?";

// Add an attachment
msg.Attachments.Add("C:\\files\\graph.jpg");

// Specify the server
smtp1.Server = "mail.test.com";

// Send the message
smtp1.Send(msg);
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Attachments.Add(System.Object)">
            <summary>
				Inserts the specified object into the collection as an attachment.
			</summary><param name="shouldBeMimeAttachmentStream">The object to add to the collection.</param><remarks>
			<p>Use this method to add an object which can be cast into a MimeAttachmentStream. The appropriate collection
				containing attachments of this type will also be updated. Since the MessageStream.Attachments collection
			actually reflects the <a href="Dart.PowerTCP.Mail.Parts.Attachments.html">MessageStream.Parts.Attachments</a> collection, a new MimeAttachmentStream
			will be added to the <a href="Dart.PowerTCP.Mail.Parts.Attachments.html">MessageStream.Parts.Attachments</a> collection and the Message.Attachments
			collection will reflect this.
			</p>
			</remarks><exception cref="T:Dart.PowerTCP.Mail.InvalidParameterTypeException"><i>shouldBeMimeAttachmentStream</i> is not a MimeAttachmentStream.</exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Attachments.Add(Dart.PowerTCP.Mail.MimeAttachmentStream)">
            <summary>
				Inserts the specified MimeAttachmentStream into the collection as an attachment.
			</summary><param name="attachment">The MimeAttachmentStream to add to the collection.</param><remarks>
			<p>Use this method to add a MimeAttachmentStream (which represents a MIME				
			attachment) to the MessageStream.Attachments collection. Since the Attachments collection
			actually reflects the <a href="Dart.PowerTCP.Mail.Parts.Attachments.html">MessageStream.Parts.Attachments</a> collection, a new MimeAttachmentStream
			will be added to the <a href="Dart.PowerTCP.Mail.Parts.Attachments.html">MessageStream.Parts.Attachments</a> collection and the Message.Attachments
			collection will reflect this. If any other type of <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> is added to the MessageStream.Attachments
			collection, an exception will be thrown.
			</p>
			</remarks><exception cref="T:Dart.PowerTCP.Mail.InvalidParameterTypeException"><i>attachment</i> is not a MimeAttachmentStream.</exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Attachments.Add(System.IO.Stream,System.String)">
            <summary>
				Inserts the specified <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> (must be a MimeAttachmentStream) into the collection as an attachment.
			</summary><param name="attachment">The <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> to add to the collection.</param><param name="fileName">The filename for the attachment.</param><remarks>
			<p>Use this method to add an <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> which is a MimeAttachmentStream (which represents a MIME				
			attachment) to the Attachments collection. Since the Attachments collection
			actually reflects the <a href="Dart.PowerTCP.Mail.Parts.Attachments.html">MessageStream.Parts.Attachments</a> collection, a new MimeAttachmentStream
			will be added to the <a href="Dart.PowerTCP.Mail.Parts.Attachments.html">MessageStream.Parts.Attachments</a> collection and the Message.Attachments
			collection will reflect this. If any other type of <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> is added to the MessageStream.Attachments
			collection, an exception will be thrown.
			</p>
			</remarks><exception cref="T:Dart.PowerTCP.Mail.InvalidParameterTypeException"><i>attachment</i> is not a MimeAttachmentStream.</exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Attachments.Add(System.String)">
            <summary>
				Inserts the file specified by <i>fileName</i> into the collectio as an attachment.
			</summary><param name="fileName">The filename for the file to add as an attachment.</param><remarks>
			<p>Use this method to add a file to the collection as an attachment. Simply
				pass in a file name and a MimeAttachmentStream will be created containing data
				from this file. It will be Base64 encoded by default.
				Since the MessageStream.Attachments collection
			actually reflects the <a href="Dart.PowerTCP.Mail.Parts.Attachments.html">MessageStream.Parts.Attachments</a> collection, a new MimeAttachmentStream
			will be added to the <a href="Dart.PowerTCP.Mail.Parts.Attachments.html">MessageStream.Parts.Attachments</a> collection and the Message.Attachments
			collection will reflect this.
			</p>
			</remarks><exception cref="T:System.IO.IOException">The filename, directory name, or volume label syntax is incorrect.</exception>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates creating a basic MIME message with a single attachment.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Create a MessageStream object
Dim msg As New MessageStream()

' Add a normal recipient
msg.To.Add(New MailAddress("you@test.com"))

' Add a CC recipient
msg.CC.Add(New MailAddress("you2@test.com"))

' Add a BCC recipient
msg.BCC.Add(New MailAddress("you3@test.com"))

' Specify the sender
msg.From = New MailAddress("me@test.com")

' Specify the subject
msg.Subject = "Hello"

' Add some text to the message.
msg.Text = "Hi everyone. How are ya doing?"

' Add an attachment
msg.Attachments.Add("C:\files\graph.jpg")

' Specify the server
Smtp1.Server = "mail.test.com"

' Send the message
Smtp1.Send(msg)
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Create a MessageStream object
MessageStream msg = new MessageStream();

// Add a normal recipient
msg.To.Add(new MailAddress("you@test.com"));

// Add a CC recipient
msg.CC.Add(new MailAddress("you2@test.com"));

// Add a BCC recipient
msg.BCC.Add(new MailAddress("you3@test.com"));

// Specify the sender
msg.From = new MailAddress("me@test.com");

// Specify the subject
msg.Subject = "Hello";

// Add some text to the message.
msg.Text = "Hi everyone. How are ya doing?";

// Add an attachment
msg.Attachments.Add("C:\\files\\graph.jpg");

// Specify the server
smtp1.Server = "mail.test.com";

// Send the message
smtp1.Send(msg);
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Attachments.Clear">
            <summary>
				Recursively removes all attachments from the MessageStream.
			</summary><remarks>
				<p>This method clears all attachments from <a href="Dart.PowerTCP.Mail.NonMime.Attachments.html">MessageStream.NonMime.Attachments</a>,
				<a href="Dart.PowerTCP.Mail.Parts.Attachments.html">MessageStream.Parts.Attachments</a>, and recursive attachments contained within 
				<a href="Dart.PowerTCP.Mail.Parts.Complex.html">MessageStream.Parts.Complex</a>.
				</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Attachments.Remove(System.Object)">
            <summary>
				Removes the specified attachment.
			</summary><param name="obj">The object representing the attachment to remove.</param><remarks>
				<p>This method removes the specified attachment from whatever 
				collection it resides in (since the Attachments collection is actually
				a combination of attachments contained in <a href="Dart.PowerTCP.Mail.NonMime.Attachments.html">MessageStream.NonMime.Attachments</a>,
				<a href="Dart.PowerTCP.Mail.Parts.Attachments.html">MessageStream.Parts.Attachments</a>, and recursive attachments in <a href="Dart.PowerTCP.Mail.Parts.Complex.html">MessageStream.Parts.Complex</a>).
				For example, if an AttachmentStream was passed into this method (representing a non-MIME attachment)
				any attachment in <a href="Dart.PowerTCP.Mail.NonMime.Attachments.html">MessageStream.NonMime.Attachments</a> which was equal to this object would be removed.
				</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Attachments.RemoveAt(System.Int32)">
            <summary>
				Removes the object at the specified index.
			</summary><param name="index">The index at which the item should be removed.</param>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Attachments.GetEnumerator">
            <summary>
				Returns an enumerator for the collection.
			</summary><returns>
				An IEnumerator for the entire collection.
			</returns><remarks>
				<P>Enumerators only allow reading the data in the collection. Enumerators cannot 
			be used to modify the underlying collection.</P>
				<P>Initially, the enumerator is positioned before the first element in the 
			collection. <A href="frlrfsystemcollectionsienumeratorclassresettopic.htm">IEnumerator.Reset</A> also 
			brings the enumerator back to this position. At this position, calling <A href="frlrfsystemcollectionsienumeratorclasscurrenttopic.htm">IEnumerator.Current</A> throws 
			an exception. Therefore, you must call <A href="frlrfsystemcollectionsienumeratorclassmovenexttopic.htm">IEnumerator.MoveNext</A> to 
			advance the enumerator to the first element of the collection before reading the 
			value of <B>IEnumerator.Current</B>.</P>
				<P>
					<B>IEnumerator.Current</B> returns the same object until either <B>IEnumerator.MoveNext</B> or 
			<B>IEnumerator.Reset</B> is called. <B>IEnumerator.MoveNext</B> sets <B>IEnumerator.Current</B> to the next 
			element.</P>
				<P>After the end of the collection is passed, the enumerator is positioned after 
			the last element in the collection, and calling <B>IEnumerator.MoveNext</B> returns 
			<B>false</B>. If the last call to <B>IEnumerator.MoveNext</B> returned <B>false</B>, calling 
			<B>IEnumerator.Current</B> throws an exception. To set <B>IEnumerator.Current</B> to the first element 
			of the collection again, you can call <B>IEnumerator.Reset</B> followed by 
			<B>IEnumerator.MoveNext</B>.</P>
				<p>This method is used by the "foreach" construct.</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Attachments.Count">
            <summary>
				Gets the number of elements actually contained in the collection.
			</summary><value>
				The number of elements actually contained in the collection.
			</value><remarks>
				<p>This object inherits from ArrayList and, as such, the <b>Count</b> property
					works similarly. <b>Count</b> is the number of elements actually in the collection,
					<b>Capacity</b> is the number of elements the collection is capable of storing. If
					<b>Count</b> exceeds <b>Capacity</b> while adding elements, <b>Capacity</b> is
					doubled.
				</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Attachments.Item(System.Int32)">
            <summary>
				Gets or sets the element at the specified index.
			</summary><param name="index">The zero-based index of the element to get or set.</param><value>The element at the specified index.</value><exception cref="T:System.ArgumentOutOfRangeException">
				<I>Index</I> is less than zero. 
<P>-or-</P>
				<P>
					<I>Index</I> is equal to or greater than <A href="frlrfsystemcollectionsarraylistclasscounttopic.htm">Count</A>.</P>
			</exception><remarks>
				<p>This property provides the ability to access a specific element in the 
collection by using the following syntax: <CODE class="ce">myCollection[Index]</CODE>.</p>
				<p>
				Note, intellisense may not work on members of objects referenced by using this indexer.
				If you would like intellisense to work, get the object referenced by the indexer into 
				it's own variable.
				</p>
			</remarks>
        </member>
        <member name="T:Dart.PowerTCP.Mail.PartList">
            <summary>
				Used as the base class for MessagePartStreams, MessageStreams, and MimeAttachmentStreams.
			</summary><remarks>
				<p>
					Inherits all members from ArrayList.  This object is intended to handle standard functionality for linking MessagePartStreams, MessageStreams, and MimeAttachmentStreams with a Part object.  This is not intended to be used by users.
				</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.PartList.Add(System.Object)">
            <summary>
				Add an object to the end of the collection.
			</summary><remarks>
				<p>This method adds the specified object to this and its parent Parts collection, if applicable.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.PartList.Clear">
            <summary>
				Clears all objects in this collection.
			</summary><remarks>
				<p>This method removes all objects in this collection from the parent collection and this collection.  This method is O(n2) in time, so it is recommended that the parent’s Clear() be used instead where possible.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.PartList.Remove(System.Object)">
            <summary>
				Removes the specified object.
			</summary><remarks>
				<p>This method removes the specified object from this collection and from its parent collection, if applicable.</p>
			</remarks>
        </member>
        <member name="T:Dart.PowerTCP.Mail.MimeAttachmentStreams">
            <summary>	
				A collection of MimeAttachmentStream objects. Inherited from ArrayList.
			</summary><remarks>
				<p>When using PowerTCP Secure Mail for .NET, a MimeAttachmentStreams collection 
				contains MimeAttachmentStream objects which are used to represent MIME attachments
				in the message.</p>
				<p>This collection is accessable at <a href="Dart.PowerTCP.Mail.Parts.Attachments.html">MessageStream.Parts.Attachments</a>.
				</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MimeAttachmentStreams.Add(System.Object)">
            <summary>
				Add an object which can be cast to an MimeAttachmentStream to the end of the MimeAttachmentStreams collection.
			</summary><returns>The index at which the <i>part</i> was added.</returns><param name="mustBeMimeAttachmentStream">The object to add to the collection.</param><remarks>
				<p>Use this method to add an object which can be cast to an MimeAttachmentStream to the MimeAttachmentStreams collection.</p>
			</remarks><exception cref="T:Dart.PowerTCP.Mail.InvalidParameterTypeException"><i>mustBeMimeAttachmentStream</i> cannot be cast to an MimeAttachmentStream.</exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MimeAttachmentStreams.Add(Dart.PowerTCP.Mail.MimeAttachmentStream)">
            <summary>
				Add a MimeAttachmentStream to the end of the MimeAttachmentStreams collection.
			</summary><returns>The index at which the <i>part</i> was added.</returns><param name="part">The MimeAttachmentStream to add to the collection.</param><remarks>
				<p>Use this method to add a MimeAttachmentStream to the MimeAttachmentStreams collection.</p>
			</remarks><exception cref="T:Dart.PowerTCP.Mail.InvalidParameterTypeException"><i>part</i> is not an MimeAttachmentStream.</exception>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates the many ways a MIME message can be created.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class. In additon, import System.IO, as a FileStream will be used.

' Create a MessageStream object
Dim msg As New MessageStream()

' Add a normal recipient
msg.To.Add(New MailAddress("you@test.com"))

' Specify the sender
msg.From = New MailAddress("me@test.com")

' Specify the subject
msg.Subject = "Test"

' Add a MIME attachment
msg.Parts.Attachments.Add(New MimeAttachmentStream("C:\files\graph.bmp"))

' Add some MIME text (Setting MessageStream.Text also does this).
msg.Parts.Simple.Add(New MessagePartStream("More text here"))

' Create a complex MIME part from a stored message.
msg.Parts.Complex.Add(New MessageStream(New FileStream("C:\\message.eml", FileMode.Open)))

' Create a custom MIME boundary to use. (the component will 
' create a default MIME boundary to use if this isn't specified)
msg.MimeBoundary = "----MyBoundary-----"

' Override automatic date setting
msg.Date = ""

' Add a header line.
msg.Header.Add(HeaderLabelType.Organization, "My Organization")

' Now add a custom header line.
msg.Header.Add("X-My-Field: My Value")

' Specify the server
Smtp1.Server = "mail.test.com"

' Send the message
Smtp1.Send(msg)
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class. In addition, import System.IO, as a FileStream will be used.\

// Create a MessageStream object
MessageStream msg = new MessageStream();

// Add a normal recipient
msg.To.Add(new MailAddress("you@test.com"));

// Specify the sender
msg.From = new MailAddress("me@test.com");

// Specify the subject
msg.Subject = "Test";

// Add a MIME attachment
msg.Parts.Attachments.Add(new MimeAttachmentStream("C:\\files\\graph.bmp"));

// Add some MIME text (MessageStream.Text also does this).
msg.Parts.Simple.Add(new MessagePartStream("More text here"));
		
// Create a complex MIME part from a stored message.
msg.Parts.Complex.Add(new MessageStream(new FileStream("C:\\message.eml", FileMode.Open)));

// Create a custom MIME boundary to use. (the component will 
// create a default MIME boundary to use if this isn't specified)
msg.MimeBoundary = "----MyBoundary-----";

// Override automatic date setting
msg.Date = "";

// Add a header line.
msg.Header.Add(HeaderLabelType.Organization, "My Organization");

// Now add a custom header line.
msg.Header.Add("X-My-Field: My Value");

// Specify the server
smtp1.Server = "mail.test.com";

// Send the message
smtp1.Send(msg);
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.MimeAttachmentStreams.Item(System.Int32)">
            <summary>
				Gets or sets the element at the specified index.
			</summary><param name="index">The zero-based index of the element to get or set.</param><value>The element at the specified index.</value><exception cref="T:System.ArgumentOutOfRangeException">
				<I>Index</I> is less than zero. 
<P>-or-</P>
				<P>
					<I>Index</I> is equal to or greater than <A href="frlrfsystemcollectionsarraylistclasscounttopic.htm">Count</A>.</P>
			</exception><remarks>
				<p>This property provides the ability to access a specific element in the 
collection by using the following syntax: <CODE class="ce">myCollection[Index]</CODE>.</p>
				<p>
				Note, intellisense may not work on members of objects referenced by using this indexer.
				If you would like intellisense to work, get the object referenced by the indexer into 
				it's own variable.
				</p>
			</remarks>
        </member>
        <member name="T:Dart.PowerTCP.Mail.MessageStreams">
            <summary>	
				A collection of MessageStream objects. Inherited from ArrayList.
			</summary><remarks>
				<p>When using PowerTCP Secure Mail for .NET, a MessageStreams collection 
				contains MessageStream objects which are used to represent either complete mail messages
				or a part with multi-part structure.</p>
				<p>
				This collection is accessable at <a href="Dart.PowerTCP.Mail.Parts.Complex.html">MessageStream.Parts.Complex</a>.
				</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MessageStreams.Add(System.Object)">
            <summary>
				Add an object which can be cast to an MessageStream to the end of the MessagePartStreams collection.
			</summary><returns>The index at which the <i>part</i> was added.</returns><param name="mustBeMessageStream">The object to add to the collection.</param><remarks>
				<p>Use this method to add an object which can be cast to an MessageStream to the MessageStreams collection.</p>
			</remarks><exception cref="T:Dart.PowerTCP.Mail.InvalidParameterTypeException"><i>mustBeMessageStream</i> cannot be cast to an MessageStream.</exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MessageStreams.Add(Dart.PowerTCP.Mail.MessageStream)">
            <summary>
				Add a MessageStream to the end of the MessageStreams collection.
			</summary><returns>The index at which the <i>part</i> was added.</returns><param name="part">The MessageStream to add to the collection.</param><remarks>
				<p>Use this method to add a MessageStream to the MessageStreams collection.</p>
			</remarks><exception cref="T:Dart.PowerTCP.Mail.InvalidParameterTypeException"><i>part</i> is not an MessageStream.</exception>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates the many ways a MIME message can be created.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class. In additon, import System.IO, as a FileStream will be used.

' Create a MessageStream object
Dim msg As New MessageStream()

' Add a normal recipient
msg.To.Add(New MailAddress("you@test.com"))

' Specify the sender
msg.From = New MailAddress("me@test.com")

' Specify the subject
msg.Subject = "Test"

' Add a MIME attachment
msg.Parts.Attachments.Add(New MimeAttachmentStream("C:\files\graph.bmp"))

' Add some MIME text (Setting MessageStream.Text also does this).
msg.Parts.Simple.Add(New MessagePartStream("More text here"))

' Create a complex MIME part from a stored message.
msg.Parts.Complex.Add(New MessageStream(New FileStream("C:\\message.eml", FileMode.Open)))

' Create a custom MIME boundary to use. (the component will 
' create a default MIME boundary to use if this isn't specified)
msg.MimeBoundary = "----MyBoundary-----"

' Override automatic date setting
msg.Date = ""

' Add a header line.
msg.Header.Add(HeaderLabelType.Organization, "My Organization")

' Now add a custom header line.
msg.Header.Add("X-My-Field: My Value")

' Specify the server
Smtp1.Server = "mail.test.com"

' Send the message
Smtp1.Send(msg)
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class. In addition, import System.IO, as a FileStream will be used.\

// Create a MessageStream object
MessageStream msg = new MessageStream();

// Add a normal recipient
msg.To.Add(new MailAddress("you@test.com"));

// Specify the sender
msg.From = new MailAddress("me@test.com");

// Specify the subject
msg.Subject = "Test";

// Add a MIME attachment
msg.Parts.Attachments.Add(new MimeAttachmentStream("C:\\files\\graph.bmp"));

// Add some MIME text (MessageStream.Text also does this).
msg.Parts.Simple.Add(new MessagePartStream("More text here"));
		
// Create a complex MIME part from a stored message.
msg.Parts.Complex.Add(new MessageStream(new FileStream("C:\\message.eml", FileMode.Open)));

// Create a custom MIME boundary to use. (the component will 
// create a default MIME boundary to use if this isn't specified)
msg.MimeBoundary = "----MyBoundary-----";

// Override automatic date setting
msg.Date = "";

// Add a header line.
msg.Header.Add(HeaderLabelType.Organization, "My Organization");

// Now add a custom header line.
msg.Header.Add("X-My-Field: My Value");

// Specify the server
smtp1.Server = "mail.test.com";

// Send the message
smtp1.Send(msg);
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.MessageStreams.Item(System.Int32)">
            <summary>
				Gets or sets the element at the specified index.
			</summary><param name="index">The zero-based index of the element to get or set.</param><value>The element at the specified index.</value><exception cref="T:System.ArgumentOutOfRangeException">
				<I>Index</I> is less than zero. 
<P>-or-</P>
				<P>
					<I>Index</I> is equal to or greater than <A href="frlrfsystemcollectionsarraylistclasscounttopic.htm">Count</A>.</P>
			</exception><remarks>
				<p>This property provides the ability to access a specific element in the 
collection by using the following syntax: <CODE class="ce">myCollection[Index]</CODE>.</p>
				<p>
				Note, intellisense may not work on members of objects referenced by using this indexer.
				If you would like intellisense to work, get the object referenced by the indexer into 
				it's own variable.
				</p>
			</remarks>
        </member>
        <member name="T:Dart.PowerTCP.Mail.MessagePartStreams">
            <summary>	
				A collection of MessagePartStream objects. Inherited from ArrayList.
			</summary><remarks>
				<p>When using PowerTCP Secure Mail for .NET, a MessagePartStreams collection 
				contains MessagePartStream objects which are used to represent simple inline MIME parts. 
				</p>
				<p>
				This collection is accessable at <a href="Dart.PowerTCP.Mail.Parts.Simple.html">MessageStream.Parts.Simple</a>.
				</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MessagePartStreams.Add(System.Object)">
            <summary>
				Add an object which can be cast to an MessagePartStream to the end of the MessagePartStreams collection.
			</summary><returns>The index at which the <i>part</i> was added.</returns><param name="mustBeMessagePartStream">The object to add to the collection.</param><remarks>
				<p>Use this method to add an object which can be cast to an MessagePartStream to the MessagePartStreams collection.</p>
			</remarks><exception cref="T:Dart.PowerTCP.Mail.InvalidParameterTypeException"><i>mustBeMessagePartStream</i> cannot be cast to an MessagePartStream.</exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.MessagePartStreams.Add(Dart.PowerTCP.Mail.MessagePartStream)">
            <summary>
				Add a MessagePartStream to the end of the MessagePartStreams collection.
			</summary><returns>The index at which the <i>part</i> was added.</returns><param name="part">The MessagePartStream to add to the collection.</param><remarks>
				<p>Use this method to add a MessagePartStream to the MessagePartStreams collection.</p>
			</remarks><exception cref="T:Dart.PowerTCP.Mail.InvalidParameterTypeException"><i>part</i> is not an MessagePartStream.</exception>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates the many ways a MIME message can be created.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class. In additon, import System.IO, as a FileStream will be used.

' Create a MessageStream object
Dim msg As New MessageStream()

' Add a normal recipient
msg.To.Add(New MailAddress("you@test.com"))

' Specify the sender
msg.From = New MailAddress("me@test.com")

' Specify the subject
msg.Subject = "Test"

' Add a MIME attachment
msg.Parts.Attachments.Add(New MimeAttachmentStream("C:\files\graph.bmp"))

' Add some MIME text (Setting MessageStream.Text also does this).
msg.Parts.Simple.Add(New MessagePartStream("More text here"))

' Create a complex MIME part from a stored message.
msg.Parts.Complex.Add(New MessageStream(New FileStream("C:\\message.eml", FileMode.Open)))

' Create a custom MIME boundary to use. (the component will 
' create a default MIME boundary to use if this isn't specified)
msg.MimeBoundary = "----MyBoundary-----"

' Override automatic date setting
msg.Date = ""

' Add a header line.
msg.Header.Add(HeaderLabelType.Organization, "My Organization")

' Now add a custom header line.
msg.Header.Add("X-My-Field: My Value")

' Specify the server
Smtp1.Server = "mail.test.com"

' Send the message
Smtp1.Send(msg)
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class. In addition, import System.IO, as a FileStream will be used.\

// Create a MessageStream object
MessageStream msg = new MessageStream();

// Add a normal recipient
msg.To.Add(new MailAddress("you@test.com"));

// Specify the sender
msg.From = new MailAddress("me@test.com");

// Specify the subject
msg.Subject = "Test";

// Add a MIME attachment
msg.Parts.Attachments.Add(new MimeAttachmentStream("C:\\files\\graph.bmp"));

// Add some MIME text (MessageStream.Text also does this).
msg.Parts.Simple.Add(new MessagePartStream("More text here"));
		
// Create a complex MIME part from a stored message.
msg.Parts.Complex.Add(new MessageStream(new FileStream("C:\\message.eml", FileMode.Open)));

// Create a custom MIME boundary to use. (the component will 
// create a default MIME boundary to use if this isn't specified)
msg.MimeBoundary = "----MyBoundary-----";

// Override automatic date setting
msg.Date = "";

// Add a header line.
msg.Header.Add(HeaderLabelType.Organization, "My Organization");

// Now add a custom header line.
msg.Header.Add("X-My-Field: My Value");

// Specify the server
smtp1.Server = "mail.test.com";

// Send the message
smtp1.Send(msg);
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.MessagePartStreams.Item(System.Int32)">
            <summary>
				Gets or sets the element at the specified index.
			</summary><param name="index">The zero-based index of the element to get or set.</param><value>The element at the specified index.</value><exception cref="T:System.ArgumentOutOfRangeException">
				<I>Index</I> is less than zero. 
<P>-or-</P>
				<P>
					<I>Index</I> is equal to or greater than <A href="frlrfsystemcollectionsarraylistclasscounttopic.htm">Count</A>.</P>
			</exception><remarks>
				<p>This property provides the ability to access a specific element in the 
collection by using the following syntax: <CODE class="ce">myCollection[Index]</CODE>.</p>
				<p>
				Note, intellisense may not work on members of objects referenced by using this indexer.
				If you would like intellisense to work, get the object referenced by the indexer into 
				it's own variable.
				</p>
			</remarks>
        </member>
        <member name="T:Dart.PowerTCP.Mail.AttachmentStreams">
            <summary>	
				A collection of AttachmentStream objects. Inherited from ArrayList.
			</summary><remarks>
				<p>When using PowerTCP Secure Mail for .NET, an AttachmentStreams collection 
				contains AttachmentStream objects which are used to represent non-MIME attachments
				which can be Uuencoded or Yencoded, although a non-MIME attachment will always be read out as Uuencoded.
				.</p>
				<p>When creating an AttachmentStream the data will always be read out as a Uuencoded attachment.
				Fot this reason, a new AttachmenStream will
				be created with AttachmentStream.MimeEncoding = ContentEncoding.Uuencode. Changing this 
				property could result in incorrect message structure.</p>
				<p>This collection is accessable at <a href="Dart.PowerTCP.Mail.NonMime.Attachments.html">MessageStream.NonMime.Attachments</a>.
				</p>
				<p>MimeAttachmentStream objects should NOT be added to this collection.  This will cause errors in the receiving message parser.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.AttachmentStreams.Add(System.Object)">
            <summary>
				Add an object which can be cast to an AttachmentStream to the end of the AttachmentStreams collection.
			</summary><returns>The index at which the <i>part</i> was added.</returns><param name="mustBeAttachmentStream">The object to add to the collection.</param><remarks>
				<p>Use this method to add an object which can be cast to an AttachmentStream to the AttachmentStreams collection.
				Before adding the AttachmentStream, be sure AttachmentStream.MimeEncoding = ContentEncoding.Uuencode.</p>
			</remarks><exception cref="T:Dart.PowerTCP.Mail.InvalidParameterTypeException"><i>mustBeAttachmentStream</i> cannot be cast to an AttachmentStream.</exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.AttachmentStreams.Add(Dart.PowerTCP.Mail.AttachmentStream)">
            <summary>
				Add an AttachmentStream to the end of the AttachmentStreams collection.
			</summary><returns>The index at which the <i>part</i> was added.</returns><param name="part">The AttachmentStream to add to the collection.</param><remarks>
				<p>Use this method to add an AttachmentStream to the AttachmentStreams collection.
				Before adding the AttachmentStream, be sure AttachmentStream.MimeEncoding = ContentEncoding.Uuencode.</p>
			</remarks><exception cref="T:Dart.PowerTCP.Mail.InvalidParameterTypeException"><i>part</i> is not an AttachmentStream.</exception>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates creating a basic non-MIME message with a single attachment.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Create a MessageStream object
Dim msg As New MessageStream()

' Add a normal recipient
msg.To.Add(New MailAddress("you@test.com"))

' Specify the sender
msg.From = New MailAddress("me@test.com")

' Specify the subject
msg.Subject = "Test"

' Add Non-MIME text
msg.NonMime.Text = "Hello. How are you"

' Add a Non-MIME, Uuencoded attachment.
msg.NonMime.Attachments.Add(New AttachmentStream("C:\\files\\graph.jpg"))

' Specify the server
Smtp1.Server = "mail.test.com"

' Send the message
Smtp1.Send(msg)
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Create a MessageStream object
MessageStream msg = new MessageStream();

// Add a normal recipient
msg.To.Add(new MailAddress("you@test.com"));

// Specify the sender
msg.From = new MailAddress("me@test.com");

// Specify the subject
msg.Subject = "Test";

// Add Non-MIME text
msg.NonMime.Text = "Hello. How are you";

// Add a Non-MIME, Uuencoded attachment.
msg.NonMime.Attachments.Add(new AttachmentStream("C:\\files\\graph.jpg"));

// Specify the server
smtp1.Server = "mail.test.com";

// Send the message
smtp1.Send(msg);
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.AttachmentStreams.Item(System.Int32)">
            <summary>
				Gets or sets the element at the specified index.
			</summary><param name="index">The zero-based index of the element to get or set.</param><value>The element at the specified index.</value><exception cref="T:System.ArgumentOutOfRangeException">
				<I>Index</I> is less than zero. 
<P>-or-</P>
				<P>
					<I>Index</I> is equal to or greater than <A href="frlrfsystemcollectionsarraylistclasscounttopic.htm">Count</A>.</P>
			</exception><remarks>
				<p>This property provides the ability to access a specific element in the 
collection by using the following syntax: <CODE class="ce">myCollection[Index]</CODE>.</p>
				<p>
				Note, intellisense may not work on members of objects referenced by using this indexer.
				If you would like intellisense to work, get the object referenced by the indexer into 
				it's own variable.
				</p>
			</remarks>
        </member>
        <member name="T:Dart.PowerTCP.Mail.PipeStream">
            <summary>Represents a stream that wraps an internal stream.</summary><remarks>
				<p>PipeStream wraps a stream that is filtered or encoded/decoded in some fashion, calling its methods and properties internally.</p>
<p>PipeStream provides the capability to perform buffered reads/writes.
Typically, derived classes would perform a transformation
(filtering/encoding) to the data passing through it.</p>
				<p>PipeStream does not support seeking\.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.PipeStream.ResetPosition">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dart.PowerTCP.Mail.PipeStream.#ctor(System.IO.Stream)">
            <summary>Creates a new instance of PipeStream.</summary><remarks>
			<p>The default constructor creates a new instance
			of PipeStream, with PipeStream.CoreStream initialized to the
			Stream passed in as <i>coreStream</i>.
			</p>
			</remarks><param name="coreStream">The Stream object to set as PipeStream.CoreStream.</param>
        </member>
        <member name="M:Dart.PowerTCP.Mail.PipeStream.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>Creates a new instance of PipeStream.</summary><remarks>
			<p>The default constructor creates a new instance
			of PipeStream, with PipeStream.CoreStream initialized to the
			Stream passed in as <i>coreStream</i>.
			</p>
			</remarks><param name="coreStream">The Stream object to set as PipeStream.CoreStream.</param><param name="encoding">The Encoding type to use for data transformations.</param>
        </member>
        <member name="M:Dart.PowerTCP.Mail.PipeStream.#ctor">
            <summary>Creates a new instance of PipeStream.</summary><remarks>
				<p>This constructor is used by derived objects, which must set coreStream.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.PipeStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>Read data from the Stream.</summary><remarks>
				<p>This method actually calls PipeStream.CoreStream.Read, passing the data "through"
				the PipeStream and into <i>buffer</i>.
				</p>
			</remarks><param name="buffer">The storage location for the received data.</param><param name="offset">The zero-based position in the buffer at which to store the received data.</param><param name="count">The maximum number of bytes to read.</param><returns>
				The total number of bytes read into the buffer.
			</returns><exception cref="T:System.IO.IOException">Thrown when the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> is not readable.</exception><exception cref="T:System.ArgumentNullException">Thrown when the buffer or callback is null.</exception><exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is less than zero or when count is less than or equal to zero.</exception><exception cref="T:System.ArgumentException">Thrown when the (offset + count) &gt; buffer.Length.</exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.PipeStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>Writes data to the stream.</summary><remarks>
				<p>This method actually calls PipeStream.CoreStream.Write, passing the data "through"
				the PipeStream and into PipeStream.CoreStream.</p>
			</remarks><param name="buffer">The storage location for the written data.</param><param name="offset">The zero-based position in the buffer from which to begin writing from.</param><param name="count">The exact number of bytes to write.</param><exception cref="T:System.IO.IOException">Thrown when the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> is not writeable.</exception><exception cref="T:System.ArgumentNullException">Thrown when the buffer is null.</exception><exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is less than zero or when count is less than or equal to zero.</exception><exception cref="T:System.ArgumentException">Thrown when the (offset + count) &gt; buffer.Length.</exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.PipeStream.Flush">
            <summary>
				Updates the underlying data source or repository with the current state of the 
				buffer and then clears the buffer. 
			</summary><exception cref="T:System.IO.IOException">An I/O error occurs.</exception><exception cref="T:System.ObjectDisposedException">The <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> is closed.</exception><remarks>
				<p>If the Stream contains any internal Streams as members, this method will also cause the Flush method of all
					internal Streams.
				</p>
				<p>
				This method MUST be called when writing is complete for operations to operate properly. One example is when creating a message 
				comprised of only headers. If Flush is not called, the headers will be lost.
				</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.PipeStream.InternalWrite(System.Byte[],System.Int32,System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Dart.PowerTCP.Mail.PipeStream.ReadFilter(System.Byte[],System.Byte[]@)">
            <summary>
            </summary>
        </member>
        <member name="M:Dart.PowerTCP.Mail.PipeStream.FinalWrite(System.Byte[])">
            <summary>
            </summary>
        </member>
        <member name="P:Dart.PowerTCP.Mail.PipeStream.CoreStream">
            <summary>The internal stream to which all buffered reads/writes are being made.</summary><remarks>
				<p>
					This property returns the internal stream to which all buffered reads/writes are being made.
				</p>
			</remarks><returns>The internal Stream object.</returns>
        </member>
        <member name="P:Dart.PowerTCP.Mail.PipeStream.CanRead">
            <summary>	
				Gets a value indicating whether the current <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> supports reading.
			</summary><value>
				true if reading is currently allowed, and false if not.
			</value><remarks>
				<p>If Position &lt; Length, this property returns true to indicate bytes are
			available to be read, otherwise false.</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.PipeStream.Position">
            <summary>Gets or sets the position within the current stream</summary><remarks>
			<p>Returns PipeStream.CoreStream.Position if not writing, and the 
			amount written to the stream, if writing. Attempting to set this property returns an InvalidOperationException unless it is set to 0, in which case the position of the PipeStream.CoreStream.Position
			 will be set to 0, and this object is ready for reading.</p>
			</remarks><returns>A value indicating the current position in the stream.</returns>
        </member>
        <member name="P:Dart.PowerTCP.Mail.PipeStream.Length">
            <summary>Gets the length in bytes of the stream.</summary><remarks>
				<p>Returns PipeStream.CoreStream.Length if not writing, and PipeStream.Position, if writing.</p>
			</remarks><returns>A value indicating the length in bytes of the stream.</returns>
        </member>
        <member name="T:Dart.PowerTCP.Mail.ExceptionEventHandler">
            <summary>
				Represents the method (event handler) that will be raised when either the BeginLogin or BeginLogout operations complete.
			</summary><remarks>
				<p>As Microsoft describes in their MSDN documentation, the event model in the .NET Framework is based on having an event delegate that connects an event with its handler. To raise an event, two elements are needed:</p>
				<ul>
					<li>A class that holds the event data. This class must derive from the base class EventArgs.</li>
					<li>A delegate that points to a method that provides the response to the event.</li>
				</ul>
				<p>When asynchronously logging in/out, the class that holds the event data is the ExceptionEventArgs class. A method must be created with the same signature as the delegate. If you are working within the Visual Studio.NET environment, this can be automatically done for you. See the "Using Events In PowerTCP" topic for more information. If you are not working within the Visual Studio.NET environment, you must do this yourself. In this example that would mean a method would have to be defined to accept two arguments (an object and an ExceptionEventArgs) and return void. Once this has been done, the delegate must be "connected" to the handling event. This is done by adding an instance of the delegate to the event. 
				For more information about event handler delegates, see the "Using Events In PowerTCP" topic.</p>
			</remarks>
        </member>
        <member name="T:Dart.PowerTCP.Mail.PopEventHandler">
            <summary>
				Represents the method (event handler) that will be raised when the PopMessage.BeginGet operation completes.
			</summary><remarks>
				<p>As Microsoft describes in their MSDN documentation, the event model in the .NET Framework is based on having an event delegate that connects an event with its handler. To raise an event, two elements are needed:</p>
				<ul>
				<li>A class that holds the event data. This class must derive from the base class EventArgs.</li>
				<li>A delegate that points to a method that provides the response to the event.</li>
				</ul>
				<p>When asynchronously getting messages, the class that holds the event data is the PopEventArgs class. A method must be created with the same signature as the delegate. If you are working within the Visual Studio.NET environment, this can be automatically done for you. See the "Using Events In PowerTCP" topic for more information. If you are not working within the Visual Studio.NET environment, you must do this yourself. In this example that would mean a method would have to be defined to accept two arguments (an object and an PopEventArgs) and return void. Once this has been done, the delegate must be "connected" to the handling event. This is done by adding an instance of the delegate to the event (see examples below). 
				For more information about event handler delegates, see the "Using Events In PowerTCP" topic.</p>
			</remarks>
        </member>
        <member name="T:Dart.PowerTCP.Mail.PopProgressEventHandler">
            <summary>
				Represents the method (event handler) that will be raised when progress information is available. 
			</summary><remarks>
				<p>As Microsoft describes in their MSDN documentation, the event model in the .NET Framework is based on having an event delegate that connects an event with its handler. To raise an event, two elements are needed:</p>
				<ul>
				<li>A class that holds the event data. This class must derive from the base class EventArgs.</li>
				<li>A delegate that points to a method that provides the response to the event.</li>
				</ul>
				<p>When capturing progress information is desired, the class that holds the event data is the PopProgressEventArgs class. A method must be created with the same signature as the delegate. If you are working within the Visual Studio.NET environment, this can be automatically done for you. See the "Using Events In PowerTCP" topic for more information. If you are not working within the Visual Studio.NET environment, you must do this yourself. In this example that would mean a method would have to be defined to accept two arguments (an object and an PopProgressEventArgs) and return void. Once this has been done, the delegate must be "connected" to the handling event. This is done by adding an instance of the delegate to the event (see examples below). 
				For more information about event handler delegates, see the "Using Events In PowerTCP" topic.</p>
			</remarks>
        </member>
        <member name="T:Dart.PowerTCP.Mail.PopProgressEventArgs">
            <summary>
				This class is passed into the Pop.Progress event and provides data for this event.
			</summary><remarks>
				<p>When a message is retrieved from the server, the Pop.Progress event will be raised in the 
				frequency specified by Pop.Connection.ReceiveBufferSize. This event will contain the PopProgressEventArgs class, providing
				data useful for displaying progress to the user. For example, if you wish to display progress for the retrieval
				of ALL messages, use 0 for minimum, pop1.Messages.Length for maximum, and PopMessage.Id as value.
				If you wish to display progress for each message, use 0 for minimum, PopProgressEventArgs.Length for maximum,
				and PopProgressEventArgs.Position for the value.</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.PopProgressEventArgs.PopMessage">
            <summary>
				Gets the PopMessage representing the message currently being retrieved.
			</summary><remarks>
				<p>The PopMessage object represents the message that is currently being retrieved.
				This is useful for displaying progress data specific to a particular message, such as message id.</p>
			</remarks><value>
				A PopMessage object representing the message retrieved.
			</value>
        </member>
        <member name="P:Dart.PowerTCP.Mail.PopProgressEventArgs.Position">
            <summary>
				The position within the stream.
			</summary><remarks>
				<p>This value represents the position within the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> of the message
				being retrieved at the time the Object.Progress event was raised. This is 
				useful for displaying progress as Object.Position
				divided by Object.Length gives the percentage complete.</p>
				<p>Object.Position will equal Object.Length
				when all data has been transferred.</p>
			</remarks><value>
				A long representing the current position within the stream.
			</value>
        </member>
        <member name="P:Dart.PowerTCP.Mail.PopProgressEventArgs.Length">
            <summary>
				The length of the stream.
			</summary><remarks>
				<p>This value represents the number in bytes of the length of the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> of the message
				being retrieved at the time the Object.Progress event was raised. This is 
				useful for displaying progress as Object.Position
				divided by Object.Length gives the percentage complete.</p>
				<p>Object.Position will equal Object.Length
				when all data has been transferred.</p>
			</remarks><value>
				A long representing the number in bytes of the length of the stream.
			</value>
        </member>
        <member name="T:Dart.PowerTCP.Mail.MessageSection">
            <summary>
				Used by the Pop.AutoGet property to determine what portion of messages are returned.
			</summary><remarks>
				<p>To automatically get all messages after logging in, set the Pop.AutoGet property to
				MessageSection.Complete. To automatically get only the message header after logging in, set
				the Pop.AutoGet property to MessageSection.Header. To disable automatic message retrieval, set
				the Pop.AutoGet property to MessageSection.None. If messages are not retrieved, you will have
				to retrieve the messages you want using the PopMessage.Get method.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates retrieving a single POP message.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' This example demonstrates getting a single message. To do
' this, you must login and keep the connection. Set AutoLogout
' to false to disable auto logout.
Pop1.AutoLogout = False

' Do not automatically get any part of the message.
Pop1.AutoGet = MessageSection.None

' Login
Pop1.Login("mail.test.com", "testuser", "testpass")

' Check to see if any messages were retrieved.
If Pop1.Messages.Length &gt; 0 Then

   ' Get the first message.
   Pop1.Messages(0).Get()

   ' Display data about this message.
   Debug.WriteLine("From: " + Pop1.Messages(0).Message.From.Address)
   Debug.WriteLine("Subject: " + Pop1.Messages(0).Message.Subject)
End If

' Logout has to be explicitly done since AutoLogout = false
Pop1.Logout()
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// This example demonstrates getting a single message. To do
// this, you must login and keep the connection. Set AutoLogout
// to false to disable auto logout.
pop1.AutoLogout = false;

// Do not automatically get any part of the message.
pop1.AutoGet = MessageSection.None;

// Login
pop1.Login("mail.test.com", "testuser", "testpass");

// Check to see if any messages were retrieved.
if(pop1.Messages.Length &gt; 0)
{
   // Get the first message.
   pop1.Messages[0].Get();

   // Display data about this message.
   Debug.WriteLine("From: " + pop1.Messages[0].Message.From.Address);
   Debug.WriteLine("Subject: " + pop1.Messages[0].Message.Subject);
}

// Logout has to be explicitly done since AutoLogout = false
pop1.Logout();
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="F:Dart.PowerTCP.Mail.MessageSection.None">
            <summary>
				Disables automatic message retrieval.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.MessageSection.Header">
            <summary>
				Automatically gets all message header after logging in.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.MessageSection.Complete">
            <summary>
				Automatically gets entire message after logging in.
			</summary>
        </member>
        <member name="T:Dart.PowerTCP.Mail.PopEventArgs">
            <summary>
				This class is passed into the Pop.EndGet event and provides data for this event.
			</summary><remarks>
				<p>A PopEventArgs is passed into into Pop.EndGet event after a message has been asynchronously 
				retrieved by use of the PopMessage.BeginGet method. If successful, this data will contain the message
				retrieved.</p>
				<p>If an exception occurred during the asynchronous operation, it would be returned in the 
				handling event. To trap the error, check the PopEventArgs.Exception property.</p>
				<p>For more information on implementing and handling events using PowerTCP.NET, see 
				the topic, "Events in PowerTCP".</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.PopEventArgs.PopMessage">
            <summary>
				Gets the PopMessage that was part of the associated method call.
			</summary><remarks>
				<p>The PopMessage object represents the message retrieved. For example,
				the actual message data is contained in a MessageStream object, accessible by the 
				PopMessage.Message property.</p>
			</remarks><value>
				A PopMessage object representing the message retrieved.
			</value>
        </member>
        <member name="P:Dart.PowerTCP.Mail.PopEventArgs.State">
            <summary>
				Gets the object that was included as part of the associated method call. 
			</summary><remarks>
				<p>The EndEventArgs.State property can be used in the calling asynchronous method to make data accessible
				to the handling event.</p>
				<p>This property is useful for making data accessible to the handling event. Since asynchronous methods are "disconnected" (meaning that when one is called, it executes on it's own and returns in the event handler) data that you were using in the code that called the asynchronous method may not be available in the event handler. Simply pass this data in as <i>state</i> when calling the asynchronous method (usually a BeginXXX method) and it is available in the event handler.
				If you do not wish to make an object accessible in the EndXXX event, simple pass in null as <i>state</i>.</p>
			</remarks><value>
				An object containing data passed into the calling asynchronous method.
			</value>
        </member>
        <member name="P:Dart.PowerTCP.Mail.PopEventArgs.Exception">
            <summary>
				Gets any exception which occurred during the asynchronous operation.
			</summary><remarks>
				<p>Check this property to tell if an exception occurred during the asynchronous operation. If this property is null, no exception occurred.</p>
				<p>The exception property is useful for checking exceptions and handling them appropriately. For example, if a bad command was sent to the server, a ProtocolException may be thrown. You could check this property to see if it was of type ProtocolException, than handle appropriately.</p>
			</remarks><value>
				If any exception occurred during the asynchronous operation, this property will contain an Exception object describing the exception.
			</value>
        </member>
        <member name="T:Dart.PowerTCP.Mail.Pop">
            <summary>
				<p>The Pop component enables the integration of Post Office Protocol (POP) functionality into any .NET application.</p>
            </summary><remarks>
				<p>The Pop component enables the integration of Post Office Protocol (POP) functionality into any .NET application, allowing your application to easily receive Internet mail. 
				Flexible POP message support enables easy retrieval of POP
				messages. Other features include synchronous and asynchronous use, proxy support, and the ability to send commands.</p>
				<H4 class="dtH4">Using the Pop Component</H4>
				<p>What follows are short descriptions of common usability issues. For a more complete, "walk-through" type description, see Using PowerTCP Secure Mail for .NET.</p>
				<p><b>Easy session management:</b> The Pop.Login method authenticates to the server and populates the Pop.Messages collection with information about the messsages present in the mail drop. If the Pop.AutoLogout property
				is true, the session will be closed after all communication is complete. If Pop.AutoLogout is false, the session will have to be explicitly closed using Pop.Logout.</p>
				<p><b>Flexible message retrieval:</b> The quickest and easiest way to retrieve messages is to set Pop.AutoGet = MessageSection.Complete, and the Pop.Messages collection will automatically get
				all messages after the Pop.Login method is used. To retrieve an individual message, use the <a href="Dart.PowerTCP.Mail.PopMessage.Get.html">Pop.Messages[n].Get</a> method. Messages can be retrieved into a MessageStream object (for easy decoding)
				or into any other type of <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> object (for your own implementation).</p>
				<p><b>Advanced attachment decoding:</b> Attachments are decoded "on the fly" eliminating any need for disk access, making your application faster and more efficient. In addition, attachments can be automatically decoded and
				saved as files, or decoded into MemoryStreams to use within your application.</p>
				<p><b>Synchronous Use:</b> Most applications written with the Pop component will be synchronous, meaning that the application, when calling a synchronous method, will not execute the next line of code until the response is received. Use synchronous methods when the receiving of mail does not have to be transparent to the user.</p>
				<p><b>Asynchronous Use:</b> The Pop component fully supports asynchronous use, meaning that the application, when calling an asynchronous method, will immediately execute the next line of code without waiting for the response from the method. When the response is received, an event will be raised.</p>
				<p><b>Displaying Progress:</b> The Pop.Progress event provides real-time notification of the number of bytes sent, both for a single messages and all messages.</p>
				<p><b>Accessing POP Protocol Communication:</b> The Pop.Trace event enables access to all commands and data sent over the TCP connection.</p>
				<p><b>Retrieving info about the control connection:</b> The TCP control connection is exposed through the Pop.Connection property, allowing access to low-level properties and methods. This can be used to view TCP-level activity, such as the local and remote IP address. The Pop.Connection property can also be used to send any command to the mail server.  Furthermore, you can use the Proxy property of this object to enable automatic communication with proxy servers when getting mail. The Tcp class can't be used on its own without a license for the PowerTCP <ign>Socket</ign> Objects.</p>
				<p><b>Sending commands to the server:</b> Any command (including proprietary commands) can be sent to a POP server using the Pop.Connection.Send method.</p>
            </remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates logging into a POP server and retrieving all messages.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Automatically remove files after getting them from the server
Pop1.AutoDelete = True

' Login. The default settings will cause the Pop component to
' automatically retrieve all messages, delete them from the
' server, and logout.
Pop1.Login("mail.test.com", "testuser", "testpass")

' All message retrieved. Iterate through the collection
' and display data.
Dim msg As PopMessage
For Each msg In Pop1.Messages
   Debug.WriteLine("Message ID: " + msg.Id)
   Debug.WriteLine("Message UID: " + msg.Uid)
   Debug.WriteLine("Messge Size: " + msg.Size)
   Debug.WriteLine("From: " + msg.Message.From.Address)
   Debug.WriteLine("Subject: " + msg.Message.Subject)
Next
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Automatically remove files after getting them from the server
pop1.AutoDelete = true;

// Login. The default settings will cause the Pop component to
// automatically retrieve all messages, delete them from the
// server, and logout.
pop1.Login("mail.test.com", "testuser", "testpass");

// All message retrieved. Iterate through the collection
// and display data.
foreach(PopMessage msg in pop1.Messages)
{
   Debug.WriteLine("Message ID: " + msg.Id);
   Debug.WriteLine("Message UID: " + msg.Uid);
   Debug.WriteLine("Messge Size: " + msg.Size);
   Debug.WriteLine("From: " + msg.Message.From.Address);
   Debug.WriteLine("Subject: " + msg.Message.Subject);
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="F:Dart.PowerTCP.Mail.Pop.term">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Pop.#ctor(System.ComponentModel.IContainer)">
            <summary>
				Initializes a new instance of the Pop component.
			</summary><remarks>
				<p>Use this constructor to add the Pop component to the IContainer 
				container. When using Visual Studio.NET, simply add the Pop component 
				to the form and the object will automatically be created and initialized. 
				If working out of the Visual Studio.NET environment (or using the Pop 
				component as a reference), the Pop component will have to be explicitly 
				created and initialized.</p>
				<p>The following table shows initial property values for an instance of Pop.</p>
				<div class="tablediv">
					<table cellspacing="0" class="dtTABLE">
						<tr valign="top">
							<th width="50%">Property</th>
							<th width="50%">Initial Value</th>
						</tr>
						<tr valign="top">
							<td width="50%"> AutoDelete </td>
							<td width="50%"> false </td>
						</tr>
						<tr valign="top">
							<td width="50%"> AutoGet </td>
							<td width="50%"> Complete </td>
						</tr>
						<tr valign="top">
							<td width="50%"> AutoLogout </td>
							<td width="50%"> true </td>
						</tr>
						<tr valign="top">
							<td width="50%"> AutoSize </td>
							<td width="50%"> true </td>
						</tr>
						<tr valign="top">
							<td width="50%"> AutoUid </td>
							<td width="50%"> true </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Busy </td>
							<td width="50%"> false </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Connected </td>
							<td width="50%"> false </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Connection </td>
							<td width="50%"> Tcp component </td>
						</tr>
						<tr valign="top">
							<td width="50%"> DeleteCreatedFiles </td>
							<td width="50%"> true </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Directory</td>
							<td width="50%"> zero-length string </td>
						</tr>
						<tr valign="top">
							<td width="50%"> DoEvents </td>
							<td width="50%"> true </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Last </td>
							<td width="50%"> -1 </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Messages </td>
							<td width="50%"> PopMessage array </td>
						</tr>
						<tr valign="top">
							<td width="50%"> OverwriteFiles </td>
							<td width="50%"> false </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Size </td>
							<td width="50%"> 0 </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Timeout </td>
							<td width="50%"> 30000 </td>
						</tr>
						<tr valign="top">
							<td width="50%"> UseMemoryStreams </td>
							<td width="50%"> false </td>
						</tr>
					</table>
				</div>
			</remarks><param name="container">The IContainer which contains the Pop component.</param>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates the Pop component constructors.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Create a default instance
Dim pop1 As New Pop()

' Create an instance, passing in a reference to the container
Dim pop2 As New Pop(Me.components)
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Create a default instance
Pop pop1 = new Pop();

// Create an instance, passing in a reference to the container
Pop pop2 = new Pop(this.components);
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Pop.#ctor">
            <summary>
				Initializes a new instance of the Pop component.
			</summary><remarks>
				<p>The default constructor initializes a new Pop component. When using Visual Studio.NET, simply add the Pop component 
				to the form and the object will automatically be created and initialized. 
				If working out of the Visual Studio.NET environment (or using the Pop 
				component as a reference), the Pop component will have to be explicitly 
				created and initialized.</p>
				<p>The following table shows initial property values for an instance of Pop.</p>
				<div class="tablediv">
								<table cellspacing="0" class="dtTABLE">
						<tr valign="top">
							<th width="50%">Property</th>
							<th width="50%">Initial Value</th>
						</tr>
						<tr valign="top">
							<td width="50%"> AutoDelete </td>
							<td width="50%"> false </td>
						</tr>
						<tr valign="top">
							<td width="50%"> AutoGet </td>
							<td width="50%"> Complete </td>
						</tr>
						<tr valign="top">
							<td width="50%"> AutoLogout </td>
							<td width="50%"> true </td>
						</tr>
						<tr valign="top">
							<td width="50%"> AutoSize </td>
							<td width="50%"> true </td>
						</tr>
						<tr valign="top">
							<td width="50%"> AutoUid </td>
							<td width="50%"> true </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Busy </td>
							<td width="50%"> false </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Connected </td>
							<td width="50%"> false </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Connection </td>
							<td width="50%"> Tcp component </td>
						</tr>
						<tr valign="top">
							<td width="50%"> DeleteCreatedFiles </td>
							<td width="50%"> true </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Directory</td>
							<td width="50%"> zero-length string </td>
						</tr>
						<tr valign="top">
							<td width="50%"> DoEvents </td>
							<td width="50%"> true </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Last </td>
							<td width="50%"> -1 </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Messages </td>
							<td width="50%"> PopMessage array </td>
						</tr>
						<tr valign="top">
							<td width="50%"> OverwriteFiles </td>
							<td width="50%"> false </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Size </td>
							<td width="50%"> 0 </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Timeout </td>
							<td width="50%"> 30000 </td>
						</tr>
						<tr valign="top">
							<td width="50%"> UseMemoryStreams </td>
							<td width="50%"> false </td>
						</tr>
					</table>
				</div>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates the Pop component constructors.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Create a default instance
Dim pop1 As New Pop()

' Create an instance, passing in a reference to the container
Dim pop2 As New Pop(Me.components)
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Create a default instance
Pop pop1 = new Pop();

// Create an instance, passing in a reference to the container
Pop pop2 = new Pop(this.components);
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Pop.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Pop.Dispose(System.Boolean)">
            <summary>
			Releases all resources associated with the object.
			</summary><remarks>
				<p>The Object.Dispose method abruptly aborts the connection and releases all resources.</p>
				<p>Object.Dispose should ONLY be used to release all resources used by the
object, and the object should not be used subsequently. If an abort is
desired, then Object.Close or Object.Connection.Close if available should be used to terminate
activity and reset the object. The Object cannot be used once Object.Dispose() or Object.Dispose(true) are called.
</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates a logout procedure for the Pop component.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

Private Sub PopLogout()
   ' Check to see if currently connected before logging out.
   If Pop1.Connected Then
      ' Attempt to log out gracefully.
      Try
         Pop1.Logout()
      Catch ex As Exception
         ' Logout failed. Just abruptly close.
         Pop1.Dispose()
      End Try
    End If
End Sub
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Check to see if currently connected before logging out.
if(pop1.Connected)
{
   // Attempt to log out gracefully.
   try
   {
      pop1.Logout();
   }
   catch(Exception ex)
   {
      // Logout failed. Just abruptly close.
      pop1.Dispose();
   }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Pop.Logout">
            <summary>
            Ceases all activity and gracefully closes the control connection.
            </summary><remarks>
				<p>This method causes a "QUIT" command to be issued to the server and waits until the server has closed 
				the connection. If Pop.AutoLogout is true, logout will occur automatically. If any messages were marked for deletion, these deletes will occur after calling this method. To perform this operation asynchronously, use the Pop.BeginLogout method.</p>
				<p>This method should be considered the intended means of ending an POP session. Pop.Logout differs from the Pop.Dispose method in that the Pop.Dispose method is used to abruptly close the connection and release all resources associated with the Pop component,
				while Pop.Logout closes the connection gracefully and does not release any resources associated with the Pop component.</p>
			</remarks><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad POP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception><exception cref="T:System.IO.IOException">The filename, directory name, or volume label syntax is incorrect.</exception><exception cref="T:System.ArgumentException">A required argument contains invalid characters, is empty, or contains only white spaces.</exception>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates retrieving a single POP message.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' This example demonstrates getting a single message. To do
' this, you must login and keep the connection. Set AutoLogout
' to false to disable auto logout.
Pop1.AutoLogout = False

' Do not automatically get any part of the message.
Pop1.AutoGet = MessageSection.None

' Login
Pop1.Login("mail.test.com", "testuser", "testpass")

' Check to see if any messages were retrieved.
If Pop1.Messages.Length &gt; 0 Then

   ' Get the first message.
   Pop1.Messages(0).Get()

   ' Display data about this message.
   Debug.WriteLine("From: " + Pop1.Messages(0).Message.From.Address)
   Debug.WriteLine("Subject: " + Pop1.Messages(0).Message.Subject)
End If

' Logout has to be explicitly done since AutoLogout = false
Pop1.Logout()
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// This example demonstrates getting a single message. To do
// this, you must login and keep the connection. Set AutoLogout
// to false to disable auto logout.
pop1.AutoLogout = false;

// Do not automatically get any part of the message.
pop1.AutoGet = MessageSection.None;

// Login
pop1.Login("mail.test.com", "testuser", "testpass");

// Check to see if any messages were retrieved.
if(pop1.Messages.Length &gt; 0)
{
   // Get the first message.
   pop1.Messages[0].Get();

   // Display data about this message.
   Debug.WriteLine("From: " + pop1.Messages[0].Message.From.Address);
   Debug.WriteLine("Subject: " + pop1.Messages[0].Message.Subject);
}

// Logout has to be explicitly done since AutoLogout = false
pop1.Logout();
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Pop.BeginLogout(System.Object)">
            <summary>
            Asynchronously ceases all activity and gracefully closes the connection.
            </summary><remarks>
				<p>This method begins to close the connection to a POP server. Upon completion the Pop.EndLogout event will be raised. A PopEventArgs object will be passed into this event, containing data about the connection close operation. 
				If any messages were marked for deletion, these deletes will occur after calling this method.
				If you are using the Pop component as a reference, you must "wire up" the event yourself. This involves creating a method that acts as the event handler that implements the PopEventHandler delegate. See Using Events When Using A Component As A Reference for more information.
				</p>
				<p>Use this method if you wish to close a connection with minimal application impact, as execution occurs on another thread.</p>
				<p>The object <i>state</i> is useful for any kind of state information that you would like accessible in the Pop.EndLogout event. Since the method is "disconnected" from the calling code and returns to the calling thread elsewhere, you may wish to pass an object/variable as <i>state</i> to be retrieved and used in the event handler.</p>
				<p>To send an email message synchronously, use Pop.Logout.</p>
			</remarks><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad POP protocol response received from server.</exception><exception cref="T:System.InvalidOperationException">Pop.BeginClose used without providing an EndSend event handler.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception><exception cref="T:System.IO.IOException">The filename, directory name, or volume label syntax is incorrect.</exception><exception cref="T:System.ArgumentException">A required argument contains invalid characters, is empty, or contains only white spaces.</exception><returns>An IAsyncResult that represents the asynchronous operation, which could still be pending.</returns>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Pop.Login(System.String,System.String,System.String)">
            <summary>
				Synchronously log in to a POP server and initialize the PopMessage array.
            </summary><param name="server">The POP server to log in to.</param><param name="username">Username used to log in to the POP server.</param><param name="password">Password used to log in to the POP server.</param><remarks>
				<p>This method represents the quickest and easiest means of logging in to a POP server. Upon logging
				in, the Pop.Message property will be populated with the new messages available on the POP server.
				The Pop component can be configured to populate the Pop.Message property with message data in one of three ways upon login:
				<ul>
					<li>If Pop.AutoGet = MessageSection.None the Pop.Messages collection will be populated with MessageStream objects containing the
					minimal data returned from the server about the message (id, unique id, and size of the message).</li>
					<li>If Pop.AutoGet = MessageSection.Complete then the Pop.Messages collection will be populated with MessageStream objects containing the full message.</li>
					<li>If Pop.AutoGet = MessageSection.Header then the Pop.Messages collection will be populated with MessageStream objects containing
					only the header.</li>
				</ul>
				The Pop component will remain logged in until the Pop.Logout method is called. This method will attemp to automatically
				log in to port 110, the well-known port for POP. If you need to login to a port that is NOT port 110, use the
				Pop.Login(String,Int32,String,Int32,String,String) method.</p>
				<p>To log in to the POP server asynchronously, use Pop.BeginLogin.</p>
			</remarks><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad POP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception><exception cref="T:System.IO.IOException">The filename, directory name, or volume label syntax is incorrect.</exception><exception cref="T:System.ArgumentException">A required argument contains invalid characters, is empty, or contains only white spaces.</exception>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates logging into a POP server and retrieving all messages.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Automatically remove files after getting them from the server
Pop1.AutoDelete = True

' Login. The default settings will cause the Pop component to
' automatically retrieve all messages, delete them from the
' server, and logout.
Pop1.Login("mail.test.com", "testuser", "testpass")

' All message retrieved. Iterate through the collection
' and display data.
Dim msg As PopMessage
For Each msg In Pop1.Messages
   Debug.WriteLine("Message ID: " + msg.Id)
   Debug.WriteLine("Message UID: " + msg.Uid)
   Debug.WriteLine("Messge Size: " + msg.Size)
   Debug.WriteLine("From: " + msg.Message.From.Address)
   Debug.WriteLine("Subject: " + msg.Message.Subject)
Next
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Automatically remove files after getting them from the server
pop1.AutoDelete = true;

// Login. The default settings will cause the Pop component to
// automatically retrieve all messages, delete them from the
// server, and logout.
pop1.Login("mail.test.com", "testuser", "testpass");

// All message retrieved. Iterate through the collection
// and display data.
foreach(PopMessage msg in pop1.Messages)
{
   Debug.WriteLine("Message ID: " + msg.Id);
   Debug.WriteLine("Message UID: " + msg.Uid);
   Debug.WriteLine("Messge Size: " + msg.Size);
   Debug.WriteLine("From: " + msg.Message.From.Address);
   Debug.WriteLine("Subject: " + msg.Message.Subject);
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Pop.Login(System.String,System.Int32,System.String,System.Int32,System.String,System.String)">
            <summary>
				Synchronously log in to a POP server (while explicitly specifying a local interface to use) and initialize the PopMessage array.
            </summary><param name="server">The POP server to log in to.</param><param name="serverPort">The port to attempt to log in to.</param><param name="client">The client hostname or address when a specific interface binding is desired</param><param name="clientPort">The client port when a specific local port is desired</param><param name="username">Username used to log in to the POP server.</param><param name="password">Password used to log in to the POP server.</param><remarks>
				<p>This method represents logging into a POP server using advanced options. Upon logging
				in, the Pop.PopMessage property will be populated with the new messages available on the POP server.
				The Pop component can be configured to populate the Pop.Message property with message data in one of three ways upon login:
				<ul>
					<li>If Pop.AutoGet = MessageSection.None the Pop.Messages collection will be populated with MessageStream objects containing the
					minimal data returned from the server about the message (id, unique id, and size of the message).</li>
					<li>If Pop.AutoGet = MessageSection.Complete then the Pop.Messages collection will be populated with MessageStream objects containing the full message.</li>
					<li>If Pop.AutoGet = MessageSection.Header then the Pop.Messages collection will be populated with MessageStream objects containing
					only the header.</li>
				</ul>
				The Pop component will remain logged in until the Pop.Logout method is called.</p>
				<p>To log in to the POP server asynchronously, use Pop.BeginLogin.</p>
			</remarks><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad POP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception><exception cref="T:System.IO.IOException">The filename, directory name, or volume label syntax is incorrect.</exception><exception cref="T:System.ArgumentException">A required argument contains invalid characters, is empty, or contains only white spaces.</exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Pop.BeginLogin(System.String,System.String,System.String,System.Object)">
            <summary>	
				Asynchronously log in to a POP server and initialize the PopMessage array
			</summary><param name="server">The POP server to log in to.</param><param name="username">Username used to log in to the POP server.</param><param name="password">Password used to log in to the POP server.</param><param name="state">User state information.</param><remarks>
				<p>This method begins to asynchronously log in to a POP server. Upon completion the Pop.EndLogin event will be raised. An PopEventArgs object will be passed into this event, containing data about the success/failure of the log in.</p>
				<p>If you wish to automatically retrieve all messages available in the mail drop, set Pop.AutoGet to MessageHeader.Full prior to logging in. If you would just like to automatically
				retrieve the header, set Pop.AutoGet to MessageSection.Header.</p>
				<p>Use this method when you want to asynchronously log in to a POP server using standard options.</p>
				<p>If you are using the Pop component as a reference, you must "wire up" the event yourself. This involves creating a method that acts as the event handler that implements the PopEventHandler delegate. See Using Events When Using A Component As A Reference for more information.</p>
				<p>The object <i>state</i> is useful for any kind of state information that you would like accessible in the Pop.EndLogin event. Since the method is "disconnected" from the calling code and returns to the main thread elsewhere, you may wish to pass an object/variable as <i>state</i> to be retrieved and used in the event handler.</p>
				<p>To log in synchronously, use Pop.Login</p>
			</remarks><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad POP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception><exception cref="T:System.IO.IOException">The filename, directory name, or volume label syntax is incorrect.</exception><exception cref="T:System.ArgumentException">A required argument contains invalid characters, is empty, or contains only white spaces.</exception><returns>An IAsyncResult that represents the asynchronous operation, which could still be pending.</returns>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Pop.BeginLogin(System.String,System.Int32,System.String,System.Int32,System.String,System.String,System.Object)">
            <summary>	
				Asynchronously log in to a POP server (while explicitly specifying a local interface to use) and initialize the PopMessage array.
			</summary><param name="server">The POP server to log in to.</param><param name="serverPort">The port to attempt to log in to.</param><param name="client">The client hostname or address when a specific interface binding is desired</param><param name="clientPort">The client port when a specific local port is desired</param><param name="username">Username used to log in to the POP server.</param><param name="password">Password used to log in to the POP server.</param><param name="state">User state information.</param><remarks>
				<p>This method begins to asynchronously log in to a POP server. Upon completion the Pop.EndLogin event will be raised. An PopEventArgs object will be passed into this event, containing data about the success/failure of the log in.</p>
				<p>Upon logging
				in, the Pop.Message property will be populated with the new messages available on the POP server.
				The Pop component can be configured to populate the Pop.Message property with message data in one of three ways upon login:
				<ul>
					<li>If Pop.AutoGet = MessageSection.None the Pop.Messages collection will be populated with MessageStream objects containing the
					minimal data returned from the server about the message (id, unique id, and size of the message).</li>
					<li>If Pop.AutoGet = MessageSection.Complete then the Pop.Messages collection will be populated with MessageStream objects containing the full message.</li>
					<li>If Pop.AutoGet = MessageSection.Header then the Pop.Messages collection will be populated with MessageStream objects containing
					only the header.</li>
				</ul></p>
				<p>Use this method when you want to asynchronously log in to a POP server using advanced options. The advanced options
				include the specification of a non-standard port (via the <i>serverPort</i> parameter) and the specification
				of a local interface to use (via the <i>client</i> and <i>clientPort</i> parameters).</p>
				<p>If you are using the Pop component as a reference, you must "wire up" the event yourself. This involves creating a method that acts as the event handler that implements the PopEventHandler delegate. See Using Events When Using A Component As A Reference for more information.</p>
				<p>The object <i>state</i> is useful for any kind of state information that you would like accessible in the Pop.EndLogin event. Since the method is "disconnected" from the calling code and returns to the main thread elsewhere, you may wish to pass an object/variable as <i>state</i> to be retrieved and used in the event handler.</p>
				<p>To log in synchronously, use Pop.Login</p>
			</remarks><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad POP protocol response received from server.</exception><exception cref="T:System.InvalidOperationException"> Pop.BeginLogin used without providing an Pop.EndLogin event handler.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception><exception cref="T:System.IO.IOException">The filename, directory name, or volume label syntax is incorrect.</exception><exception cref="T:System.ArgumentException">A required argument contains invalid characters, is empty, or contains only white spaces.</exception><returns>An IAsyncResult that represents the asynchronous operation, which could still be pending.</returns>
        </member>
        <member name="E:Dart.PowerTCP.Mail.Pop.ConnectedChanged">
            <summary>
            Raised when the value of the Object.Connected property changes.
            </summary><remarks>
				<p>This event is raised when the value of the Object.Connected property changes. The value of the Object.Connected property changes whenever a TCP connection to a resource
				is either made or closed.</p>
				<p>This event is useful in several scenarios, for example:</p>
				<ul>
					<li>Displaying the user when a connection has been terminated.</li>
					<li>Notifying the application if a connection has been terminated.</li>
				</ul>
				<p>If you are using the PowerTCP component as a reference, you must create a method to handle the event yourself. For more information on using events using PowerTCP.NET within the Visual Studio.NET environment, see Using Events In PowerTCP.</p>
			</remarks>
        </member>
        <member name="E:Dart.PowerTCP.Mail.Pop.ConnectedChangedEx">
            <summary>
            Raised when the value of the Object.Connected property changes. Supercedes the ConnectedChanged event.
            </summary><remarks>
				<p>This event is raised when the value of the Object.Connected property changes. The value of the Object.Connected property changes whenever a TCP connection to a resource
				is either made or closed.</p>
				<p>This event is useful in several scenarios, for example:</p>
				<ul>
					<li>Displaying the user when a connection has been terminated.</li>
					<li>Notifying the application if a connection has been terminated.</li>
				</ul>
				<p>If you are using the PowerTCP component as a reference, you must create a method to handle the event yourself. For more information on using events using PowerTCP.NET within the Visual Studio.NET environment, see Using Events In PowerTCP.</p>
			</remarks>
        </member>
        <member name="E:Dart.PowerTCP.Mail.Pop.Trace">
            <summary>
            Raised when data has been sent/received.
            </summary><remarks>
				<p>This event is raised when commands or data has been sent/received. If you are using a component which uses TCP as the
				transport protocol a SegmentEventArgs object is passed into the event containing any commands or data sent or received.
				If you are using a component which uses UDP as the transport protocol a DatagramEventArgs object is passed into the event containing any commands
				or data sent or received.</p>
				<p>The Object.RawTrace event always reports actual data sent/received over the socket. The Count
				of each segment reflects the number of bytes actually written and received.
				The Object.Trace event reports data sent/received at a higher level. For example, for the
				Telnet component, Object.Trace reports data sent/received, but does not report
				IAC option sequences that are processed by TelnetStream, whereas Object.RawTrace
				allows you to trace the actual data sent/received, including Telnet option
				commands.
				</p>
				<p>If you are using the PowerTCP component as a reference, you must create a method to handle the event yourself. For more information on using events using PowerTCP.NET within the Visual Studio.NET environment, see Using Events In PowerTCP.</p>
			</remarks>
        </member>
        <member name="E:Dart.PowerTCP.Mail.Pop.BusyChanged">
            <summary>
			Raised when the value of the Object.Busy property changes.
			</summary><remarks>
				<p>This event is fired when the value of the Object.Busy property changes. The Object.Busy property changes
			when a method is executing that is occupying the TCP connection.
			</p>
				<p>This event is useful in several scenarios, for example:</p>
				<ul>
					<li>Displaying to the user when the PowerTCP component is busy.</li>
					<li>Taking action within your application when the PowerTCP component is no longer busy.</li>
				</ul>
				<p>If you are using the PowerTCP component as a reference, you must create a method to handle the event yourself.
			For more information on using events using PowerTCP.NET within the Visual Studio.NET environment, see Using Events In PowerTCP.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the BusyChanged event to see if the socket is busy.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

Private Sub BusyTest()
   ' Do something to cause the Busy event to be raised
   Pop1.Login("mail.test.com", "me", "mypass")
End Sub

Private Sub Pop1_BusyChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles Pop1.BusyChanged
   If Pop1.Busy Then
      Label1.Text = "Socket is busy"
   Else
      Label1.Text = "Socket is not busy"
   End If
End Sub
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

private void BusyTest()
{
   // Do something to cause the Busy event to be raised
   pop1.Login("mail.test.com", "me", "mypass");
}

private void pop1_BusyChanged(object sender, System.EventArgs e)
{
   // Check the Busy property.
   if(pop1.Busy)
      label1.Text = "Socket is busy";
   else
      label1.Text = "Socket is not busy";
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="E:Dart.PowerTCP.Mail.Pop.Progress">
            <summary>
            Raised repeatedly while an email message is retrieved.
            </summary><remarks>
				<p>When a message is retrieved from the server, the Pop.Progress event will be raised in the 
				frequency specified by Pop.Connection.ReceiveBufferSize. This event will contain data useful
				for displaying progress to the user. For example, if you wish to display progress for the retrieval
				of ALL messages, use 0 for minimum, pop1.Messages.Length for maximum, and PopMessage.Id as value.
				If you wish to display progress for each message, use 0 for minimum, PopProgressEventArgs.Length for maximum,
				and PopProgressEventArgs.Position for the value.</p>
				<p>For more information on using events using PowerTCP within the Visual Studio .NET environment, see Using Events Within The Visual Studio.NET Environment.</p>
				<p>If you are using the Pop component as a reference, you must create a method to handle the event yourself. To learn how to do this, see Using Events When A Component Is Used As A Reference.</p>
			</remarks>
        </member>
        <member name="E:Dart.PowerTCP.Mail.Pop.EndGet">
            <summary>
            Raised when the PopMessage.BeginGet request completes.
            </summary><remarks>
				<p>This event is raised when the asynchronous method call PopMessage.BeginGet completes. A PopEventArgs object will be passed into the event, containing data about the retrieved message.
				For example, the PopMessage object itself is accessible by PopEventArgs.PopMessage. If an exception occurred during the asynchronous operation, it would also be returned in the PopEventArgs object in the
				PopEventArgs.Exception property. Be sure to check this property before accessing the PopMessage.</p>
				<p>For more information on using events using PowerTCP.NET within the Visual Studio.NET environment, see Using Events Within The Visual Studio.NET Environment.</p>
				<p>If you are using the Pop component as a reference, you must create a method to handle the event yourself. To learn how to do this, see Using Events When The A Component Is Used As A Reference.
				</p>
				<p>This event MUST be implemented if you are using the Pop.BeginGet method. See Using EndXXX Events for more information.</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Pop.Busy">
            <summary>
				Returns true if a method is currently in use. 
			</summary><remarks>
				<p>When used in PowerTCP Zip Compression for .NET, this property provides protection against accessing a method that is still processing a command.</p>
				<p>When used in an Internet communications component, this property provides protection against sending commands over a busy socket. For example, if the PowerTCP component is engaged in sending or receiving data, and another method is called that
				requires use of the same socket, a BusyException is thrown.</p>
				<p>The Object.BusyChanged event is raised whenever the value of this property changes.</p>
				<p>For Internet communications components, check this property within your code if you feel a new operation could be 
				attempted over a socket that is already engaged in sending or receiving data. This property is also 
				useful for displaying socket status to the user. For example, a "stoplight" could 
				be part of the user interface that would be red when the Object.Busy property is true, and 
				green when false.</p>
			</remarks><value>
				true if a method is currently is use, otherwise false
			</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the BusyChanged event to see if the socket is busy.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

Private Sub BusyTest()
   ' Do something to cause the Busy event to be raised
   Pop1.Login("mail.test.com", "me", "mypass")
End Sub

Private Sub Pop1_BusyChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles Pop1.BusyChanged
   If Pop1.Busy Then
      Label1.Text = "Socket is busy"
   Else
      Label1.Text = "Socket is not busy"
   End If
End Sub
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

private void BusyTest()
{
   // Do something to cause the Busy event to be raised
   pop1.Login("mail.test.com", "me", "mypass");
}

private void pop1_BusyChanged(object sender, System.EventArgs e)
{
   // Check the Busy property.
   if(pop1.Busy)
      label1.Text = "Socket is busy";
   else
      label1.Text = "Socket is not busy";
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Pop.Connected">
            <summary>
				Gets the connected state of the connection.
			</summary><remarks>
				<p>If the PowerTCP component is connected to a remote resource AND authenticated, this property returns true. If this property is false, the connection was either never connected, is no longer connected, or is connected but not yet authenticated.
				When receiving data from the server, this property is a good way to tell if all data has been received. Keep receiving data in a loop until this property equals false.
				</p>
				<p>When using PowerTCP components which make use of the Tcp component as the underlying connection, this 
				property returns the same value as the Object.Connection.Connected property (where Object.Connection exposes the Tcp object used for the connection).</p>
				<p>The Object.ConnectedChanged and Object.ConnectedChangedEx events are raised whenever this property changes.</p>
			</remarks><value>
				true if the TCP connection is connected to a remote resource and authenticated; otherwise, false.
			</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates a logout procedure for the Pop component.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

Private Sub PopLogout()
   ' Check to see if currently connected before logging out.
   If Pop1.Connected Then
      ' Attempt to log out gracefully.
      Try
         Pop1.Logout()
      Catch ex As Exception
         ' Logout failed. Just abruptly close.
         Pop1.Dispose()
      End Try
    End If
End Sub
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Check to see if currently connected before logging out.
if(pop1.Connected)
{
   // Attempt to log out gracefully.
   try
   {
      pop1.Logout();
   }
   catch(Exception ex)
   {
      // Logout failed. Just abruptly close.
      pop1.Dispose();
   }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Pop.Connection">
            <summary>
				Gets the Tcp component instance used for the connection.
			</summary><remarks>
				<p>Many PowerTCP components use the Tcp component for the connection. This property exposes that object, allowing such actions as sending server requests directly over the TCP connection or getting information about the socket (such as local/remote IP addresses).
				If you need to communicate with a proxy server, set the properties of Object.Connection.Proxy to enable proxy communication.
				In addition, Object.Connection.Send can be used to send any command to the server.</p>
				<p>Use the Object.Connection property to directly access the TCP connection. This could be useful if:</p>
				<ul>
					<li>You need to use the Tcp.Proxy object to communicate with proxy servers.</li>
					<li>You wish to display information about the socket endpoints to the user (local/remote IP addresses, for example).</li>
					<li>You want to use the Tcp object used by the PowerTCP component as an initializer for the TraceForm.</li>
					<li>You wish to capture trace information by using the Tcp.Trace event.</li>
					<li>You wish to close the connection.</li>
				</ul>
			</remarks><value>
				The Tcp instance that the PowerTCP component uses for the connection. 
			</value>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Pop.Editor">
            <summary>
				In Visual Studio.NET, displays an interactive form to use to test real time protocol operations.
			</summary><value>
				An EditorForm to use in VS.NET to test protocol operations. 
			</value><remarks>
				<p>This property can only be used by clicking this property in the Properties Window in Visual Studio.NET. This will open an application which can be used to test protocol operation. The EditorForm will not be available if the PowerTCP component is being used as a reference.</p>
				<p>The Object.Editor property can ONLY be used at design time in the Visual Studio.NET environment.</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Pop.Messages">
            <summary>	
				An array of PopMessage objects used to manipulate messages.
			</summary><remarks>
				<p>Messages existing on the POP server are managed through use of the Pop.Messages array. This
				array can be populated several different ways depending on your needs. The Pop.AutoGet property
				controls how to get messages. For example, the Pop.AutoGet property defaults to MessageSection.Complete,
				meaning that the Pop component will automatically get all messages once logged in. If you simply want
				the header but not the complete messages, set the Pop.AutoGet property to MessageSection.Header. To disable
				automatic message retrieval (meaning you are going to explicitly "get" a message using the PopMessage.Get method)
				set Pop.AutoGet to MessageSection.None.</p>
			<p>The PopMessage array will only be populated when the POP server is in the
			"transaction" state, which occurs after authentication and before logging out. All other times
			the size of this array will be 0. This collection is 0-based, although POP servers will 
			assign an ID that is 1-based. This means that after login, the POP message with ID "1" can
			be found at Pop.Messages[0], ID "2" at Pop.Messages[1], etc.</p>
			</remarks><value>
				An array of PopMessage objects, representing the messages on the server.
			</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates logging into a POP server and retrieving all messages.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Automatically remove files after getting them from the server
Pop1.AutoDelete = True

' Login. The default settings will cause the Pop component to
' automatically retrieve all messages, delete them from the
' server, and logout.
Pop1.Login("mail.test.com", "testuser", "testpass")

' All message retrieved. Iterate through the collection
' and display data.
Dim msg As PopMessage
For Each msg In Pop1.Messages
   Debug.WriteLine("Message ID: " + msg.Id)
   Debug.WriteLine("Message UID: " + msg.Uid)
   Debug.WriteLine("Messge Size: " + msg.Size)
   Debug.WriteLine("From: " + msg.Message.From.Address)
   Debug.WriteLine("Subject: " + msg.Message.Subject)
Next
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Automatically remove files after getting them from the server
pop1.AutoDelete = true;

// Login. The default settings will cause the Pop component to
// automatically retrieve all messages, delete them from the
// server, and logout.
pop1.Login("mail.test.com", "testuser", "testpass");

// All message retrieved. Iterate through the collection
// and display data.
foreach(PopMessage msg in pop1.Messages)
{
   Debug.WriteLine("Message ID: " + msg.Id);
   Debug.WriteLine("Message UID: " + msg.Uid);
   Debug.WriteLine("Messge Size: " + msg.Size);
   Debug.WriteLine("From: " + msg.Message.From.Address);
   Debug.WriteLine("Subject: " + msg.Message.Subject);
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Pop.Size">
            <summary>
				Returns the number of bytes contained in all messages present.
			</summary><remarks>
			<p>This property returns the size (in bytes) of all messages present on the 
			POP server. When not logged in, this property will be 0.</p>
			<p><b>Note:</b> The number of bytes reported by Pop.Size will be less than the actual
			size of the messages, as some characters
			are not reported by the POP server.</p>
			</remarks><value>
				A long representing the number of bytes of all messages in the mail drop.
			</value>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Pop.SynchronizingObject">
            <summary>Set this object to automatically control thread marshalling between worker threads and the main UI thread.</summary><value>
				If used, the main UI thread object; null if unused.
			</value><remarks>
				<p>Any application that (1) uses multithreading (for example, an application which uses an asynchronous BeginXXX method)
				and (2) must update a shared UI element on the main UI thread (such as a ListView object) from one of these worker threads must set this
				property to the value of the main UI thread object. If the application meets both of these requirements and
				this property is NOT set, you may see strange behavior in your application (such as strange exceptions or improper UI element values).</p>
				<p>If you do not know whether or not you need to use this property, simply take the failsafe
				approach when programming Windows applications and always set this property to the Main Form object.
				If any thread marshalling has to occur between a worker thread and the UI thread, it will occur automatically.</p>
				<p>Provides data for the CollectionChanged event.


					<b>NOTE for server implementations:</b> If you are using a PowerTCP server component to build a server application, you
				do not want to set this property (as it will cause the server application to become single-threaded). Instead, you want to use
				the Control.BeginInvoke method to thread-marshall to the main UI thread (see any of the installed sample server applications for an example of this).</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Pop.AutoLogout">
            <summary>
				Controls automatic log out after all communication with the POP server
				is complete.
			</summary><remarks>
				<p>After log in, the Pop.Messages property will be populated with PopMessage objects created 
				for each messages in the mail drop. If Pop.AutoLogout is true, the session will then be closed.
				If Pop.AutoLogout is false, the session will remain open, enabling further communication with
				the server. In this case, the Pop.Logout method should be used when communication is complete, explicitly ending
				the session.</p>
				<p>Usually communication with POP servers is simple, and do not require prolonged sessions with multiple
				requests.
				However, if this is not the case, set this property to false and the POP session will remain open after 
				all messages are retrieved, allowing further commands to be sent.</p>
			</remarks><value>
				true if the Pop control should automatically logout after the Pop.Messages property
				is populated; false otherwise. The default value is true.
			</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates retrieving a single POP message.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' This example demonstrates getting a single message. To do
' this, you must login and keep the connection. Set AutoLogout
' to false to disable auto logout.
Pop1.AutoLogout = False

' Do not automatically get any part of the message.
Pop1.AutoGet = MessageSection.None

' Login
Pop1.Login("mail.test.com", "testuser", "testpass")

' Check to see if any messages were retrieved.
If Pop1.Messages.Length &gt; 0 Then

   ' Get the first message.
   Pop1.Messages(0).Get()

   ' Display data about this message.
   Debug.WriteLine("From: " + Pop1.Messages(0).Message.From.Address)
   Debug.WriteLine("Subject: " + Pop1.Messages(0).Message.Subject)
End If

' Logout has to be explicitly done since AutoLogout = false
Pop1.Logout()
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// This example demonstrates getting a single message. To do
// this, you must login and keep the connection. Set AutoLogout
// to false to disable auto logout.
pop1.AutoLogout = false;

// Do not automatically get any part of the message.
pop1.AutoGet = MessageSection.None;

// Login
pop1.Login("mail.test.com", "testuser", "testpass");

// Check to see if any messages were retrieved.
if(pop1.Messages.Length &gt; 0)
{
   // Get the first message.
   pop1.Messages[0].Get();

   // Display data about this message.
   Debug.WriteLine("From: " + pop1.Messages[0].Message.From.Address);
   Debug.WriteLine("Subject: " + pop1.Messages[0].Message.Subject);
}

// Logout has to be explicitly done since AutoLogout = false
pop1.Logout();
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Pop.AutoDelete">
            <summary>
				Controls the setting of the message "delete flag" when downloading messages. 
			</summary><remarks>
				<p>Each PopMessage object has a PopMessage.Delete property which, when set, will mark the message for
				deletion. Setting the Pop.AutoDelete property to true means that all messages, once downloaded, will be
				automatically marked for deletion. The Pop.AutoDelete property
				is false by default, meaning that you must explicitly set the PopMessage.Delete property if you wish for
				all downloaded messages to be deleted. If you would like to have more fine-tuned control over which messages are deleted, set the 
				Pop.AutoLogout property to false, and simply set the PopMessage.Delete property to true for each message you would like deleted.</p>
				<p><b>Note:</b> Since all messages marked for deletion are deleted just prior to logout, depending on the
				amount of messages that are marked, there may be a slight delay before the Pop.Logout method returns.</p>
			</remarks><value>
				true if messages should be automatically marked for deletion after they are downloaded; false otherwise. The default value is false.
			</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates logging into a POP server and retrieving all messages.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Automatically remove files after getting them from the server
Pop1.AutoDelete = True

' Login. The default settings will cause the Pop component to
' automatically retrieve all messages, delete them from the
' server, and logout.
Pop1.Login("mail.test.com", "testuser", "testpass")

' All message retrieved. Iterate through the collection
' and display data.
Dim msg As PopMessage
For Each msg In Pop1.Messages
   Debug.WriteLine("Message ID: " + msg.Id)
   Debug.WriteLine("Message UID: " + msg.Uid)
   Debug.WriteLine("Messge Size: " + msg.Size)
   Debug.WriteLine("From: " + msg.Message.From.Address)
   Debug.WriteLine("Subject: " + msg.Message.Subject)
Next
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Automatically remove files after getting them from the server
pop1.AutoDelete = true;

// Login. The default settings will cause the Pop component to
// automatically retrieve all messages, delete them from the
// server, and logout.
pop1.Login("mail.test.com", "testuser", "testpass");

// All message retrieved. Iterate through the collection
// and display data.
foreach(PopMessage msg in pop1.Messages)
{
   Debug.WriteLine("Message ID: " + msg.Id);
   Debug.WriteLine("Message UID: " + msg.Uid);
   Debug.WriteLine("Messge Size: " + msg.Size);
   Debug.WriteLine("From: " + msg.Message.From.Address);
   Debug.WriteLine("Subject: " + msg.Message.Subject);
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Pop.AutoGet">
            <summary>
				Set this property to control automatic message retrieval.
			</summary><remarks>
				<p>Messages existing on the POP server are managed through use of the Pop.Messages array. This
				array can be populated several different ways depending on your needs. The Pop.AutoGet property
				controls how to get messages. For example, the Pop.AutoGet property defaults to MessageSection.Complete,
				meaning that the Pop component will automatically get all messages once logged in. If you simply want
				the header but not the complete messages, set the Pop.AutoGet property to MessageSection.Header. To disable
				automatic message retrieval (meaning you are going to explicitly "get" a message using the PopMessage.Get method)
				set Pop.AutoGet to MessageSection.None.</p>
			</remarks><value>
				A MessageSection value.
			</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates retrieving a single POP message.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' This example demonstrates getting a single message. To do
' this, you must login and keep the connection. Set AutoLogout
' to false to disable auto logout.
Pop1.AutoLogout = False

' Do not automatically get any part of the message.
Pop1.AutoGet = MessageSection.None

' Login
Pop1.Login("mail.test.com", "testuser", "testpass")

' Check to see if any messages were retrieved.
If Pop1.Messages.Length &gt; 0 Then

   ' Get the first message.
   Pop1.Messages(0).Get()

   ' Display data about this message.
   Debug.WriteLine("From: " + Pop1.Messages(0).Message.From.Address)
   Debug.WriteLine("Subject: " + Pop1.Messages(0).Message.Subject)
End If

' Logout has to be explicitly done since AutoLogout = false
Pop1.Logout()
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// This example demonstrates getting a single message. To do
// this, you must login and keep the connection. Set AutoLogout
// to false to disable auto logout.
pop1.AutoLogout = false;

// Do not automatically get any part of the message.
pop1.AutoGet = MessageSection.None;

// Login
pop1.Login("mail.test.com", "testuser", "testpass");

// Check to see if any messages were retrieved.
if(pop1.Messages.Length &gt; 0)
{
   // Get the first message.
   pop1.Messages[0].Get();

   // Display data about this message.
   Debug.WriteLine("From: " + pop1.Messages[0].Message.From.Address);
   Debug.WriteLine("Subject: " + pop1.Messages[0].Message.Subject);
}

// Logout has to be explicitly done since AutoLogout = false
pop1.Logout();
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Pop.AutoSize">
            <summary>
				When true, PopMessage.Size is initialized during login.
			</summary><remarks>
				<p>When true, this property will cause the server to report the size of all messages contained in the
				mail drop (access <a href="Dart.PowerTCP.Mail.PopMessage.Size.html">Pop.Messages[n].Size</a> for the size of each individual message).</p>
			</remarks><value>
				true if the size of the message should be retrieved during login, false otherwise. The default value is true.
			</value>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Pop.AutoUid">
            <summary>
				When true, the unique ID for each message is retrieved during login.
			</summary><remarks>
				<p>When true, the Pop component will issue a "UIDL" command to the POP server,
				requesting a unique ID for each message. The unique IDs returned by the server are accessible via the
				PopMessage.Uid property.</p>
			</remarks><value>
				true if the unique ID for each message should be retrieved during login, false otherwise. The default value is true.
			</value>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Pop.UseMemoryStreams">
            <summary>
				Controls whether attachments are decoded and stored as FileStreams or as MemoryStreams when a message is retrieved.
			</summary><remarks>
				<p>
					When this property is true, all attachments of messages retrieved will automatically be decoded and
					saved as files in the system temp directory. This property is useful because it may be desirable to keep attachments in 
					memory instead of writing them to the file system. A good example of this is in the case of web applications.
				</p>
				<p>When this property is set to true, make sure that enough memory is available to hold all messages being downloaded.</p>
			</remarks><value>
				true if attachments should be decoded and stored as MemoryStreams when a message is retrieved; false if they should be decoded and stored as files.
			</value>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Pop.DoEvents">
            <summary>
				  Gets or sets a value that controls the processing of events during blocking method calls.
			</summary><remarks>
				<p>When performing a synchronous (blocking) method, PowerTCP will process user-interface events (such as window painting)
            if this property is set to true AND the current thread has an event message queue.
            If no message queue is present (such as on an ASP page or under any worker thread), the value of this property has no effect.
            This property is used only for synchronous methods. Object.DoEvents is not needed if using asynchronous methods because the asynchronous method will execute on a different thread, allowing the UI thread to continue working unblocked.</p>
				<p>For example, this property is beneficial when an interactive application is being used and the user may want to abort a currently processing operation by clicking an "Abort" button.
			If Object.DoEvents is set to false, this will not be possible.
			Set the Object.DoEvents property to true and the application will respond to other events (such as button clicks) during synchronous operations.
			</p>
			</remarks><value>
				true if user-interface events should be processed during synchronous method calls; otherwise, false. The default value is true.
			</value>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Pop.Timeout">
            <summary>
				Specifies the maximum number of milliseconds to wait for responses to commands or time between data buffer transfers.
			</summary><remarks>
				<p>After connecting to a server, this value is used to establish the period of time to wait for
			server responses. During data transfer operations, a <a href="ms-help://MS.MSDNVS/cpref/html/frlrfSystemNetSocketsSocketExceptionClassTopic.htm">SocketException</a> will
			be thrown if any data buffer transfer
			operation does not complete within the timeout period.</p>
			</remarks><value>
				 An integer specifying the maximum number of milliseconds to wait for responses to commands.
			</value>
        </member>
        <member name="E:Dart.PowerTCP.Mail.Pop.EndLogout">
            <summary>
            Raised when the Pop.BeginLogout request completes.
            </summary><remarks>
				<p>This event is raised when the asynchronous method call Pop.BeginLogout completes. An EventArgs object will be passed into the event.</p>
				<p>For more information on using events using PowerTCP.NET within the Visual Studio.NET environment, see Using Events Within The Visual Studio.NET Environment.</p>
				<p>If you are using the Pop component as a reference, you must create a method to handle the event yourself. To learn how to do this, see Using Events When The A Component Is Used As A Reference.
				</p>
				<p>This event MUST be implemented if you are using the Pop.BeginLogout method. See Using EndXXX Events for more information.</p>
			</remarks>
        </member>
        <member name="E:Dart.PowerTCP.Mail.Pop.EndLogin">
            <summary>
            Raised when the Pop.BeginLogin request completes.
            </summary><remarks>
				<p>This event is raised when the asynchronous method call Pop.BeginLogin completes. An EventArgs object will be passed into the event.</p>
				<p>For more information on using events using PowerTCP.NET within the Visual Studio.NET environment, see Using Events Within The Visual Studio.NET Environment.</p>
				<p>If you are using the Pop component as a reference, you must create a method to handle the event yourself. To learn how to do this, see Using Events When The A Component Is Used As A Reference.
				</p>
				<p>This event MUST be implemented if you are using the Pop.BeginLogin method. See Using EndXXX Events for more information.</p>
			</remarks>
        </member>
        <member name="T:PopEditor">
            <summary>
            Summary description for Test.
            </summary>
        </member>
        <member name="T:PopEditorForm">
            <summary>
            Summary description for PopEditorForm.
            </summary>
        </member>
        <member name="F:PopEditorForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:PopEditorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:PopEditorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:PopLicenseProvider">
            <summary>
            Summary description for FtpLicenseProvider.
            </summary>
        </member>
        <member name="T:Dart.PowerTCP.Mail.PopMessage">
            <summary>
				Represents a message on a POP server.
			</summary><remarks>
				<p>
				A PopMessage object represents a message on a POP server.
				Messages existing on the POP server are managed through use of the Pop.Messages array, a collection
				of PopMessage objects. This
				array can be populated several different ways depending on your needs. The Pop.AutoGet property
				controls how to get messages. For example, the Pop.AutoGet property defaults to MessageSection.Complete,
				meaning that the Pop component will automatically get all messages once logged in. If you simply want
				the header but not the complete messages, set the Pop.AutoGet property to MessageSection.Header. To disable
				automatic message retrieval (meaning you are going to explicitly "get" a message using the PopMessage.Get method)
				set Pop.AutoGet to MessageSection.None.</p>
				<p>Once you get a message, access the PopMessage.Message property for the MessageStream object encapsulating
				the message.</p>
				<p>PopMessage objects can only be created internally by the Pop component. A PopMessage object cannot be explicitly created by the user.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates logging into a POP server and retrieving all messages.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Automatically remove files after getting them from the server
Pop1.AutoDelete = True

' Login. The default settings will cause the Pop component to
' automatically retrieve all messages, delete them from the
' server, and logout.
Pop1.Login("mail.test.com", "testuser", "testpass")

' All message retrieved. Iterate through the collection
' and display data.
Dim msg As PopMessage
For Each msg In Pop1.Messages
   Debug.WriteLine("Message ID: " + msg.Id)
   Debug.WriteLine("Message UID: " + msg.Uid)
   Debug.WriteLine("Messge Size: " + msg.Size)
   Debug.WriteLine("From: " + msg.Message.From.Address)
   Debug.WriteLine("Subject: " + msg.Message.Subject)
Next
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Automatically remove files after getting them from the server
pop1.AutoDelete = true;

// Login. The default settings will cause the Pop component to
// automatically retrieve all messages, delete them from the
// server, and logout.
pop1.Login("mail.test.com", "testuser", "testpass");

// All message retrieved. Iterate through the collection
// and display data.
foreach(PopMessage msg in pop1.Messages)
{
   Debug.WriteLine("Message ID: " + msg.Id);
   Debug.WriteLine("Message UID: " + msg.Uid);
   Debug.WriteLine("Messge Size: " + msg.Size);
   Debug.WriteLine("From: " + msg.Message.From.Address);
   Debug.WriteLine("Subject: " + msg.Message.Subject);
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.PopMessage.Get(System.IO.Stream)">
            <summary>
				Get a single message from the server, specifying the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> object to use for encapuslating the message.
			</summary><remarks>
				<p>This method gets a single message from the server, specifying the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> to use. The behavior
				of this method depends on the type of <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> passed in. The following list describes how this
				method can be used:
				<ul>
					<li>If <i>message</i> is a FileStream, the encoded message will be dumped to disk.</li>
					<li>If <i>message</i> is a MemoryStream, the encoded message will be in memory by accessing the PopMessage.Message property.</li>
					<li>If <i>message</i> is a MessageStream, the decoded message will be in memory by accessing the PopMessage.Message property.</li>
				</ul>
				</p>
				<p>To perform this operation asynchronously, use the PopMessage.BeginGet method.</p>
			</remarks><returns>
				A PopMessage object, representing the message retrieved.
			</returns><param name="message">The <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> to use for encapsulating the message.</param>
        </member>
        <member name="M:Dart.PowerTCP.Mail.PopMessage.Get(System.IO.Stream,System.Int32)">
            <summary>
				Get a specified amount of lines of a single message from the server, specifying the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> object to use for encapuslating the message.
			</summary><remarks>
				<p>This method gets the amount of lines of a message specifies by <i>lines</i>, specifying the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> to use. The behavior
				of this method depends on the type of <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> passed in. The following list describes how this
				method can be used:
				<ul>
					<li>If <i>message</i> is a FileStream, the encoded message will be dumped to disk.</li>
					<li>If <i>message</i> is a MemoryStream, the encoded message will be in memory by accessing the PopMessage.Message property.</li>
					<li>If <i>message</i> is a MessageStream, the decoded message will be in memory by accessing the PopMessage.Message property.</li>
				</ul>
				</p>
				<p>If you use this method to retrieve a partial message, PopMessage.Complete will be false because the entire message is not retrieved.</p>		
				<p>To perform this operation asynchronously, use the PopMessage.BeginGet method.</p>
			</remarks><returns>
				A PopMessage object, representing the message retrieved.
			</returns><param name="lines">The amount of lines of the message to get.</param><param name="message">The <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> to use for encapsulating the message.</param>
        </member>
        <member name="M:Dart.PowerTCP.Mail.PopMessage.BeginGet(System.IO.Stream,System.Object)">
            <summary>
				Asynchronously get a single message from the server, specifying the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> object to use for encapuslating the message.
			</summary><remarks>
				<p>This method begins to get a single message from the server, specifying the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> to use. 
				Upon completion, the Pop.EndGet event will be raised. A PopEventArgs object will be passed into the Pop.EndGet event,
				providing data about the message retrieved.
				The behavior of this method depends on the type of <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> passed in. The following list describes how this
				method can be used:
				<ul>
					<li>If <i>message</i> is a FileStream, the encoded message will be dumped to disk.</li>
					<li>If <i>message</i> is a MemoryStream, the encoded message will be in memory by accessing the e.PopMessage.Message property.</li>
					<li>If <i>message</i> is a MessageStream, the decoded message will be in memory by accessing the e.PopMessage.Message property.</li>
				</ul>
				</p>
				<p>To perform this operation synchronously, use the PopMessage.Get method.</p>
			</remarks><param name="message">The <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> to use for encapsulating the message.</param><param name="state">User state information.</param><returns>An IAsyncResult that represents the asynchronous operation, which could still be pending.</returns>
        </member>
        <member name="M:Dart.PowerTCP.Mail.PopMessage.BeginGet(System.IO.Stream,System.Int32,System.Object)">
            <summary>
				Asynchronously get a specified amount of lines of a single message from the server, specifying the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> object to use for encapuslating the message.
			</summary><remarks>
				<p>This method begins to get the amount of lines specifies by <i>lines</i> from a single message on the server, specifying the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> to use. 
				Upon completion, the Pop.EndGet event will be raised. A PopEventArgs object will be passed into the Pop.EndGet event,
				providing data about the message retrieved.
				The behavior of this method depends on the type of <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> passed in. The following list describes how this
				method can be used:
				<ul>
					<li>If <i>message</i> is a FileStream, the encoded message will be dumped to disk.</li>
					<li>If <i>message</i> is a MemoryStream, the encoded message will be in memory by accessing the e.PopMessage.Message property.</li>
					<li>If <i>message</i> is a MessageStream, the decoded message will be in memory by accessing the e.PopMessage.Message property.</li>
				</ul>
				</p>
				<p>To perform this operation synchronously, use the PopMessage.Get method.</p>
			</remarks><param name="lines">The amount of lines of the message to get.</param><param name="message">The <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> to use for encapsulating the message.</param><param name="state">User state information.</param><returns>An IAsyncResult that represents the asynchronous operation, which could still be pending.</returns>
        </member>
        <member name="M:Dart.PowerTCP.Mail.PopMessage.Get">
            <summary>
				Get a single message from the server. The message will be encapsulated by a MessageStream.
			</summary><remarks>
				<p>This method gets a single message from the server. Upon successful completion,
				the PopMessage.Message property will contain a MessageStream object representing the
				message. The MessageStream object provides flexibility and functionality in accessing the message.
				For example, message header lines, message text, and message attachments are all available as
				collections of the MessageStream object. The MessageStream object also provides decoding
				of MIME parts "on the fly".</p>
				<p>This overload of PopMessage.Get is the suggested way to get a single message.</p>
				<p>To perform this operation asynchronously, use the PopMessage.BeginGet method.</p>
			</remarks><returns>
				A PopMessage object, representing the message retrieved.
			</returns>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates retrieving a single POP message.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' This example demonstrates getting a single message. To do
' this, you must login and keep the connection. Set AutoLogout
' to false to disable auto logout.
Pop1.AutoLogout = False

' Do not automatically get any part of the message.
Pop1.AutoGet = MessageSection.None

' Login
Pop1.Login("mail.test.com", "testuser", "testpass")

' Check to see if any messages were retrieved.
If Pop1.Messages.Length &gt; 0 Then

   ' Get the first message.
   Pop1.Messages(0).Get()

   ' Display data about this message.
   Debug.WriteLine("From: " + Pop1.Messages(0).Message.From.Address)
   Debug.WriteLine("Subject: " + Pop1.Messages(0).Message.Subject)
End If

' Logout has to be explicitly done since AutoLogout = false
Pop1.Logout()
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// This example demonstrates getting a single message. To do
// this, you must login and keep the connection. Set AutoLogout
// to false to disable auto logout.
pop1.AutoLogout = false;

// Do not automatically get any part of the message.
pop1.AutoGet = MessageSection.None;

// Login
pop1.Login("mail.test.com", "testuser", "testpass");

// Check to see if any messages were retrieved.
if(pop1.Messages.Length &gt; 0)
{
   // Get the first message.
   pop1.Messages[0].Get();

   // Display data about this message.
   Debug.WriteLine("From: " + pop1.Messages[0].Message.From.Address);
   Debug.WriteLine("Subject: " + pop1.Messages[0].Message.Subject);
}

// Logout has to be explicitly done since AutoLogout = false
pop1.Logout();
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.PopMessage.Get(System.Int32)">
            <summary>
				Get a specified amount of lines of a single message from the server. The message will be encapsulated by a MessageStream.
			</summary><remarks>
				<p>This method gets the amount of lines of a message specifies by <i>lines</i>. Upon successful completion,
				the PopMessage.Message property will contain a MessageStream object representing the
				lines retrieved from the message. The MessageStream object provides flexibility and functionality in accessing the message.
				For example, message header lines, message text, and message attachments are all available as
				collections of the MessageStream object. The MessageStream object also provides decoding
				of MIME parts "on the fly".</p>
				<p>To perform this operation asynchronously, use the PopMessage.BeginGet method.</p>
			</remarks><returns>
				A PopMessage object, representing the message retrieved.
			</returns><param name="lines">The amount of lines of the message to get.</param>
        </member>
        <member name="M:Dart.PowerTCP.Mail.PopMessage.BeginGet(System.Object)">
            <summary>
				Asynchronously get a single message from the server. The message will be encapsulated by a MessageStream, made accessible in the Pop.EndGet event.
			</summary><remarks>
				<p>This method begins to asynchronously get a message from the server. Upon completion of the method,
				the Pop.EndGet event will be raised. A PopEventArgs object will be passed into the Pop.EndGet event,
				providing data about the message retrieved. For example, the message itself is accessible in PopEventArgs.PopMessage.Message, which
				will be a MessageStream object. The MessageStream object provides flexibility and functionality in accessing the message.
				For example, message header lines, message text, and message attachments are all available as
				collections of the MessageStream object. The MessageStream object also provides decoding
				of MIME parts "on the fly".</p>				
				<p>For more information about using events, see Using Events In PowerTCP.</p>
				<p>The parameter <i>state</i> is useful for any kind of data you would like accessible in the Pop.EndGet event.</p>
				<p>To perform this operation synchronously, use the PopMessage.Get method.</p>
			</remarks><param name="state">User state information.</param><returns>An IAsyncResult that represents the asynchronous operation, which could still be pending.</returns>
        </member>
        <member name="M:Dart.PowerTCP.Mail.PopMessage.BeginGet(System.Int32,System.Object)">
            <summary>
				Asynchronously get a specified amount of lines of a single message from the server. The message will be encapsulated by a MessageStream, made accessible in the Pop.EndGet event.
			</summary><remarks>
				<p>This method begins to asynchronously get the amount of lines (specified by <i>lines</i>) from a message from the server. Upon completion of the method,
				the Pop.EndGet event will be raised. A PopEventArgs object will be passed into the Pop.EndGet event,
				providing data about the message retrieved. For example, the message itself is accessible in PopEventArgs.PopMessage.Message, which
				will be a MessageStream object. The MessageStream object provides flexibility and functionality in accessing the message.
				For example, message header lines, message text, and message attachments are all available as
				collections of the MessageStream object. The MessageStream object also provides decoding
				of MIME parts "on the fly".</p>
				<p>If you use this method to retrieve a partial message, PopMessage.Complete will be false because the entire message is not retrieved.</p>		
				<p>For more information about using events, see Using Events In PowerTCP.</p>
				<p>The parameter <i>state</i> is useful for any kind of data you would like accessible in the Pop.EndGet event.</p>
				<p>To perform this operation synchronously, use the PopMessage.Get method.</p>
			</remarks><param name="lines">The amount of lines of the message to get.</param><param name="state">User state information.</param><returns>An IAsyncResult that represents the asynchronous operation, which could still be pending.</returns>
        </member>
        <member name="P:Dart.PowerTCP.Mail.PopMessage.UseMemoryStreams">
            <summary>
				Controls whether attachments are decoded and stored as FileStreams or as MemoryStreams when a message is retrieved.
			</summary><remarks>
				<p>
					When this property is true, all attachments of messages retrieved will automatically be decoded and
					saved as files in the system temp directory. This property is useful because it may be desirable to keep attachments in 
					memory instead of writing them to the file system. A good example of this is in the case of web applications.
				</p>
				<p>When this property is set to true, make sure that enough memory is available to hold all messages being downloaded.</p>
			</remarks><value>
				true if attachments should be decoded and stored as MemoryStreams when a message is retrieved; false if they should be decoded and stored as files.
			</value>
        </member>
        <member name="P:Dart.PowerTCP.Mail.PopMessage.Connected">
            <summary>
				Gets the connected state of the connection.
			</summary><remarks>
				<p>If the PowerTCP component is connected to a remote resource AND authenticated, this property returns true. If this property is false, the connection was either never connected, is no longer connected, or is connected but not yet authenticated.
				When receiving data from the server, this property is a good way to tell if all data has been received. Keep receiving data in a loop until this property equals false.
				</p>
				<p>When using PowerTCP components which make use of the Tcp component as the underlying connection, this 
				property returns the same value as the Object.Connection.Connected property (where Object.Connection exposes the Tcp object used for the connection).</p>
				<p>The Object.ConnectedChanged and Object.ConnectedChangedEx events are raised whenever this property changes.</p>
			</remarks><value>
				true if the TCP connection is connected to a remote resource and authenticated; otherwise, false.
			</value>
        </member>
        <member name="T:PowerTcp">
            <summary>
            Summary
            </summary>
        </member>
        <member name="M:PowerTcp.#ctor">
            <summary>
            Summary
            </summary>
        </member>
        <member name="M:PowerTcp.GetString(System.String)">
            <summary>
            Summary
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:PowerTcp.ValidateEnum(System.String,System.Enum)">
            <summary>
            ValidateEnum should be called by every property of type System.Enum that is set, or where val is a parameter
            </summary>
            <param name="name">Specify Property or Method Parameter name</param>
            <param name="val"></param>
        </member>
        <member name="T:Dart.PowerTCP.Mail.ProgressEventHandler">
            <summary>
				Represents the method (event handler) that is raised when progress information is available.
			</summary><param name="sender">The source of the event.</param><param name="e">An EventArgs object that contains the event data.</param><remarks>
				<p>As Microsoft describes in their MSDN documentation, the event model in the .NET Framework is based on having an event delegate that connects an event with its handler. To raise an event, two elements are needed: 
				<ul type="disc">
						<li>A class that holds the event data. This class must derive from the base class <a href="ms-help://MS.MSDNVS/cpref/html/frlrfsystemeventargsclasstopic.htm">EventArgs</a>.</li>
						<li>A delegate that points to a method that provides the response to the event.</li>
					</ul>
				</p>
				<p>For more information about event handler delegates, see the Using Events In PowerTCP topic.</p>
			</remarks>
        </member>
        <member name="T:Dart.PowerTCP.Mail.ProgressEventArgs">
            <summary>
				This class is passed into the Progress event and provides data for this event. 
			</summary><remarks>
				When data is sent or received, the Progress event is raised in the frequency specified by Tcp.ReceiveBufferSize. This event will contain the ProgressEventArgs class, providing data useful for displaying progress to the user.
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.ProgressEventArgs.#ctor(System.Int64,System.Int64)">
            <summary>
            Initialize a default instance of ProgressEventArgs
            </summary>
            <param name="position">The position within the data.</param>
            <param name="length">The length of the data.</param>
        </member>
        <member name="P:Dart.PowerTCP.Mail.ProgressEventArgs.Position">
            <summary>
				The position within the stream.
			</summary><remarks>
				<p>This value represents the position within the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> of the message
				being retrieved at the time the Object.Progress event was raised. This is 
				useful for displaying progress as Object.Position
				divided by Object.Length gives the percentage complete.</p>
				<p>Object.Position will equal Object.Length
				when all data has been transferred.</p>
			</remarks><value>
				A long representing the current position within the stream.
			</value>
        </member>
        <member name="P:Dart.PowerTCP.Mail.ProgressEventArgs.Length">
            <summary>
				The length of the stream.
			</summary><remarks>
				<p>This value represents the number in bytes of the length of the <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> of the message
				being retrieved at the time the Object.Progress event was raised. This is 
				useful for displaying progress as Object.Position
				divided by Object.Length gives the percentage complete.</p>
				<p>Object.Position will equal Object.Length
				when all data has been transferred.</p>
			</remarks><value>
				A long representing the number in bytes of the length of the stream.
			</value>
        </member>
        <member name="T:Dart.PowerTCP.Mail.SegmentedStream">
            <summary>
            Used to provide advanced reading/writing capabilites to Stream-based objects.
            </summary>
            <remarks>
            <p> SegmentedStream provides a way to read/write a segment of bytes to/from a backing store.  
            To improve performance, 
            SegmentedStream buffers reads and writes to the underlying stream and
            provides asynchronous read and write capability.</p>
            <p>The SegmentedStream object is used within PowerTCP to read/write network data. The following examples
            further illustrate how SegmentedStream is used:
            <ul>
            <li>When using the Tcp or Telnet components, the TCP stream is exposed through the Object.Stream property (which is a SegmentedStream
            object). To write or read directly to the TCP stream, call Object.Stream.Read or Object.Stream.Write.</li>
            <li>The SegmentedStream object is also used to access the TCP stream when using other Internet components as well. For example,
            when using the Ftp component, Ftp.Get or Ftp.Put can be called, making accessible a SegmentedStream object. SegmentedStream.Read
            and SegmentedStream.Write can then be called to read and write directly to the data connection.</li>
            </ul>
            </p>
            </remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates connecting implementing the SMTP protocol using the Tcp component's stream interface to send a simple message.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' The following code assumes that good responses are always received from
' the server. More robust code should check each response and handle appropriately.

' Connect to SMTP port
Tcp1.Connect("mail", 25)

' Send the EHLO command
Tcp1.Stream.Write("EHLO myserver\r\n")

' Get response from the server
Dim s As String = Tcp1.Stream.Read()

' Send MAIL FROM command
Tcp1.Stream.Write("MAIL FROM: test@dart.com" + vbCrLf)

' Get response from the server
s = Tcp1.Stream.Read()

' Send RCPT TO command
Tcp1.Stream.Write("RCPT TO: cranford@dart.com" + vbCrLf)

' Get response from the server
s = Tcp1.Stream.Read()

' Send DATA command
Tcp1.Stream.Write("DATA" + vbCrLf)

' Get response from the server
s = Tcp1.Stream.Read()

' Send DATA
Tcp1.Stream.Write("Test Message" + vbCrLf + "." + vbCrLf)

' Receive response from the server
s = Tcp1.Stream.Read()

' Write output
Debug.WriteLine("Operation complete. The following information")
Debug.WriteLine("was reported by the server:")
Debug.WriteLine(s)
<span class="lang">[C#]</span> 
// The following code assumes that good responses are always received from
// the server. More robust code should check each response and handle appropriately.

// Connect to SMTP port
tcp1.Connect("mail", 25);

// Send the EHLO command
tcp1.Stream.Write("EHLO myserver\r\n");

// Get response from the server
string s = tcp1.Stream.Read();

// Send MAIL FROM command
tcp1.Stream.Write("MAIL FROM: test@dart.com\r\n");

// Get response from the server
s = tcp1.Stream.Read();

// Send RCPT TO command
tcp1.Stream.Write("RCPT TO: cranford@dart.com\r\n");

// Get response from the server
s = tcp1.Stream.Read();

// Send DATA command
tcp1.Stream.Write("DATA\r\n");

// Get response from the server
s = tcp1.Stream.Read();

// Send DATA
tcp1.Stream.Write("Test Message\r\n.\r\n");

// Receive response from the server
s = tcp1.Stream.Read();

// Write output
Debug.WriteLine("Operation complete. The following information");
Debug.WriteLine("was reported by the server:");
Debug.WriteLine(s);
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.SegmentedStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the SegmentedStream class for the specified stream object.
            </summary>
            <param name="stream">The source stream to Read/Write.</param>
            <remarks>
            <p>Although any type of stream can be used to initialize a SegmentedStream (a FileStream or a MemoryStream, for
            example) the intented use is to initialize a SegmentedStream with some form of network stream (such as a TcpStream). You
            will not usually need to create a SegmentedStream object, as the SegmentedStream object currently accessing the TCP stream
            is made accessible (either as a property of the component, or as an object accessible in an event or returned from a method).
            For example, if you wish to send/receive data to/from a server using a stream interface, simply use Tcp.Connect to connect to the server and 
            call Tcp.Stream.Write or Tcp.Stream.Read to send/receive data.
            </p>
            </remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates initializing a new instance of a SegmentedStream object to a TcpStream.
				</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Connect to a server
Tcp1.Connect("atropos", 7)

' Initialize a SegmentedStream to the NetworkStream
Dim sstream As New SegmentedStream(new TcpStream(Tcp1))

' Send data
sstream.Write("hello")

' Receive data
Dim s As String = sstream.Read()
<span class="lang">[C#]</span> 
// Connect to a server
tcp1.Connect("atropos", 7);

// Initialize a SegmentedStream to the NetworkStream
SegmentedStream sstream = new SegmentedStream(new TcpStream(tcp1));

// Send data
sstream.Write("hello");

// Receive data
string s = sstream.Read();
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ and JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.SegmentedStream.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the SegmentedStream class for the specified stream object.
            </summary>
            <param name="stream">The source stream to Read/Write.</param>
            <param name="encoding">The encoding type to use when working with strings.</param>
            <remarks>
            <p>Although any type of stream can be used to initialize a SegmentedStream (a FileStream or a MemoryStream, for
            example) the intented use is to initialize a SegmentedStream with some form of network stream (such as a TcpStream). You
            will not usually need to create a SegmentedStream object, as the SegmentedStream object currently accessing the TCP stream
            is made accessible (either as a property of the component, or as an object accessible in an event or returned from a method).
            For example, if you wish to send/receive data to/from a server using a stream interface, simply use Tcp.Connect to connect to the server and 
            call Tcp.Stream.Write or Tcp.Stream.Read to send/receive data.
            </p>
            </remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates initializing a new instance of a SegmentedStream object to a TcpStream.
				</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Connect to a server
Tcp1.Connect("atropos", 7)

' Initialize a SegmentedStream to the NetworkStream
Dim sstream As New SegmentedStream(new TcpStream(Tcp1))

' Send data
sstream.Write("hello")

' Receive data
Dim s As String = sstream.Read()
<span class="lang">[C#]</span> 
// Connect to a server
tcp1.Connect("atropos", 7);

// Initialize a SegmentedStream to the NetworkStream
SegmentedStream sstream = new SegmentedStream(new TcpStream(tcp1));

// Send data
sstream.Write("hello");

// Receive data
string s = sstream.Read();
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ and JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.SegmentedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asychronous read from the stream that complete when at least one byte is read.
            This operation reads at most count bytes.
            </summary>
            <remarks>
            This is the standard method to use when reading a stream asynchronously. If a fixed-length record buffer is
            being read, use the overloaded Read() method that includes the 'bool fill' parameter. 
            If a variable-length record segment 
            is being read, use the overloaded Read() method that includes the 'byte[] delimiter' parameter.
            </remarks>
            <param name="buffer">The storage location for the received data.</param>
            <param name="offset">The zero-based position in the buffer at which to store the received data.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <param name="callback">The AsyncCallback delegate to be called when the operation is complete.</param>
            <param name="state">An object containing state information for this operation.</param>
            <returns>An IAsyncResult representing the asynchronous operation. 
            To determine how many bytes were read, you must pass this IAsyncResult to the EndRead method 
            of the stream. This should be done within your AsyncCallback event handler.</returns>
            <exception cref="T:System.IO.IOException">Thrown when the stream is not Readable.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the buffer or callback is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is less than zero or when count is less than or equal to zero.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the (offset + count) &gt; buffer.Length.</exception>
            <example>
				<p><span class="lang">[C#]</span> The following example demonstrates asynchronously reading from the server using the stream interface. This involves creating a callback method
				in which the response is handled. If you would like to use fully asynchronous methods with events already implemented, try the low-level interface (Tcp.BeginRead &amp; Tcp.BeginWrite).</p>
				<pre class="code">
<span class="lang">[C#]</span> 
private void AsynchronousReadTest()
{
   // Connect to the server
   tcp1.Connect("atropos", 13);

   // DAYTIME protocol (port 13) sends data and closes, receive data.
   // This demonstrates receiving data asynchronously using the stream interface.
			
   // data buffer is a global variable
   databuffer = new byte[tcp1.ReceiveBufferSize];

   // Begin the asynchronous Read operation.
   tcp1.Stream.BeginRead(databuffer, 0, tcp1.ReceiveBufferSize, new System.AsyncCallback(MyCallback), null);
}

private void MyCallback(System.IAsyncResult ar)
{
   // End pending asynchronous request.
   if(ar.IsCompleted)
      tcp1.Stream.EndRead(ar);

   // Write result
   Debug.WriteLine(System.Text.Encoding.Default.GetString(databuffer));
}
</pre>
				<p><span class="lang">[Visual Basic, C++, JScript]</span> No example is available for Visual Basic, C++ or JScript. To view a C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.SegmentedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asychronous read from the stream that completes
            when the provided buffer is completely full, the number of bytes requested is read, or end of
            stream is reached.
            </summary>
            <remarks>
            The purpose of this method is to provide a convenient way to read a fixed-length
            record from the stream. The EndRead method should be called when your AsyncCallback
            delegate is raised.
            </remarks>
            <param name="buffer">The storage location for the received data.</param>
            <param name="offset">The zero-based position in the buffer at which to store the received data.</param>
            <param name="count">The exact number of bytes to read.</param>
            <param name="fill">Always true, use this version of BeginRead to completely fill the buffer</param>
            <param name="callback">The AsyncCallback delegate to be called when the operation is complete.</param>
            <param name="state">An object containing state information for this operation.</param>
            <returns>An IAsyncResult representing the asynchronous operation. 
            To determine how many bytes were read, you must pass this IAsyncResult to the EndRead method 
            of the stream. This should be done within your AsyncCallback event handler.</returns>
            <exception cref="T:System.IO.IOException">Thrown when the stream is not Readable.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the buffer or callback is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is less than zero or when count is less than or equal to zero.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the (offset + count) &gt; (buffer.Length).</exception>
            <example>
				<p><span class="lang">[C#]</span> The following example demonstrates asynchronously reading from the server using the stream interface. This involves creating a callback method
				in which the response is handled. If you would like to use fully asynchronous methods with events already implemented, try the low-level interface (Tcp.BeginRead &amp; Tcp.BeginWrite).</p>
				<pre class="code">
<span class="lang">[C#]</span> 
private void AsynchronousReadTest()
{
   // Connect to the server
   tcp1.Connect("atropos", 13);

   // DAYTIME protocol (port 13) sends data and closes, receive data.
   // This demonstrates receiving data asynchronously using the stream interface.
			
   // data buffer is a global variable
   databuffer = new byte[tcp1.ReceiveBufferSize];

   // Begin the asynchronous Read operation.
   tcp1.Stream.BeginRead(databuffer, 0, tcp1.ReceiveBufferSize, new System.AsyncCallback(MyCallback), null);
}

private void MyCallback(System.IAsyncResult ar)
{
   // End pending asynchronous request.
   if(ar.IsCompleted)
      tcp1.Stream.EndRead(ar);

   // Write result
   Debug.WriteLine(System.Text.Encoding.Default.GetString(databuffer));
}
</pre>
				<p><span class="lang">[Visual Basic, C++, JScript]</span> No example is available for Visual Basic, C++ or JScript. To view a C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.SegmentedStream.BeginRead(System.Byte[],System.Byte[],System.Int32,System.Int32,System.Boolean@,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asychronous read from the stream that completes
            when the provided delimiter is found, count bytes have been read,
            or end of stream is reached.
            </summary>
            <remarks>
            The purpose of this method is to provide a convenient way to read a variable-length
            record from the stream. The EndRead method should be called when your AsyncCallback
            delegate is raised.
            </remarks>
            <param name="buffer">The storage location for the received data.</param>
            <param name="delimiter">The token that is used to determine a segment was read.</param>
            <param name="offset">The zero-based position in the buffer at which to store the received data.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <param name="callback">The AsyncCallback delegate to be called when the operation is complete.</param>
            <param name="state">An object containing state information for this operation.</param>
            <param name="found"></param>
            <returns>An IAsyncResult representing the asynchronous operation. 
            To determine how many bytes were read, you must pass this IAsyncResult to the EndRead method 
            of the stream. This should be done within your AsyncCallback event handler.</returns>
            <exception cref="T:System.IO.IOException">Thrown when the stream is not Readable.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the buffer, delimiter or callback is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is less than zero or when count is less than or equal to zero.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the (offset + count) &gt; buffer.Length, or delimiter.Length == 0, or delimiter.length &gt; count.</exception>
            <example>
				<p><span class="lang">[C#]</span> The following example demonstrates asynchronously reading from the server using the stream interface. This involves creating a callback method
				in which the response is handled. If you would like to use fully asynchronous methods with events already implemented, try the low-level interface (Tcp.BeginRead &amp; Tcp.BeginWrite).</p>
				<pre class="code">
<span class="lang">[C#]</span> 
private void AsynchronousReadTest()
{
   // Connect to the server
   tcp1.Connect("atropos", 13);

   // DAYTIME protocol (port 13) sends data and closes, receive data.
   // This demonstrates receiving data asynchronously using the stream interface.
			
   // data buffer is a global variable
   databuffer = new byte[tcp1.ReceiveBufferSize];

   // Begin the asynchronous Read operation.
   tcp1.Stream.BeginRead(databuffer, 0, tcp1.ReceiveBufferSize, new System.AsyncCallback(MyCallback), null);
}

private void MyCallback(System.IAsyncResult ar)
{
   // End pending asynchronous request.
   if(ar.IsCompleted)
      tcp1.Stream.EndRead(ar);

   // Write result
   Debug.WriteLine(System.Text.Encoding.Default.GetString(databuffer));
}
</pre>
				<p><span class="lang">[Visual Basic, C++, JScript]</span> No example is available for Visual Basic, C++ or JScript. To view a C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.SegmentedStream.Close">
            <summary>
            Closes the current stream and releases any resources 
            (such as sockets and file handles) associated with the current stream.
            </summary>
            <remarks>
            <p>This method closes the SegmentedStream and frees resources associated with the SegmentedStream.</p>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">A member was accessed while the stream was closed.</exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.SegmentedStream.EndRead(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous SegmentedStream.BeginRead request.
            </summary>
            <remarks>
            You will normally call this method from within your AsyncCallback event handler to complete your
            asynchronous read request, but it can be called anytime to cancel an outstanding request.
            </remarks>
            <param name="ar">
            Reference to the pending asynchronous request that is returned from BeginRead().
            </param>
            <returns>The number of bytes read from the stream and copied into the user's buffer.
            Will return 0 at the end of the stream to indicate the stream has closed and all data
            has been read.</returns>
            <exception cref="T:System.IO.IOException">Thrown when the stream is not Readable.</exception>
            <exception cref="T:System.ArgumentNullException">asyncResult is a null reference.</exception>
            <exception cref="T:System.ArgumentException">asyncResult is not a valid reference.</exception>
            <exception cref="T:System.IO.EndOfStreamException">
            The end of the stream was found before the required byte count was received,
            or the end of the stream was found before the delimiter was found.
            </exception>
            <exception cref="T:System.IO.InternalBufferOverflowException">
            The delimiter was not found within the maximum number of bytes (count) specified.
            </exception>
            <example>
				<p><span class="lang">[C#]</span> The following example demonstrates asynchronously reading from the server using the stream interface. This involves creating a callback method
				in which the response is handled. If you would like to use fully asynchronous methods with events already implemented, try the low-level interface (Tcp.BeginRead &amp; Tcp.BeginWrite).</p>
				<pre class="code">
<span class="lang">[C#]</span> 
private void AsynchronousReadTest()
{
   // Connect to the server
   tcp1.Connect("atropos", 13);

   // DAYTIME protocol (port 13) sends data and closes, receive data.
   // This demonstrates receiving data asynchronously using the stream interface.
			
   // data buffer is a global variable
   databuffer = new byte[tcp1.ReceiveBufferSize];

   // Begin the asynchronous Read operation.
   tcp1.Stream.BeginRead(databuffer, 0, tcp1.ReceiveBufferSize, new System.AsyncCallback(MyCallback), null);
}

private void MyCallback(System.IAsyncResult ar)
{
   // End pending asynchronous request.
   if(ar.IsCompleted)
      tcp1.Stream.EndRead(ar);

   // Write result
   Debug.WriteLine(System.Text.Encoding.Default.GetString(databuffer));
}
</pre>
				<p><span class="lang">[Visual Basic, C++, JScript]</span> No example is available for Visual Basic, C++ or JScript. To view a C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.SegmentedStream.Flush">
            <summary>
            Updates the underlying data source or repository with the 
            current state of the buffer and then clears the buffer unless the internal Stream requires flushing..
            </summary>
            <remarks>
            All the read and write methods of SegmentedStream automatically maintain the buffer, so there is no need to invoke Flush when switching back and forth between reading and writing.
            </remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates writing data until a delimiter is reached.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Create test data
Dim buffer As Byte() = System.Text.Encoding.Default.GetBytes("acbdefghijklmnopqrstuvwxyz" + vbCrLf)
Dim delimiter As Byte() = System.Text.Encoding.Default.GetBytes("ghi")

Dim offset As Integer = 0
Dim count As Integer = buffer.Length

' Connect to echo port
Tcp1.Connect("atropos", 7)

' Send data until the delimiter is reached.
Dim found As Boolean = Tcp1.Stream.Write(buffer, delimiter, offset, count)

' Flush the rest of the data
Tcp1.Stream.Flush()

' Recieve data.
Dim s As String = Tcp1.Stream.Read()

Debug.WriteLine(s)

'* Output
'* -----------------------
'* abcdef
<span class="lang">[C#]</span> 
// Create test data
byte[] buffer = System.Text.Encoding.Default.GetBytes("acbdefghijklmnopqrstuvwxyz\r\n");
byte[] delimiter = System.Text.Encoding.Default.GetBytes("ghi");
int offset = 0;
int count = buffer.Length;

// Connect to echo port
tcp1.Connect("atropos", 7);
			
// Send data until the delimiter is reached.
bool found = tcp1.Stream.Write(buffer, delimiter, ref offset, ref count);

// Flush the rest of the data
tcp1.Stream.Flush();

// Recieve data.
string s = tcp1.Stream.Read();

Debug.WriteLine(s);

/* Output
 * -----------------------
 * abcdef
 */
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.SegmentedStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read data from the stream into a byte array.
            </summary>
            <remarks>
            <p>
            This method will block (for ReceiveTimeout) until at least 1 byte is
            available for reading, or the connection is closed by the server, in which
            case an empty string is returned. The Charset property is used to convert from bytes to unicode characters, which allows unicode characters to be passed over the network.
            </p>
            <p>The value returned may be less than the 
            number of bytes requested if that many bytes are not currently available, or zero if 
            the end of the stream has been reached. Applications 
            must check this value to know how many bytes were read into the buffer.</p>
            </remarks>
            <param name="buffer">The storage location for the received data.</param>
            <param name="offset">The zero-based position in the buffer at which to store the received data.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <returns>The total number of bytes read into the buffer.</returns>
            <exception cref="T:System.IO.IOException">Thrown when the stream is not Readable.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the receiving buffer is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is less than zero or when count is less than or equal to zero.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the (offset + count) &gt; buffer.Length.</exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.SegmentedStream.Read(System.Int32)">
            <summary>
            Read data from the stream into a string.
            </summary>
            <param name="maxLength">The maximum length of the string returned.</param>
            <returns>A string value representing the data read from the stream.</returns>
            <exception cref="T:System.IO.IOException">Thrown when the stream is not Readable.</exception>
            <remarks><p>This method reads data from the stream until at least 1 byte has been read or the end of the stream
            has been reached.</p>
            </remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.SegmentedStream.Read">
            <summary>
            Read data from the stream into a string.
            </summary>
            <returns>A string containing the data read from the stream.</returns>
            <remarks>
            <p>
            This method will block (for ReceiveTimeout) until at least 1 byte is
            available for reading, or the connection is closed by the server, in which
            case an empty string is returned. The Charset property is used to convert from bytes to unicode characters, which allows unicode characters to be passed over the network.
            </p>
            </remarks>
            <exception cref="T:System.IO.IOException">Thrown when the stream is not Readable.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the receiving buffer is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is less than zero or when count is less than or equal to zero.</exception>
            <exception cref="T:System.ArgumentException">Thrown when (offset + count) &gt; buffer.Length.</exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.SegmentedStream.Read(System.String,System.Int32,System.Boolean@)">
            <summary>
            Read data from the stream until a delimiter is reached.
            </summary>
            <param name="delimiter">The sequence to find.</param>
            <param name="maxLength">The maximum length of the string returned.</param>
            <param name="found">Will be set to true if <i>sequence</i> is found; false otherwise.</param>
            <returns>A string representation of the bytes read.</returns>
            <remarks><p>This method reads data from the stream 
            until <i>delimiter</i> is found or the end of the stream is reached.</p>
            <p>This method is useful for reading until a sequence of characters is found. A good example of
            this is receiving an email message when using the POP protocol. When sending a POP mail message, a POP
            server will delimit the end of the message with &lt;CRLF&gt;.&lt;CRLF&gt;. Using this method you could simply read the data until
            this sequence is found, at which point the method would return.
            </p>
            <p>If the delimiter is found, <i>found</i> is true, otherwise <i>found</i> is false.</p>
            </remarks>
            <exception cref="T:System.IO.IOException">Thrown when the stream is not Readable.</exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.SegmentedStream.Read(System.String)">
            <summary>
            Reads stream, accumulating string data, until delimiter is reached or timeout is reached.
            </summary>
            <remarks>
            <p>This method is useful when implementing high-level protocols.</p>
            </remarks>
            <param name="delimiter">The sequence to find.</param>
            <returns>The accumulated string data read from the stream.</returns>
        </member>
        <member name="M:Dart.PowerTCP.Mail.SegmentedStream.Read(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Read data from the stream until a byte array is filled.
            </summary>
            <param name="buffer">The storage location for the received data.</param>
            <param name="offset">The zero-based position in the buffer at which to store the received data.</param>
            <param name="count">The exact number of bytes to read.</param>
            <param name="fill">Always true, use this version of Read to completely fill the buffer</param>
            <returns>The total number of bytes read into the buffer. This will either be the value
            of the count parameter, or zero if the stream has closed.</returns>
            <remarks><p>This method reads data from the stream and returns when the provided buffer is completely full or end 
            of stream is reached. This method is a good way to read fixed-length data. An example of this is with HTTP chunking,
            which occurs when the server breaks up the HTTP response into fixed-size chunks. Each chunk is preceded with a hexidecimal
            value notifying the receiver of the size of the data chunk to follow. Initialize a byte array to this 
            value, then call this method to fill the byte array.
            </p></remarks>
            <exception cref="T:System.IO.IOException">Thrown when the stream is not Readable.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the receiving buffer is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is less than zero or when count is less than or equal to zero.</exception>
            <exception cref="T:System.ArgumentException">Thrown when (offset + count) &gt; buffer.Length.</exception>
            <exception cref="T:System.IO.EndOfStreamException">
            Thrown when the end of the stream was found before the required byte count was received.
            When this occurs the Available property will indicate how much data may be read and the CanRead
            Property will return true.
            </exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.SegmentedStream.Read(System.Byte[],System.Boolean)">
            <summary>
            Read data from the stream until a byte array is filled.
            </summary>
            <param name="buffer">The storage location for the received data.</param>
            <param name="fill">Always true, use this version of Read to completely fill the buffer</param>
            <returns>The total number of bytes read into the buffer. This will either be the value
            of the count parameter, or zero if the stream has closed.</returns>
            <exception cref="T:System.IO.IOException">Thrown when the stream is not Readable.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the receiving buffer is null.</exception>
            <exception cref="T:System.IO.EndOfStreamException">
            Thrown when the end of the stream was found before the required byte count was received.
            When this occurs the Available property will indicate how much data may be read and the CanRead
            Property will return true.
            </exception>
            <remarks><p>This method reads data from the stream and returns when the provided buffer is completely full or end 
            of stream is reached. This method is a good way to read fixed-length data. An example of this is with HTTP chunking,
            which occurs when the server breaks up the HTTP response into fixed-size chunks. Each chunk is preceded with a hexidecimal
            value notifying the receiver of the size of the data chunk to follow. Initialize a byte array to this 
            value, then call this method to fill the byte array.
            </p></remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.SegmentedStream.Read(System.Byte[],System.Byte[],System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Read data from the stream.
            </summary>
            <remarks>
            <p>This method reads from the stream and returns when the provided <i>delimiter</i> is found, 
            <i>count</i> bytes have been read, or end of stream is reached.</p>
            <p>The purpose of this method is to provide a convenient way to read a variable-length
            record from the stream. This is the only kind of Read that uses internal buffering.</p>
            <p>If the delimiter is found, <i>found</i> is true, otherwise <i>found</i> is false.</p>
            </remarks>
            <param name="buffer">The storage location for the received data.</param>
            <param name="delimiter">The token that is used to determine a segment was read.</param>
            <param name="offset">The zero-based position in the buffer at which to store the received data.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <param name="found">True if <i>delimiter</i> is found; false otherwise.</param>
            <returns>The total number of bytes read into the buffer, which will normally be less than count.
            Returns 0 if end of stream is reached and there is no data left to return.</returns>
            <exception cref="T:System.IO.IOException">Thrown when the stream is not readable.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the receiving buffer is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is less than zero or when count is less than or equal to zero.</exception>
            <exception cref="T:System.ArgumentException">Thrown when (offset + count) &gt; buffer.Length.</exception>
            <exception cref="T:System.IO.EndOfStreamException">
            At least one byte was read without finding the delimiter before end of stream was reached.
            </exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.SegmentedStream.Write(System.Byte[],System.Byte[],System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write data to the stream while carrying out a bytewise find/replace.
            </summary>
            <param name="buffer">The storage location of the data.</param>
            <param name="originalSequence">The sequence to find.</param>
            <param name="replacementSequence">The sequence to replace.</param>
            <param name="offset">The zero-based position in the buffer from which to begin writing from.</param>
            <param name="count">The number of bytes from buffer that should be processed using the byte replacement desired.</param>
            <remarks><p>Carries out a bytewise find/replace of all occurances found in <i>buffer</i>
            of <i>originalSequence</i> with <i>replacementSequence</i>. This method is useful for performing
            simple encoding of data before sending.</p></remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.SegmentedStream.Write(System.Byte[],System.Byte[],System.Int32@,System.Int32@)">
            <summary>
            Write data to the stream until a delimiter is reached.
            </summary>
            <param name="buffer">The storage location of the data.</param>
            <param name="delimiter">The sequence to find.</param>
            <param name="offset">The zero-based position in the buffer from which to begin writing from.</param>
            <param name="count">The exact number of bytes to write.</param>
            <returns>true if <i>delimiter</i> is found; false otherwise.</returns>
            <remarks>
            <p>This method writes data until the delimiter is found (returning true and not writing the delimiter) or writes the entire buffer (returning false).</p>
            <p>Flush must be called after writing if this method is being used.</p>
            </remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.SegmentedStream.Read(System.Byte[],System.Byte[],System.Boolean@)">
            <summary>
            Read data from the stream until a delimiter is reached.
            </summary>
            <remarks>
            <p>This method reads from the stream and returns when the provided delimiter is found, 
            <i>buffer</i>.length bytes have been read, or end of stream is reached.</p>
            <p>The purpose of this method is to provide a convenient way to read a variable-length
            record from the stream. This is the only kind of Read that uses internal buffering.</p>
            </remarks>
            <param name="buffer">The storage location for the received data.</param>
            <param name="delimiter">The token that is used to determine a segment was read.</param>
            <param name="found">True if <i>delimiter</i> is found; false otherwise.</param>
            <returns>The total number of bytes read into the buffer, which will normally be less than <i>buffer</i>.length.
            Returns 0 if end of stream is reached and there is no data left to return.</returns>
            <exception cref="T:System.IO.IOException">Thrown when the stream is not readable.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the receiving buffer is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is less than zero or when count is less than or equal to zero.</exception>
            <exception cref="T:System.ArgumentException">Thrown when (offset + count) &gt; buffer.Length.</exception>
            <exception cref="T:System.IO.EndOfStreamException">
            At least one byte was read without finding the delimiter before end of stream was reached.
            </exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.SegmentedStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seeks a specific position in the stream. 
            </summary>
            <param name="offset">A byte offset relative to origin.</param>
            <param name="origin">A value of type <A HREF="ms-help://MS.MSDNVS/cpref/html/frlrfsystemioseekoriginclasstopic.htm">SeekOrigin</A> indicating the reference point used to obtain the new position.</param>
            <returns>The number of bytes that were seeked past.</returns>
            <remarks><p>Returns value of CoreStream.Seek. TcpStream.Seek throws a NotSupportedException.</p></remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.SegmentedStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the Stream.
            This method always throws a <a href="ms-help://MS.MSDNVS/cpref/html/frlrfsystemnotsupportedexceptionclasstopic.htm">NotSupportedException</a>.
            </summary>
            <param name="value">The desired length of the current stream in bytes. </param>
        </member>
        <member name="M:Dart.PowerTCP.Mail.SegmentedStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes data to the stream.
            </summary>
            <param name="buffer">The storage location of the data to be sent.</param>
            <param name="offset">The zero-based position in the buffer from which to begin writing from.</param>
            <param name="count">The exact number of bytes to write.</param>
            <exception cref="T:System.IO.IOException">Thrown when the stream is not Writeable.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when buffer is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is less than zero or when count is less than or equal to zero.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the (offset + count) &gt; buffer.Length.</exception>
            <remarks>
            <p>This method writes a sequence of bytes to the stream and returns when the operation is complete.</p>
            <p>Use the CanWrite property to determine whether the current instance supports writing.</p>
            </remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.SegmentedStream.Write(System.String)">
            <summary>
            Write a string to the stream.
            </summary>
            <param name="buffer">The storage location of the data to be sent.</param>
            <exception cref="T:System.IO.IOException">Thrown when the stream is not Writeable.</exception>
            <remarks>
            <p>This method writes a string to the stream and returns from complete. Since this method
            writes a string (doing a byte array conversion behind-the-scenes using the Object.Charset to convert unicode characters to bytes) to the stream, it is useful
            for such purposes as sending protocol commands to a server.</p>
            <p>Use the CanWrite property to determine whether the current instance supports writing.</p>
            </remarks>
            
        </member>
        <member name="E:Dart.PowerTCP.Mail.SegmentedStream.Trace">
            <summary>
            </summary>
        </member>
        <member name="P:Dart.PowerTCP.Mail.SegmentedStream.Available">
            <summary>
            Gets the amount of bytes of data that has been received from the network and is available to be read.
            </summary>
            <returns>The number of bytes of data that has been received from the network and is available to be read.</returns>
            <remarks>A positive number indicates that data has been received from the network. Call SegmentedStream.Read to access this
            data. 0 indicates that no data is available to be read.</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.SegmentedStream.CanRead">
            <summary>
            Indicates that data can be read from the stream.
            </summary>
            <returns><b>true</b> if the stream can be read; otherwise, <b>false</b>.</returns>
            <remarks>If the stream is closed, this property returns <b>false</b>.</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.SegmentedStream.CanSeek">
            <summary>
            Indicates that the stream can seek a specific location
            in the stream.
            </summary>
            <remarks>This property always returns <b>false</b>.</remarks>
            <returns><b>true</b> is the stream supports seeking; otherwise <b>false</b>.</returns>
        </member>
        <member name="P:Dart.PowerTCP.Mail.SegmentedStream.CanWrite">
            <summary>
            Indicates that data can be written to the stream.
            </summary>
            <returns><b>true</b> if the stream can be written to; otherwise, <b>false</b>.</returns>
            <remarks>If the stream is closed, this property returns <b>false</b>.</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.SegmentedStream.Position">
            <summary>
            Gets or sets the position in the stream.
            </summary>
            <remarks>
            <p>Returns the value of CoreStream.Position. If a Tcp socket is the source of
            the stream, then a NotSupportedException is thrown.</p>
            </remarks>
            <returns>If a Tcp socket is the source of the stream, throws a NotSupportedException; otherwise returns the value of CoreStream.Position.</returns>
        </member>
        <member name="T:SerialNumber">
            <summary>
            Summary description for SerialNumber.
            </summary>
        </member>
        <member name="M:SerialNumber.GetSystemNumber">
            <summary>
            Return a unique volume number that can be used for license validation at design-time
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dart.PowerTCP.Mail.DeliveryStatusNotification">
            <summary>
				The DeliveryStatusNotification class provides an easy way to handle Delivery Status Notification (DSN) when sending mail
				using SMTP.
			</summary><remarks>
				<p>Because in the original SMTP specification the support for notification of the success or failure of a sent message was quite limited, 
				RFC 1891 defined an extension to the SMTP protocol to allow for Delivery Status Notification, or DSN.
				DSN allows much greater control over what conditions should the sender be notified and the construction of 
				the notification itself. This was achieved by extending the SMTP <i>RCPT</i> and <i>MAIL</i> commands to
				allow the specification of notification parameters. These parameters include:</p>
				<ul>
				<li>A <i>NOTIFY</i> parameter (appended to RCPT command) to specify under what conditions the sender should be notified (<i>NEVER</i>, <i>SUCCESS</i>, <i>FAILURE</i>, or <i>DELAY</i>).</li>
				<li>A <i>RET</i> parameter (appended to MAIL command) to specify whether or not the message should be included in the DSN.</li>
				<li>A <i>ENVID</i> parameter (appended to MAIL command) specifying an envelope identifier to be transmitted with the DSN.</li>
				<li>A <i>ORCPT</i> parameter (appended to RCPT command) specifying the original recipient.</li>
				</ul>
				<p>The properties of the DeliveryStatusNotification object control the use of these parameters:</p>
				<ul>
				<li>Set DeliveryStatusNotification.Type to specify under what conditions a DSN should be sent (DSNType.Default, DSNType.Delay, DSNType.Failure, DSNType.Never, or DSNType.Success). </li>
				<li>Set DeliveryStatusNotification.ReturnMessage to true to specify that the entire message should be included with the DSN, and false if only the header should be included.</li>
				<li>Set DeliveryStatusNotification.EnvelopeID to the envelope identifier to be transmitted with the DSN.</li>
				</ul>
				<p>Once the properties of the DeliveryStatusNotification object have been set, all DSN related communication
				will occur transparently. The ORCPT parameter is automatically added and set to the recipient.</p>
				
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the DeliveryStatusNotification class to send an email with DSN.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Specify a DSN ID to use.
Smtp1.DSN.EnvelopeID = "ID1234567"

' Specify to return the entire message instead of the headers.
Smtp1.DSN.ReturnMessage = True

' Send a DSN on failure or delay.
Smtp1.DSN.Type = DSNType.Delay Or DSNType.Failure

' Send a message
Smtp1.Server = "mail@test.com"
Smtp1.Send("you@test.com", "me@test.com", "Test", "test message")
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Specify a DSN ID to use.
smtp1.DSN.EnvelopeID = "ID1234567";

// Specify to return the entire message instead of the headers.
smtp1.DSN.ReturnMessage = true;

// Send a DSN on failure or delay.
smtp1.DSN.Type = DSNType.Delay | DSNType.Failure; 

// Send a message
smtp1.Server = "mail.test.com";
smtp1.Send("you@test.com", "me@test.com", "Test", "test message");
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.DeliveryStatusNotification.Type">
            <summary>
				Identifies under what conditions a Delivery Status Notification will be sent.</summary><remarks>
				<p>When requesting a DSN, this property specifies the conditions under which a DSN will be sent.
				Use this property if you wish to have notification of the status of the delivery. The default
				value is DSNType.Default, specifying for the server to follow its default DSN policy. Change this property
				if you would like to explicitly control DSN. For example, use DSNType.Failure to request a DSN for 
				a failed delivery.
				Additionally, these types are additive, so if you want a DSN response on Failure, Success, and Delivery, then set DSN.Type=DSNType.Failure | DSNType.Success | DSNType.Delay
</p>
			</remarks><value>
				A DSNType value specifying the conditions under which a DSN is sent.
			</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the DeliveryStatusNotification class to send an email with DSN.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Specify a DSN ID to use.
Smtp1.DSN.EnvelopeID = "ID1234567"

' Specify to return the entire message instead of the headers.
Smtp1.DSN.ReturnMessage = True

' Send a DSN on failure or delay.
Smtp1.DSN.Type = DSNType.Delay Or DSNType.Failure

' Send a message
Smtp1.Server = "mail@test.com"
Smtp1.Send("you@test.com", "me@test.com", "Test", "test message")
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Specify a DSN ID to use.
smtp1.DSN.EnvelopeID = "ID1234567";

// Specify to return the entire message instead of the headers.
smtp1.DSN.ReturnMessage = true;

// Send a DSN on failure or delay.
smtp1.DSN.Type = DSNType.Delay | DSNType.Failure; 

// Send a message
smtp1.Server = "mail.test.com";
smtp1.Send("you@test.com", "me@test.com", "Test", "test message");
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.DeliveryStatusNotification.EnvelopeID">
            <summary>
				Specifies the envelope identifier to be transmitted with the message, and returned with the DSN.
			</summary><remarks>
				<p>When requesting a DSN, you can specify an identifier to track the status of a message.
				The value you specify as DeliveryStatusNotification.EnvelopeID, will be returned with the
				DSN in the "Original-Envelope-ID" header line. 
				This value must be less than 100 characters.</p>
			</remarks><value>
				A string value representing the envelope identifier to send with the message.
			</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the DeliveryStatusNotification class to send an email with DSN.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Specify a DSN ID to use.
Smtp1.DSN.EnvelopeID = "ID1234567"

' Specify to return the entire message instead of the headers.
Smtp1.DSN.ReturnMessage = True

' Send a DSN on failure or delay.
Smtp1.DSN.Type = DSNType.Delay Or DSNType.Failure

' Send a message
Smtp1.Server = "mail@test.com"
Smtp1.Send("you@test.com", "me@test.com", "Test", "test message")
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Specify a DSN ID to use.
smtp1.DSN.EnvelopeID = "ID1234567";

// Specify to return the entire message instead of the headers.
smtp1.DSN.ReturnMessage = true;

// Send a DSN on failure or delay.
smtp1.DSN.Type = DSNType.Delay | DSNType.Failure; 

// Send a message
smtp1.Server = "mail.test.com";
smtp1.Send("you@test.com", "me@test.com", "Test", "test message");
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.DeliveryStatusNotification.ReturnMessage">
            <summary>
				Specifies whether the entire message or only the header is returned with the DSN.
			</summary><remarks>
				<p>The DeliveryStatusNotification.ReturnMessage property specifies whether
				or not the message should be included in any failed DSN issued for
				this message transmission. Set this property to true to receive the entire message with the DSN.</p>
			</remarks><value>
				true if the entire message is to be returned; otherwise false. The default value is false.
			</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the DeliveryStatusNotification class to send an email with DSN.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Specify a DSN ID to use.
Smtp1.DSN.EnvelopeID = "ID1234567"

' Specify to return the entire message instead of the headers.
Smtp1.DSN.ReturnMessage = True

' Send a DSN on failure or delay.
Smtp1.DSN.Type = DSNType.Delay Or DSNType.Failure

' Send a message
Smtp1.Server = "mail@test.com"
Smtp1.Send("you@test.com", "me@test.com", "Test", "test message")
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Specify a DSN ID to use.
smtp1.DSN.EnvelopeID = "ID1234567";

// Specify to return the entire message instead of the headers.
smtp1.DSN.ReturnMessage = true;

// Send a DSN on failure or delay.
smtp1.DSN.Type = DSNType.Delay | DSNType.Failure; 

// Send a message
smtp1.Server = "mail.test.com";
smtp1.Send("you@test.com", "me@test.com", "Test", "test message");
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="T:Dart.PowerTCP.Mail.DSNType">
            <summary>
				Enumerates values of the DeliveryStatusNotification.Type property.
			</summary><remarks>
				<p>When requesting a DSN, the DeliveryStatusNotification.Type property specifies the conditions under which a DSN will be sent.
				These types are additive, so if you want a DSN response on Failure, Success, and Delivery, then set DSN.Type=DSNType.Failure+DSNType.Success+DSNType.Delay
				</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the DeliveryStatusNotification class to send an email with DSN.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Specify a DSN ID to use.
Smtp1.DSN.EnvelopeID = "ID1234567"

' Specify to return the entire message instead of the headers.
Smtp1.DSN.ReturnMessage = True

' Send a DSN on failure or delay.
Smtp1.DSN.Type = DSNType.Delay Or DSNType.Failure

' Send a message
Smtp1.Server = "mail@test.com"
Smtp1.Send("you@test.com", "me@test.com", "Test", "test message")
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Specify a DSN ID to use.
smtp1.DSN.EnvelopeID = "ID1234567";

// Specify to return the entire message instead of the headers.
smtp1.DSN.ReturnMessage = true;

// Send a DSN on failure or delay.
smtp1.DSN.Type = DSNType.Delay | DSNType.Failure; 

// Send a message
smtp1.Server = "mail.test.com";
smtp1.Send("you@test.com", "me@test.com", "Test", "test message");
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="F:Dart.PowerTCP.Mail.DSNType.Never">
            <summary>
				Directs the server not to send DSN under any circumstances.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.DSNType.Default">
            <summary>
				Directs the server to follow its default policy for DSN.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.DSNType.Failure">
            <summary>
				Requests DSN for failure of delivery.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.DSNType.Success">
            <summary>
				Requests DSN for successful delivery.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.DSNType.Delay">
            <summary>
				Requests DSN for delayed delivery when success/failure information is not known.
			</summary>
        </member>
        <member name="T:Dart.PowerTCP.Mail.SmtpEventArgs">
            <summary>
			This class is passed into the Smtp.EndSend event and provides data for this event.
		   </summary><remarks>
		   <p>An SmtpEventArgs object is passed into the Smtp.EndSend event after an email message has been sent asynchronously, containing
		   data about the sent message. This data will include a SmtpResult object, containing the result of the SMTP operation.</p>
		   <p>If your code causes an exception, it would be returned to the handling
event without you seeing it. To preclude such a condition, you should ALWAYS
use a try/catch block around your event-handling code.</p>
		   <p>For more information on implementing and handling events using PowerTCP.NET, see Events in PowerTCP.</p>
		   </remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.SmtpEventArgs.Response">
            <summary>
				Gets the SmtpResult object, encapsulating data about the message sent.
            </summary><remarks>
				<p>This property returns an SmtpResult object, which encapsulates data about the
				message sent. This data will include a byte count of all data sent (SmtpResult.Length)
				and a list of all recipients that the SMTP server responded successfully to (SmtpResult.Recipients).</p>
				<p>Use this property to check the results of an email message sent asynchronously.</p>
            </remarks><value>An SmtpResult object, which describes the message sent.</value>
        </member>
        <member name="P:Dart.PowerTCP.Mail.SmtpEventArgs.State">
            <summary>
				Gets the object that was included as part of the associated method call. 
			</summary><remarks>
				<p>The EndEventArgs.State property can be used in the calling asynchronous method to make data accessible
				to the handling event.</p>
				<p>This property is useful for making data accessible to the handling event. Since asynchronous methods are "disconnected" (meaning that when one is called, it executes on it's own and returns in the event handler) data that you were using in the code that called the asynchronous method may not be available in the event handler. Simply pass this data in as <i>state</i> when calling the asynchronous method (usually a BeginXXX method) and it is available in the event handler.
				If you do not wish to make an object accessible in the EndXXX event, simple pass in null as <i>state</i>.</p>
			</remarks><value>
				An object containing data passed into the calling asynchronous method.
			</value>
        </member>
        <member name="P:Dart.PowerTCP.Mail.SmtpEventArgs.Exception">
            <summary>
				Gets any exception which occurred during the asynchronous operation.
			</summary><remarks>
				<p>Check this property to tell if an exception occurred during the asynchronous operation. If this property is null, no exception occurred.</p>
				<p>The exception property is useful for checking exceptions and handling them appropriately. For example, if a bad command was sent to the server, a ProtocolException may be thrown. You could check this property to see if it was of type ProtocolException, than handle appropriately.</p>
			</remarks><value>
				If any exception occurred during the asynchronous operation, this property will contain an Exception object describing the exception.
			</value>
        </member>
        <member name="T:Dart.PowerTCP.Mail.SmtpResult">
            <summary>
				Represents the results from an SMTP send operation.
			</summary><remarks>
				 <p>When any email message is sent using Smtp.Send an SmtpResult object is returned from the method. When using asynchronous methods such as Smtp.BeginSend this object is passed into the event handler as part of the SmtpEventArgs class.</p>
				 <p>The SmtpResult object encapsulates data about the sent email message. Data available in this object includes a collection of recipients to which the SMTP mail server replied successfully to, as well as the byte count of all data sent.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the Smtp component to override the
addresses used for the SMTP envelope.
	</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' First create a message
Dim msg As New MessageStream()

' Add a "TO:" header line
msg.To.Add(New MailAddress("you@test.com"))

' Add a "FROM:" header line
msg.From = New MailAddress("me@test.com")

' Add a "SUBJECT:" header line
msg.Subject = "Test"

' Add some text
msg.Text = "test message"

' If the message is sent now, "me@test.com" would be sent after the SMTP
' "MAIL FROM" command and "you@test.com" would be sent after the SMTP "RCPT
' TO" command. You can override this, however, by explicitly setting the 
' addresses that will be used for the SMTP envelope as the following code demonstrates.

' Explicitly specify the email to use for "MAIL FROM" (This will NOT be included in the header)
Smtp1.MailFrom = New MailAddress("sender@test.com")

' Explicitly specify the email to use for "RCPT TO"; (This will NOT be included in the header)
Smtp1.Recipients.Add(New MailAddress("receiver@test.com"))

' Send the message, this will return an SmtpResult object
Smtp1.Server = "mail.test.com"
Dim result As SmtpResult = Smtp1.Send(msg)

' Check the information about the message sent
Debug.WriteLine("Bytes of data Sent: " + result.SentLength)
Dim ma As MailAddress
For Each ma In result.Recipients
   Debug.WriteLine("Mail sent to: " + ma.Address)
Next

' Output
' --------------------------------
' Bytes of data sent: 477
' Mail sent to: &lt;receiver@test.com&gt;
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// First create a message
MessageStream msg = new MessageStream();

// Add a "TO:" header line
msg.To.Add(new MailAddress("you@test.com"));

// Add a "FROM:" header line
msg.From = new MailAddress("me@test.com");

// Add a "SUBJECT:" header line
msg.Subject = "Test";

// Add some text
msg.Text = "test message";

// If the message is sent now, "me@test.com" would be sent after the SMTP
// "MAIL FROM" command and "you@test.com" would be sent after the SMTP "RCPT
// TO" command. You can override this, however, by explicitly setting the 
// addresses that will be used for the SMTP envelope as the following code demonstrates.

// Explicitly specify the email to use for "MAIL FROM" (This will NOT be included in the header)
smtp1.MailFrom = new MailAddress("sender@test.com");

// Explicitly specify the email to use for "RCPT TO"; (This will NOT be included in the header)
smtp1.Recipients.Add(new MailAddress("receiver@test.com"));

// Send the message, this will return an SmtpResult object
smtp1.Server = "mail.dart.com";
SmtpResult result = smtp1.Send(msg);

// Check the information about the message sent
Debug.WriteLine("Bytes of data Sent: " + result.SentLength);
foreach(MailAddress ma in result.Recipients)
   Debug.WriteLine("Mail sent to: " + ma.Address);

// Output
// --------------------------------
// Bytes of data sent: 477
// Mail sent to: &lt;receiver@test.com&gt;
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.SmtpResult.SentLength">
            <summary>
			After any method that is used to send an email message (such as Smtp.Send or Smtp.BeginSend) has completed, this property gets the total length of all data sent.
			</summary><value>
			A long representing the length of all data sent.
			</value><remarks>
			<p>After the message is sent, check this property to see the number of bytes of data sent.</p>
			<p>This data is also accessible via the Smtp.Progress event, when the send is completed.</p>
			<p>The Smtp.Length property is useful for displaying data to the user, or if you need to know the length of data sent for any other reason (such as buffer initialization).</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the Smtp component to override the
addresses used for the SMTP envelope.
	</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' First create a message
Dim msg As New MessageStream()

' Add a "TO:" header line
msg.To.Add(New MailAddress("you@test.com"))

' Add a "FROM:" header line
msg.From = New MailAddress("me@test.com")

' Add a "SUBJECT:" header line
msg.Subject = "Test"

' Add some text
msg.Text = "test message"

' If the message is sent now, "me@test.com" would be sent after the SMTP
' "MAIL FROM" command and "you@test.com" would be sent after the SMTP "RCPT
' TO" command. You can override this, however, by explicitly setting the 
' addresses that will be used for the SMTP envelope as the following code demonstrates.

' Explicitly specify the email to use for "MAIL FROM" (This will NOT be included in the header)
Smtp1.MailFrom = New MailAddress("sender@test.com")

' Explicitly specify the email to use for "RCPT TO"; (This will NOT be included in the header)
Smtp1.Recipients.Add(New MailAddress("receiver@test.com"))

' Send the message, this will return an SmtpResult object
Smtp1.Server = "mail.test.com"
Dim result As SmtpResult = Smtp1.Send(msg)

' Check the information about the message sent
Debug.WriteLine("Bytes of data Sent: " + result.SentLength)
Dim ma As MailAddress
For Each ma In result.Recipients
   Debug.WriteLine("Mail sent to: " + ma.Address)
Next

' Output
' --------------------------------
' Bytes of data sent: 477
' Mail sent to: &lt;receiver@test.com&gt;
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// First create a message
MessageStream msg = new MessageStream();

// Add a "TO:" header line
msg.To.Add(new MailAddress("you@test.com"));

// Add a "FROM:" header line
msg.From = new MailAddress("me@test.com");

// Add a "SUBJECT:" header line
msg.Subject = "Test";

// Add some text
msg.Text = "test message";

// If the message is sent now, "me@test.com" would be sent after the SMTP
// "MAIL FROM" command and "you@test.com" would be sent after the SMTP "RCPT
// TO" command. You can override this, however, by explicitly setting the 
// addresses that will be used for the SMTP envelope as the following code demonstrates.

// Explicitly specify the email to use for "MAIL FROM" (This will NOT be included in the header)
smtp1.MailFrom = new MailAddress("sender@test.com");

// Explicitly specify the email to use for "RCPT TO"; (This will NOT be included in the header)
smtp1.Recipients.Add(new MailAddress("receiver@test.com"));

// Send the message, this will return an SmtpResult object
smtp1.Server = "mail.dart.com";
SmtpResult result = smtp1.Send(msg);

// Check the information about the message sent
Debug.WriteLine("Bytes of data Sent: " + result.SentLength);
foreach(MailAddress ma in result.Recipients)
   Debug.WriteLine("Mail sent to: " + ma.Address);

// Output
// --------------------------------
// Bytes of data sent: 477
// Mail sent to: &lt;receiver@test.com&gt;
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.SmtpResult.Recipients">
            <summary>
			After any method that is used to send an email message (such as Smtp.Send or Smtp.BeginSend) has completed, this property returns a collection of email recipeints to which the server replied positively.
			</summary><value>
			A MailAddresses object, containing a list of valid recipeints.
			</value><remarks>
			<p>When sending mail, the SMTP server will accept or reject each mail recipient based on some criteria. After an email 
			has been successfully sent, this collection will contain a MailAddress object representing the email address of each recipient
			that was accepted.</p>
			<p>The Smtp.Recipients property is useful for checking within your application if the SMTP server attempted to send to all email addresses. 
			If an email address was rejected, you can use this property to handle that within your application, perhaps by displaying a message to the
			user or by using a new SMTP server.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the Smtp component to override the
addresses used for the SMTP envelope.
	</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' First create a message
Dim msg As New MessageStream()

' Add a "TO:" header line
msg.To.Add(New MailAddress("you@test.com"))

' Add a "FROM:" header line
msg.From = New MailAddress("me@test.com")

' Add a "SUBJECT:" header line
msg.Subject = "Test"

' Add some text
msg.Text = "test message"

' If the message is sent now, "me@test.com" would be sent after the SMTP
' "MAIL FROM" command and "you@test.com" would be sent after the SMTP "RCPT
' TO" command. You can override this, however, by explicitly setting the 
' addresses that will be used for the SMTP envelope as the following code demonstrates.

' Explicitly specify the email to use for "MAIL FROM" (This will NOT be included in the header)
Smtp1.MailFrom = New MailAddress("sender@test.com")

' Explicitly specify the email to use for "RCPT TO"; (This will NOT be included in the header)
Smtp1.Recipients.Add(New MailAddress("receiver@test.com"))

' Send the message, this will return an SmtpResult object
Smtp1.Server = "mail.test.com"
Dim result As SmtpResult = Smtp1.Send(msg)

' Check the information about the message sent
Debug.WriteLine("Bytes of data Sent: " + result.SentLength)
Dim ma As MailAddress
For Each ma In result.Recipients
   Debug.WriteLine("Mail sent to: " + ma.Address)
Next

' Output
' --------------------------------
' Bytes of data sent: 477
' Mail sent to: &lt;receiver@test.com&gt;
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// First create a message
MessageStream msg = new MessageStream();

// Add a "TO:" header line
msg.To.Add(new MailAddress("you@test.com"));

// Add a "FROM:" header line
msg.From = new MailAddress("me@test.com");

// Add a "SUBJECT:" header line
msg.Subject = "Test";

// Add some text
msg.Text = "test message";

// If the message is sent now, "me@test.com" would be sent after the SMTP
// "MAIL FROM" command and "you@test.com" would be sent after the SMTP "RCPT
// TO" command. You can override this, however, by explicitly setting the 
// addresses that will be used for the SMTP envelope as the following code demonstrates.

// Explicitly specify the email to use for "MAIL FROM" (This will NOT be included in the header)
smtp1.MailFrom = new MailAddress("sender@test.com");

// Explicitly specify the email to use for "RCPT TO"; (This will NOT be included in the header)
smtp1.Recipients.Add(new MailAddress("receiver@test.com"));

// Send the message, this will return an SmtpResult object
smtp1.Server = "mail.dart.com";
SmtpResult result = smtp1.Send(msg);

// Check the information about the message sent
Debug.WriteLine("Bytes of data Sent: " + result.SentLength);
foreach(MailAddress ma in result.Recipients)
   Debug.WriteLine("Mail sent to: " + ma.Address);

// Output
// --------------------------------
// Bytes of data sent: 477
// Mail sent to: &lt;receiver@test.com&gt;
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="T:Dart.PowerTCP.Mail.SendEventHandler">
            <summary>
				Represents the method (event handler) that will be raised when the Smtp.BeginSend operation completes.
			</summary><paramref name="sender">The source of the event.</paramref><paramref name="e">An SmtpEventArgs object that contains the event data.</paramref><remarks>
				<p>As Microsoft describes in their MSDN documentation, the event model in the .NET Framework is based on having an event delegate that connects an event with its handler. To raise an event, two elements are needed: 
				<ul type="disc">
					<li>A class that holds the event data. This class must derive from the base class <a href="ms-help://MS.MSDNVS/cpref/html/frlrfsystemeventargsclasstopic.htm">EventArgs</a>.</li>
					<li>A delegate that points to a method that provides the response to the event.</li>
				</ul>
				When using the Smtp.BeginSend method, the class that holds the event data is the SmtpEventArgs class. A method must be created with the same signature as the SmtpEventArgs delegate. 
				If you are working within the Visual Studio .NET environment, this can be automatically done for you. See the "Using Events In PowerTCP" topic for more information.
				If you are not working within the Visual Studio .NET environment, you must do this yourself. In this example that would mean a method would have to be defined to accept two arguments (an object and an SmtpEventArgs) and return void.
				Once this has been done, the delegate must be "connected" to the handling event. This is done by adding an instance of the delegate to the event (see examples below).
				</p>
				<p>For more information about event handler delegates, see the "Using Events In PowerTCP" topic.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates how to assign an event handler to an event.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' *** EndSend Event ***

' You can either use the AddHandler statement to associate an event with an event handler in your init code
AddHandler Smtp1.EndSend, New Dart.PowerTCP.SendEventHandler(AddressOf Smtp1_EndPut)

' Or you can use the Handles keyword to associate an event handler with an event
Private Sub Smtp1_EndSend(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureMail.SmtpEventArgs) Handles Smtp1.EndSend
End Sub
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// EndSend event
this.smtp1.EndSend += new Dart.PowerTCP.SecureMail.SendEventHandler(this.smtp1_EndSend);
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="T:Dart.PowerTCP.Mail.SmtpProgressEventHandler">
            <summary>
		      This class is passed into the Smtp.Progress event and provides data for that event.
		   </summary><remarks>
		      <p>When the Smtp.Send method is called, the Smtp.Progress event will be raised in the frequency specified by Smtp.Connection.SendBufferSize. An ProgressEventArgs object is passed into the Smtp.Progress event containing information about the current file transfer.</p>
		      <p>This class is useful for displaying information to the user about the current send operation.  To display progress using a ProgressBar, use ProgressEventArgs.Length as ProgressBar.Max and SmtpProgressBar.Position as ProgressBar.Value.</p>
		      <p>If your code causes an exception, it would be returned to the handling
event without you seeing it. To preclude such a condition, you should ALWAYS
use a try/catch block around your event-handling code.</p>
		   </remarks>
        </member>
        <member name="T:Dart.PowerTCP.Mail.Smtp">
            <summary>
				<p>The Smtp component enables easy integration of Simple Mail Transport Protocol (SMTP) functionality within any .NET application.</p>
            </summary><remarks>
				<p>The Smtp component enables the sending of Internet mail. The Smtp component is feature-rich and flexible, including
				many benefits not found in the .NET Platform's native SMTP support such as proxy support, <a href="ms-help://MS.NETFrameworkSDK/cpref/html/frlrfSystemIOStreamClassTopic.htm">Stream</a> support, asynchronous use, 
				access to the TCP connection, advanced debugging utilities, and more.</p>
				<H4 class="dtH4">Using the Smtp Component</H4>
				<p>What follows are short descriptions of common usability issues. For a more complete, "walk-through" type description, see Using PowerTCP Secure Mail for .NET.</p>
				<p><b>Automatic Session Management:</b> Simply set the Smtp.Server property to the mail server you wish to use and call any method, such as the Smtp.Send method, to send
				a message. Login (and logout) will automatically occur, reducing any concern about managing sessions.</p>
				<p><b>Synchronous Use:</b> Most applications written with the Smtp component will be synchronous meaning that the application, when calling a synchronous method, will not execute the next line of code until the response is received. Use synchronous methods when sending mail does not have to be transparent to the user.</p>
				<p><b>Asynchronous Use:</b> The Smtp component fully supports asynchronous use, meaning that the application, when calling an asynchronous method, will immediately execute the next line of code without waiting for the response from the method. When the response is received, an event will be raised.</p>
				<p><b>Sending Basic Mail Quickly:</b> The Smtp.Send method is overloaded to provide an easy high-level way to send mail with only a single line of code.</p>
				<p><b>Sending Advanced Mail:</b> The Smtp.Send method is overloaded to allow the sending of a MessageStream object, allowing unprecedented ability to create email messages, no matter how complex the internal structure of the message needs to be!</p>
				<p><b>Sending Commands:</b> The Smtp.Connection.Send method can be used to send any command to an SMTP server, even custom commands.</p>
				<p><b>Verifying email addresses:</b> The Smtp component has built-in email verification support.</p>
				<p><b>Displaying Progress:</b> The Smtp.Progress event provides real-time notification of the number of bytes sent.</p>
				<p><b>Viewing The SMTP Communication:</b> The Smtp.Trace event enables access to all commands and data sent over the TCP connection.</p>
				<p><b>Retrieving info about the control connection:</b> The TCP control connection is exposed through the Smtp.Connection property, allowing access to low-level properties and methods. This can be used to view TCP-level activity, such as the local and remote IP address. The Tcp class can't be used on its own without a license for the PowerTCP <ign>Socket</ign> Objects.</p>
            </remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates creating a basic MIME message with a single attachment.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Create a MessageStream object
Dim msg As New MessageStream()

' Add a normal recipient
msg.To.Add(New MailAddress("you@test.com"))

' Add a CC recipient
msg.CC.Add(New MailAddress("you2@test.com"))

' Add a BCC recipient
msg.BCC.Add(New MailAddress("you3@test.com"))

' Specify the sender
msg.From = New MailAddress("me@test.com")

' Specify the subject
msg.Subject = "Hello"

' Add some text to the message.
msg.Text = "Hi everyone. How are ya doing?"

' Add an attachment
msg.Attachments.Add("C:\files\graph.jpg")

' Specify the server
Smtp1.Server = "mail.test.com"

' Send the message
Smtp1.Send(msg)
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Create a MessageStream object
MessageStream msg = new MessageStream();

// Add a normal recipient
msg.To.Add(new MailAddress("you@test.com"));

// Add a CC recipient
msg.CC.Add(new MailAddress("you2@test.com"));

// Add a BCC recipient
msg.BCC.Add(new MailAddress("you3@test.com"));

// Specify the sender
msg.From = new MailAddress("me@test.com");

// Specify the subject
msg.Subject = "Hello";

// Add some text to the message.
msg.Text = "Hi everyone. How are ya doing?";

// Add an attachment
msg.Attachments.Add("C:\\files\\graph.jpg");

// Specify the server
smtp1.Server = "mail.test.com";

// Send the message
smtp1.Send(msg);
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
            	
        </member>
        <member name="F:Dart.PowerTCP.Mail.Smtp.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Smtp.#ctor(System.ComponentModel.IContainer)">
            <summary>
				Initializes a new instance of the Smtp component.
            </summary><remarks>
				<p>Use this constructor to add the Smtp component to the IContainer 
				container. When using Visual Studio.NET, simply add the Smtp component to the form and the object will automatically be created and initialized. If working out of the Visual Studio.NET environment (or using the Smtp component as a reference), the Smtp component will have to be explicitly created and initialized.</p>
				<p>For information on how to use the Smtp component, see "Using PowerTCP Secure Mail for .NET".</p>
				<p>The following table shows initial property values for an instance of Smtp.</p>
				<div class="tablediv">
					<table cellspacing="0" class="dtTABLE">
						<tr valign="top">
							<th width="50%">Property</th>
							<th width="50%">Initial Value</th>
						</tr>
						<tr valign="top">
							<td width="50%"> AutoSize </td>
							<td width="50%"> true </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Busy </td>
							<td width="50%"> false </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Client </td>
							<td width="50%"> zero-length string </td>
						</tr>
						<tr valign="top">
							<td width="50%"> ClientPort </td>
							<td width="50%"> 0 </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Connected </td>
							<td width="50%"> false </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Connection </td>
							<td width="50%"> Tcp component </td>
						</tr>
						<tr valign="top">
							<td width="50%"> DoEvents </td>
							<td width="50%"> true </td>
						</tr>
						<tr valign="top">
							<td width="50%"> DSN </td>
							<td width="50%"> DeliveryStatusNotification class </td>
						</tr>
						<tr valign="top">
							<td width="50%"> MailFrom </td>
							<td width="50%"> null </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Password </td>
							<td width="50%"> zero-length string </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Recipients </td>
							<td width="50%"> MailAddresses object </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Server </td>
							<td width="50%"> zero-length string </td>
						</tr>
						<tr valign="top">
							<td width="50%"> ServerPort </td>
							<td width="50%"> 25 </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Timeout </td>
							<td width="50%"> 30000 </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Username </td>
							<td width="50%"> zero-length string </td>
						</tr>
					</table>
				</div>
			</remarks><param name="container">The IContainer which contains the Smtp component.</param>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates the Smtp component constructors.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Create a default instance
Dim smtp1 As New Smtp()

' Create an instance, passing in a reference to the container
Dim smtp2 As New Smtp(Me.components)
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Create a default instance
Smtp smtp1 = new Smtp();

// Create an instance, passing in a reference to the container
Smtp smtp2 = new Smtp(this.components);
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Smtp.#ctor">
            <summary>
				Initializes a new instance of the Smtp component.
            </summary><remarks>
				<p>The default constructor initializes a new Smtp component. When using Visual Studio.NET, simply add the Smtp component to the form and the object will automatically be created and initialized. If working out of the Visual Studio.NET environment (or using the Smtp component as a reference), the Smtp component will have to be explicitly created and initialized.</p>
				<p>For information on how to use the Smtp component, see "Using PowerTCP Secure Mail for .NET".</p>
				<p>The following table shows initial property values for an instance of Smtp.</p>
				<div class="tablediv">
					<table cellspacing="0" class="dtTABLE">
						<tr valign="top">
							<th width="50%">Property</th>
							<th width="50%">Initial Value</th>
						</tr>
						<tr valign="top">
							<td width="50%"> AutoSize </td>
							<td width="50%"> true </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Busy </td>
							<td width="50%"> false </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Client </td>
							<td width="50%"> zero-length string </td>
						</tr>
						<tr valign="top">
							<td width="50%"> ClientPort </td>
							<td width="50%"> 0 </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Connected </td>
							<td width="50%"> false </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Connection </td>
							<td width="50%"> Tcp component </td>
						</tr>
						<tr valign="top">
							<td width="50%"> DoEvents </td>
							<td width="50%"> true </td>
						</tr>
						<tr valign="top">
							<td width="50%"> DSN </td>
							<td width="50%"> DeliveryStatusNotification class </td>
						</tr>
						<tr valign="top">
							<td width="50%"> MailFrom </td>
							<td width="50%"> null </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Password </td>
							<td width="50%"> zero-length string </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Recipients </td>
							<td width="50%"> MailAddresses object </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Server </td>
							<td width="50%"> zero-length string </td>
						</tr>
						<tr valign="top">
							<td width="50%"> ServerPort </td>
							<td width="50%"> 25 </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Timeout </td>
							<td width="50%"> 30000 </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Username </td>
							<td width="50%"> zero-length string </td>
						</tr>
					</table>
				</div>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates the Smtp component constructors.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Create a default instance
Dim smtp1 As New Smtp()

' Create an instance, passing in a reference to the container
Dim smtp2 As New Smtp(Me.components)
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Create a default instance
Smtp smtp1 = new Smtp();

// Create an instance, passing in a reference to the container
Smtp smtp2 = new Smtp(this.components);
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Smtp.BeginSend(System.IO.Stream,System.Object)">
            <summary>
				Asynchronously send a MessageStream object that represents an email message.
			</summary><param name="message">A MessageStream object representing an email message.</param><param name="state">User state information.</param><remarks>
				<p>This method begins to send a 
				email message. Upon completion the Smtp.EndSend event will be raised. An SmtpEventArgs object will be passed into this event, containing data about the message sent. 
				For example, the SmtpEventArgs will contain data such as the length of the email message sent.
				If you are using the Smtp component as a reference, you must "wire up" the event yourself. This involves creating a method that acts as the event handler that implements the SmtpEventHandler delegate. See Using Events When Using A Component As A Reference for more information.</p>
				<p>The object <i>state</i> is useful for any kind of state information that you would like accessible in the Smtp.EndGet event. Since the method is "disconnected" from the calling code and returns to the calling thread elsewhere, you may wish to pass an object/variable as <i>state</i> to be retrieved and used in the event handler.</p>
				<p>To send an email message synchronously, use Smtp.Send.</p>
				<H4 class="dtH4">Use The Smtp.BeginSend(Stream,Object) Method If...</H4>
				<p>Use this method if you wish to send an email message transparently with minimal application impact, as execution occurs on another thread.</p>
			</remarks><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad SMTP protocol response received from server.</exception><exception cref="T:System.InvalidOperationException"> Smtp.BeginSend used without providing an EndSend event handler.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception><exception cref="T:System.IO.IOException">The filename, directory name, or volume label syntax is incorrect.</exception><exception cref="T:System.ArgumentException">A required argument contains invalid characters, is empty, or contains only white spaces.</exception><returns>An IAsyncResult that represents the asynchronous operation, which could still be pending.</returns>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the Smtp.BeginSend method and the Smtp.EndSend event.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

Private Sub BeginSendTest()
   ' Create a message
   Dim msg As New MessageStream()
   msg.To.Add(New MailAddress("you@test.com"))
   msg.From = New MailAddress("me@test.com")
   msg.Subject = "test"
   msg.Text = "This is a test"

   ' Begin to asynchronously send the message
   Smtp1.Server = "mail.test.com"
   Smtp1.BeginSend(msg, Nothing)
End Sub

Private Sub Smtp1_EndSend(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureMail.SmtpEventArgs) Handles Smtp1.EndSend
   ' Send operation complete. Check to see if an exception was thrown during the operation.
   If e.Exception Is Nothing Then
      Debug.WriteLine("Send operation complete")
      Dim m As MailAddress
      For Each m In e.Response.Recipients
         Debug.WriteLine("Mail sent to " + m.Address)
      Next
   End If
End Sub
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

private void BeginSendTest()
{
   // Create a message
   MessageStream msg = new MessageStream();
   msg.To.Add(new MailAddress("you@test.com"));
   msg.From = new MailAddress("me@test.com");
   msg.Subject = "test";
   msg.Text = "This is a test";

   // Begin to asynchronously send the message
   smtp1.Server = "mail.test.com";
   smtp1.BeginSend(msg, null);
}

private void smtp1_EndSend(object sender, Dart.PowerTCP.SecureMail.SmtpEventArgs e)
{
   // Send operation complete. Check to see if an exception was thrown during the operation.
   if(e.Exception == null)
   {
      Debug.WriteLine("Send operation complete");
      foreach(MailAddress m in e.Response.Recipients)
         Debug.WriteLine("Mail sent to " + m.Address); 
   }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Smtp.BeginSend(System.String,System.String,System.String,System.String,System.Object)">
            <summary>
				Asynchronously send a basic text email.
			</summary><param name="toAddress">Recipient of the email.</param><param name="fromAddress">Sender of the email. </param><param name="subject">Subject of the email.</param><param name="body">Bodytext of the email.</param><param name="state">User state information.</param><remarks>
				<p>This method begins to send a 
				basic text email. Upon completion the Smtp.EndSend event will be raised. An SmtpEventArgs object will be passed into this event, containing data about the message sent. 
				For example, the SmtpEventArgs will contain data such as the length of the email message sent.
				If you are using the Smtp component as a reference, you must "wire up" the event yourself. This involves creating a method that acts as the event handler that implements the SmtpEventHandler delegate. See Using Events When Using A Component As A Reference for more information.</p>
				<p>The object <i>state</i> is useful for any kind of state information that you would like accessible in the Smtp.EndGet event. Since the method is "disconnected" from the calling code and returns to the calling thread elsewhere, you may wish to pass an object/variable as <i>state</i> to be retrieved and used in the event handler.</p>
				<p>To send a basic text email synchronously, use Smtp.Send.</p>
				<p>Use this method if you wish to send a basic text email message transparently with minimal application impact, as execution occurs on another thread.</p>
           </remarks><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad SMTP protocol response received from server.</exception><exception cref="T:System.InvalidOperationException"> Smtp.BeginSend used without providing an EndSend event handler.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception><exception cref="T:System.IO.IOException">The filename, directory name, or volume label syntax is incorrect.</exception><exception cref="T:System.ArgumentException">A required argument contains invalid characters, is empty, or contains only white spaces.</exception><returns>An IAsyncResult that represents the asynchronous operation, which could still be pending.</returns>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the Smtp.BeginSend method and the Smtp.EndSend event.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

Private Sub BeginSendTest()
   ' Begin to asynchronously send a message
   Smtp1.Server = "mail.test.com"
   Smtp1.BeginSend("you@test.com", "me@test.com", "test", "test message", Nothing)
End Sub

Private Sub Smtp1_EndSend(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureMail.SmtpEventArgs) Handles Smtp1.EndSend
   ' Send operation complete. Check to see if an exception was thrown during the operation.
   If e.Exception Is Nothing Then
      Debug.WriteLine("Send operation complete")
      Dim m As MailAddress
      For Each m In e.Response.Recipients
         Debug.WriteLine("Mail sent to " + m.Address)
      Next
   End If
End Sub
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

private void BeginSendTest()
{
   // Begin to asynchronously send a message
   smtp1.Server = "mail.test.com";
   smtp1.BeginSend("you@test.com", "me@test.com", "test", "test message", null);
}

private void smtp1_EndSend(object sender, Dart.PowerTCP.SecureMail.SmtpEventArgs e)
{
   // Send operation complete. Check to see if an exception was thrown during the operation.
   if(e.Exception == null)
   {
      Debug.WriteLine("Send operation complete");
      foreach(MailAddress m in e.Response.Recipients)
         Debug.WriteLine("Mail sent to " + m.Address);
    }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Smtp.Send(System.IO.Stream)">
            <summary>
				Synchronously send a MessageStream object that represents an email message.
            </summary><param name="message">A MessageStream object representing an email message.</param><remarks>
				<p>
					This method should be used to send most email messages. Standard use would
					involve creating a MessageStream object by doing the following:
					<ul>
					<li>Creating and initializing a MessageStream object.</li>
					<li>Setting the sender, receiver, and subject by using the MessageStream.To, MessageStream.From, and MessageStream.Subject properties.</li>
					<li>Adding Part objects representing MIME parts to the MessageStream.</li>
					<li>Adding custom header lines (optinal).</li>
					<li>Sending the message.</li>
					</ul>
				</p>
				<p>To send a message asynchronously, use Smtp.BeginSend.</p>
				<p>Use this method to send most messages. The only exception to this is
				sending simple text message, for which <a href="DartPowerTCPSmtpSendMethod1.html">Smtp.Send(String,String,String,String)</a> can be used.</p>
			</remarks><returns>
				A SmtpResult object that describes the sent message.
            </returns><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad SMTP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception><exception cref="T:System.IO.IOException">The filename, directory name, or volume label syntax is incorrect.</exception><exception cref="T:System.ArgumentException">A required argument contains invalid characters, is empty, or contains only white spaces.</exception>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates creating a basic MIME message with a single attachment.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Create a MessageStream object
Dim msg As New MessageStream()

' Add a normal recipient
msg.To.Add(New MailAddress("you@test.com"))

' Add a CC recipient
msg.CC.Add(New MailAddress("you2@test.com"))

' Add a BCC recipient
msg.BCC.Add(New MailAddress("you3@test.com"))

' Specify the sender
msg.From = New MailAddress("me@test.com")

' Specify the subject
msg.Subject = "Hello"

' Add some text to the message.
msg.Text = "Hi everyone. How are ya doing?"

' Add an attachment
msg.Attachments.Add("C:\files\graph.jpg")

' Specify the server
Smtp1.Server = "mail.test.com"

' Send the message
Smtp1.Send(msg)
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Create a MessageStream object
MessageStream msg = new MessageStream();

// Add a normal recipient
msg.To.Add(new MailAddress("you@test.com"));

// Add a CC recipient
msg.CC.Add(new MailAddress("you2@test.com"));

// Add a BCC recipient
msg.BCC.Add(new MailAddress("you3@test.com"));

// Specify the sender
msg.From = new MailAddress("me@test.com");

// Specify the subject
msg.Subject = "Hello";

// Add some text to the message.
msg.Text = "Hi everyone. How are ya doing?";

// Add an attachment
msg.Attachments.Add("C:\\files\\graph.jpg");

// Specify the server
smtp1.Server = "mail.test.com";

// Send the message
smtp1.Send(msg);
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Smtp.Send(System.String,System.String,System.String,System.String)">
            <summary>
		      Synchronously send a basic text email.
           </summary><param name="toAddress">Recipient of the email.</param><param name="fromAddress">Sender of the email. </param><param name="subject">Subject of the email.</param><param name="body">Body text of the email.</param><remarks>
				<p>This method represents the quickest and easiest way to send a 
				basic text email. A SmtpResult object is returned containing data
				about the message sent such as the number of bytes of data sent.</p>
				<p>To send a basic text email asynchronously, use Smtp.BeginSend.</p>
				<p>Use this method if you simply want to send a basic text email to a single recipient as quickly as possible.</p>
           </remarks><returns>
				A SmtpResult object that describes the sent message.
           </returns><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad SMTP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception><exception cref="T:System.IO.IOException">The filename, directory name, or volume label syntax is incorrect.</exception><exception cref="T:System.ArgumentException">A required argument contains invalid characters, is empty, or contains only white spaces.</exception>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates sending an email message as quickly and easily as possible.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Set the server
Smtp1.Server = "mail.test.com"

' Send a message
Smtp1.Send("you@dart.com", "me@dart.com", "test", "this is a test")
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Set the server
smtp1.Server = "mail.test.com";

// Send a message
smtp1.Send("you@dart.com", "me@dart.com", "test", "this is a test");
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Smtp.GenericSendPipeLined(System.IO.Stream,System.String)">
            <summary>
            Sends a Pipelined Message
            </summary>
            <param name="Input">The Message being sent.</param>
            <param name="Command">The Command used (MAIL, SEND, SOML, SAML)</param>
            <returns>
            An SmtpResult object holding the MailAddresses sent to and the size of the message sent in bytes.
            </returns>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Smtp.Close">
            <summary>
            Ceases all activity and gracefully closes the control connection.
            </summary><remarks>
				<p>This method causes a "QUIT" command to be issued to the server.
				This method sends a QUIT command and waits until the server has closed the connection.</p>
				<p>Use this method to terminate the connection. This method should be considered the intended means of ending an SMTP session. It differs from the Smtp.Dispose method in that the Smtp.Dispose method is used to abruptly close the connection and release all resources associated with the Smtp component.</p>
			</remarks><exception cref="T:Dart.PowerTCP.Mail.ProtocolException">Bad SMTP protocol response received from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context.</exception><exception cref="T:System.IO.IOException">The filename, directory name, or volume label syntax is incorrect.</exception><exception cref="T:System.ArgumentException">A required argument contains invalid characters, is empty, or contains only white spaces.</exception>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates closing the Smtp component's connection.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' First check if the Smtp component is connected
If Smtp1.Connected Then
   Try
      ' Try to close gracefully
      Smtp1.Close()
   Catch ex As Exception
      ' If an error occurs here, just abruptly close.
      Smtp1.Dispose()
   End Try
End If
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// First check if the Smtp component is connected
if(smtp1.Connected)
{
   try
   {
      // Try to close gracefully
      smtp1.Close();
   }
   catch(Exception ex)
   {
      // If an error occurs here, just abruptly close.
      smtp1.Dispose();
   }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Smtp.Dispose(System.Boolean)">
            <summary>
			Releases all resources associated with the object.
			</summary><remarks>
				<p>The Object.Dispose method abruptly aborts the connection and releases all resources.</p>
				<p>Object.Dispose should ONLY be used to release all resources used by the
object, and the object should not be used subsequently. If an abort is
desired, then Object.Close or Object.Connection.Close if available should be used to terminate
activity and reset the object. The Object cannot be used once Object.Dispose() or Object.Dispose(true) are called.
</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates closing the Smtp component's connection.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' First check if the Smtp component is connected
If Smtp1.Connected Then
   Try
      ' Try to close gracefully
      Smtp1.Close()
   Catch ex As Exception
      ' If an error occurs here, just abruptly close.
      Smtp1.Dispose()
   End Try
End If
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// First check if the Smtp component is connected
if(smtp1.Connected)
{
   try
   {
      // Try to close gracefully
      smtp1.Close();
   }
   catch(Exception ex)
   {
      // If an error occurs here, just abruptly close.
      smtp1.Dispose();
   }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Smtp.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Smtp.Editor">
            <summary>
				In Visual Studio.NET, displays an interactive form to use to test real time protocol operations.
			</summary><value>
				An EditorForm to use in VS.NET to test protocol operations. 
			</value><remarks>
				<p>This property can only be used by clicking this property in the Properties Window in Visual Studio.NET. This will open an application which can be used to test protocol operation. The EditorForm will not be available if the PowerTCP component is being used as a reference.</p>
				<p>The Object.Editor property can ONLY be used at design time in the Visual Studio.NET environment.</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Smtp.Busy">
            <summary>
				Returns true if a method is currently in use. 
			</summary><remarks>
				<p>When used in PowerTCP Zip Compression for .NET, this property provides protection against accessing a method that is still processing a command.</p>
				<p>When used in an Internet communications component, this property provides protection against sending commands over a busy socket. For example, if the PowerTCP component is engaged in sending or receiving data, and another method is called that
				requires use of the same socket, a BusyException is thrown.</p>
				<p>The Object.BusyChanged event is raised whenever the value of this property changes.</p>
				<p>For Internet communications components, check this property within your code if you feel a new operation could be 
				attempted over a socket that is already engaged in sending or receiving data. This property is also 
				useful for displaying socket status to the user. For example, a "stoplight" could 
				be part of the user interface that would be red when the Object.Busy property is true, and 
				green when false.</p>
			</remarks><value>
				true if a method is currently is use, otherwise false
			</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the BusyChanged event to see if the socket is busy.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

Private Sub BusyTest()
   ' Do something to cause the Busy event to be raised
        
   ' Create a message
   Dim msg As New MessageStream()
   msg.To.Add(New MailAddress("you@test.com"))
   msg.From = New MailAddress("me@test.com")
   msg.Subject = "test"
   msg.Attachments.Add("C:\test\test.bmp")

   Smtp1.Server = "mail.test.com"
   Smtp1.Send(msg)
End Sub

Private Sub Smtp1_BusyChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles Smtp1.BusyChanged
   If Smtp1.Busy Then
      label1.Text = "Socket is busy"
   Else
      label1.Text = "Socket is not busy"
   End If
End Sub
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

private void BusyTest()
{
   // Do something to cause the Busy event to be raised

   // Create a message
   MessageStream msg = new MessageStream();
   msg.To.Add(new MailAddress("you@test.com"));
   msg.From = new MailAddress("me@test.com");
   msg.Subject = "test";
   msg.Attachments.Add("C:\\test\\test.bmp");
   
   smtp1.Server = "mail.test.com";
   smtp1.Send(msg);
}

private void smtp1_BusyChanged(object sender, System.EventArgs e)
{
   // Check the Busy Property
   if(smtp1.Busy)
      label1.Text = "Socket is busy";
   else
      label1.Text = "Socket is not busy";
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="E:Dart.PowerTCP.Mail.Smtp.EndSend">
            <summary>
            Raised when the Smtp.BeginSend request completes.
            </summary><remarks>
				<p>This event is raised when the asynchronous method call Smtp.BeginSend completes. An SmtpEventArgs object will be passed into the event, containing information about the sent email message.</p>
				<p>If any errors occurred during the asynchronous operation, they would be returned in the SmtpEventArgs object, check SmtpEventArgs.Exception to check for any exception.</p>
				<p>For more information on using events using PowerTCP.NET within the Visual Studio.NET environment, see Using Events Within The Visual Studio.NET Environment.</p>
				<p>If you are using the Smtp component as a reference, you must create a method to handle the event yourself. To learn how to do this, see Using Events When The A Component Is Used As A Reference.
				</p>
				<p>This event MUST be implemented if you are using the Smtp.BeginSend method. See Using EndXXX Events for more information.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the Smtp.BeginSend method and the Smtp.EndSend event.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

Private Sub BeginSendTest()
   ' Begin to asynchronously send a message
   Smtp1.Server = "mail.test.com"
   Smtp1.BeginSend("you@test.com", "me@test.com", "test", "test message", Nothing)
End Sub

Private Sub Smtp1_EndSend(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureMail.SmtpEventArgs) Handles Smtp1.EndSend
   ' Send operation complete. Check to see if an exception was thrown during the operation.
   If e.Exception Is Nothing Then
      Debug.WriteLine("Send operation complete")
      Dim m As MailAddress
      For Each m In e.Response.Recipients
         Debug.WriteLine("Mail sent to " + m.Address)
      Next
   End If
End Sub
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

private void BeginSendTest()
{
   // Begin to asynchronously send a message
   smtp1.Server = "mail.test.com";
   smtp1.BeginSend("you@test.com", "me@test.com", "test", "test message", null);
}

private void smtp1_EndSend(object sender, Dart.PowerTCP.SecureMail.SmtpEventArgs e)
{
   // Send operation complete. Check to see if an exception was thrown during the operation.
   if(e.Exception == null)
   {
      Debug.WriteLine("Send operation complete");
      foreach(MailAddress m in e.Response.Recipients)
         Debug.WriteLine("Mail sent to " + m.Address);
    }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="E:Dart.PowerTCP.Mail.Smtp.Progress">
            <summary>
            Raised repeatedly while an email message is sent.
            </summary><remarks>
				<p>This event is raised repeatedly while an email message is sent. A ProgressEventArgs object will be passed into the event, containing data about the progress (such as bytes transferred, total bytes, etc).
				For more information on using events using PowerTCP.NET within the Visual Studio.NET environment, see Using Events Within The Visual Studio.NET Environment.</p>
				<p>The Smtp.Connection.SendBufferSize property controls how often this event will be raised.</p>
				<p>If you are using the Smtp component as a reference, you must create a method to handle the event yourself. To learn how to do this, see Using Events When A Component Is Used As A Reference.</p>
				<p>This event is useful for displaying progress information (perhaps in a ProgressBar object) to the user.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the Progress event to display information about the send operation.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

Private Sub ProgressTest()
   ' Do something to cause the Progress event to be raised
   Smtp1.Server = "mail.test.com"
   Smtp1.Send("you@test.com", "me@test.com", "test", "test message")
End Sub

Private Sub Smtp1_Progress(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureMail.ProgressEventArgs) Handles Smtp1.Progress
   ' Set the ProgressBar with progress info.
   ProgressBar1.Minimum = 0
   ProgressBar1.Minimum = e.Length
   ProgressBar1.Value = e.Position
End Sub
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

private void ProgressTest()
{
   // Do something to cause the Progress event to be raised
   smtp1.Server = "mail.test.com";
   smtp1.Send("you@test.com", "me@test.com", "test", "test message");
}

private void smtp1_Progress(object sender, Dart.PowerTCP.SecureMail.ProgressEventArgs e)
{
   // Set the ProgressBar with progress info.
   progressBar1.Minimum = 0;
   progressBar1.Maximum = (int)e.Length;
   progressBar1.Value = (int)e.Position;
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="E:Dart.PowerTCP.Mail.Smtp.ConnectedChanged">
            <summary>
            Raised when the value of the Object.Connected property changes.
            </summary><remarks>
				<p>This event is raised when the value of the Object.Connected property changes. The value of the Object.Connected property changes whenever a TCP connection to a resource
				is either made or closed.</p>
				<p>This event is useful in several scenarios, for example:</p>
				<ul>
					<li>Displaying the user when a connection has been terminated.</li>
					<li>Notifying the application if a connection has been terminated.</li>
				</ul>
				<p>If you are using the PowerTCP component as a reference, you must create a method to handle the event yourself. For more information on using events using PowerTCP.NET within the Visual Studio.NET environment, see Using Events In PowerTCP.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates the Smtp ConnectedChanged event.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

Private Sub ConnectedChangedTest()
   ' Do something to cause the ConnectedChanged event to be raised
   Smtp1.Server = "mail.test.com"
   Smtp1.Send("you@test.com", "me@test.com", "test", "test message")
End Sub

Private Sub Smtp1_ConnectedChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles Smtp1.ConnectedChanged
   Label1.Text = "Connected = " + Smtp1.Connected.ToString()
End Sub
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

private void ConnectedChangedTest()
{
   // Do something to cause the ConnectedChanged event to be raised
   smtp1.Server = "mail.test.com";
   smtp1.Send("you@test.com", "me@test.com", "test", "test message");
}

private void smtp1_ConnectedChanged(object sender, System.EventArgs e)
{
   label1.Text = "Connected = " + smtp1.Connected.ToString();		
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="E:Dart.PowerTCP.Mail.Smtp.ConnectedChangedEx">
            <summary>
            Raised when the value of the Object.Connected property changes. Supercedes the ConnectedChanged event.
            </summary><remarks>
				<p>This event is raised when the value of the Object.Connected property changes. The value of the Object.Connected property changes whenever a TCP connection to a resource
				is either made or closed.</p>
				<p>This event is useful in several scenarios, for example:</p>
				<ul>
					<li>Displaying the user when a connection has been terminated.</li>
					<li>Notifying the application if a connection has been terminated.</li>
				</ul>
				<p>If you are using the PowerTCP component as a reference, you must create a method to handle the event yourself. For more information on using events using PowerTCP.NET within the Visual Studio.NET environment, see Using Events In PowerTCP.</p>
			</remarks>
        </member>
        <member name="E:Dart.PowerTCP.Mail.Smtp.Trace">
            <summary>
            Raised when data has been sent/received.
            </summary><remarks>
				<p>This event is raised when commands or data has been sent/received. If you are using a component which uses TCP as the
				transport protocol a SegmentEventArgs object is passed into the event containing any commands or data sent or received.
				If you are using a component which uses UDP as the transport protocol a DatagramEventArgs object is passed into the event containing any commands
				or data sent or received.</p>
				<p>The Object.RawTrace event always reports actual data sent/received over the socket. The Count
				of each segment reflects the number of bytes actually written and received.
				The Object.Trace event reports data sent/received at a higher level. For example, for the
				Telnet component, Object.Trace reports data sent/received, but does not report
				IAC option sequences that are processed by TelnetStream, whereas Object.RawTrace
				allows you to trace the actual data sent/received, including Telnet option
				commands.
				</p>
				<p>If you are using the PowerTCP component as a reference, you must create a method to handle the event yourself. For more information on using events using PowerTCP.NET within the Visual Studio.NET environment, see Using Events In PowerTCP.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the Trace event to create a log of TCP communication.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

Private Sub TraceTest()
   ' Do something to cause the Trace event to be raised
   Smtp1.Server = "mail.test.com"
   Smtp1.Send("you@test.com", "me@test.com", "test", "test message")
End Sub

Private Sub Smtp1_Trace(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureMail.SegmentEventArgs) Handles Smtp1.Trace
   ' Get the data into a byte array
   Dim buffer() As Byte = System.Text.Encoding.Default.GetBytes(e.Segment.ToString())

   ' Create a FileStream
   Dim f As New FileStream("C:\test\smtptracevb.log", FileMode.Append)

   ' Write the data to the file.
   f.Write(buffer, 0, buffer.Length)
   f.Close()
End Sub
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

private void TraceTest()
{
   // Do something to cause the Trace event to be raised
   smtp1.Server = "mail.test.com";
   smtp1.Send("you@test.com", "me@test.com", "test", "test message");
}

private void smtp1_Trace(object sender, Dart.PowerTCP.SecureMail.SegmentEventArgs e)
{
   // Get the data into a byte array
   byte[] buffer = System.Text.Encoding.Default.GetBytes(e.Segment.ToString());
			
   // Create a FileStream
   FileStream f = new FileStream("C:\\test\\smtptracecsharp.log", FileMode.Append);

   // Write the data to the file.
   f.Write(buffer, 0, buffer.Length);
   f.Close();
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="E:Dart.PowerTCP.Mail.Smtp.BusyChanged">
            <summary>
			Raised when the value of the Object.Busy property changes.
			</summary><remarks>
				<p>This event is fired when the value of the Object.Busy property changes. The Object.Busy property changes
			when a method is executing that is occupying the TCP connection.
			</p>
				<p>This event is useful in several scenarios, for example:</p>
				<ul>
					<li>Displaying to the user when the PowerTCP component is busy.</li>
					<li>Taking action within your application when the PowerTCP component is no longer busy.</li>
				</ul>
				<p>If you are using the PowerTCP component as a reference, you must create a method to handle the event yourself.
			For more information on using events using PowerTCP.NET within the Visual Studio.NET environment, see Using Events In PowerTCP.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the BusyChanged event to see if the socket is busy.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

Private Sub BusyTest()
   ' Do something to cause the Busy event to be raised
        
   ' Create a message
   Dim msg As New MessageStream()
   msg.To.Add(New MailAddress("you@test.com"))
   msg.From = New MailAddress("me@test.com")
   msg.Subject = "test"
   msg.Attachments.Add("C:\test\test.bmp")

   Smtp1.Server = "mail.test.com"
   Smtp1.Send(msg)
End Sub

Private Sub Smtp1_BusyChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles Smtp1.BusyChanged
   If Smtp1.Busy Then
      label1.Text = "Socket is busy"
   Else
      label1.Text = "Socket is not busy"
   End If
End Sub
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

private void BusyTest()
{
   // Do something to cause the Busy event to be raised

   // Create a message
   MessageStream msg = new MessageStream();
   msg.To.Add(new MailAddress("you@test.com"));
   msg.From = new MailAddress("me@test.com");
   msg.Subject = "test";
   msg.Attachments.Add("C:\\test\\test.bmp");
   
   smtp1.Server = "mail.test.com";
   smtp1.Send(msg);
}

private void smtp1_BusyChanged(object sender, System.EventArgs e)
{
   // Check the Busy Property
   if(smtp1.Busy)
      label1.Text = "Socket is busy";
   else
      label1.Text = "Socket is not busy";
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Smtp.Recipients">
            <summary>
			Use this property to add recipients that will be used for the "RCPT TO" portion of the SMTP envelope.
			</summary><remarks>
			<p>The SMTP envelope specifies where the email message is sent. If "bob@test.com" is
			added to the Smtp.Recipients collection, and "jane@test.com" is added as a message header field
			(perhaps by using the Message.To property) mail will be sent to "bob@test.com" only. 
			If the Smtp.Recipients collection is empty, and "jane@test.com" is added as a message header line
			(by using the Message.To property) the SMTP envelope will be derived by the message header
			and mail will be sent to "jane@test.com".</p>
			<p>Use this property if you want to explicitly specify the recipient in the SMTP envelope.
			The value of this property will NOT be added as a message header line.
			</p>
			</remarks><value>
				A MessageAddresses collection specifying the email addresses of the recipients
				that will be included in the SMTP envelope.
			</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the Smtp component to override the
addresses used for the SMTP envelope.
	</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' First create a message
Dim msg As New MessageStream()

' Add a "TO:" header line
msg.To.Add(New MailAddress("you@test.com"))

' Add a "FROM:" header line
msg.From = New MailAddress("me@test.com")

' Add a "SUBJECT:" header line
msg.Subject = "Test"

' Add some text
msg.Text = "test message"

' If the message is sent now, "me@test.com" would be sent after the SMTP
' "MAIL FROM" command and "you@test.com" would be sent after the SMTP "RCPT
' TO" command. You can override this, however, by explicitly setting the 
' addresses that will be used for the SMTP envelope as the following code demonstrates.

' Explicitly specify the email to use for "MAIL FROM" (This will NOT be included in the header)
Smtp1.MailFrom = New MailAddress("sender@test.com")

' Explicitly specify the email to use for "RCPT TO"; (This will NOT be included in the header)
Smtp1.Recipients.Add(New MailAddress("receiver@test.com"))

' Send the message, this will return an SmtpResult object
Smtp1.Server = "mail.test.com"
Dim result As SmtpResult = Smtp1.Send(msg)

' Check the information about the message sent
Debug.WriteLine("Bytes of data Sent: " + result.SentLength)
Dim ma As MailAddress
For Each ma In result.Recipients
   Debug.WriteLine("Mail sent to: " + ma.Address)
Next

' Output
' --------------------------------
' Bytes of data sent: 477
' Mail sent to: &lt;receiver@test.com&gt;
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// First create a message
MessageStream msg = new MessageStream();

// Add a "TO:" header line
msg.To.Add(new MailAddress("you@test.com"));

// Add a "FROM:" header line
msg.From = new MailAddress("me@test.com");

// Add a "SUBJECT:" header line
msg.Subject = "Test";

// Add some text
msg.Text = "test message";

// If the message is sent now, "me@test.com" would be sent after the SMTP
// "MAIL FROM" command and "you@test.com" would be sent after the SMTP "RCPT
// TO" command. You can override this, however, by explicitly setting the 
// addresses that will be used for the SMTP envelope as the following code demonstrates.

// Explicitly specify the email to use for "MAIL FROM" (This will NOT be included in the header)
smtp1.MailFrom = new MailAddress("sender@test.com");

// Explicitly specify the email to use for "RCPT TO"; (This will NOT be included in the header)
smtp1.Recipients.Add(new MailAddress("receiver@test.com"));

// Send the message, this will return an SmtpResult object
smtp1.Server = "mail.dart.com";
SmtpResult result = smtp1.Send(msg);

// Check the information about the message sent
Debug.WriteLine("Bytes of data Sent: " + result.SentLength);
foreach(MailAddress ma in result.Recipients)
   Debug.WriteLine("Mail sent to: " + ma.Address);

// Output
// --------------------------------
// Bytes of data sent: 477
// Mail sent to: &lt;receiver@test.com&gt;
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Smtp.MailFrom">
            <summary>
			Use this property to specify the return address that will be used for the "MAIL FROM" SMTP envelope.
			</summary><remarks>
			<p>If set, this property will be used for the "MAIL FROM" portion of the SMTP envelope. If not set, the
			"MAIL FROM" will be derived from the "FROM" header line.</p>
			<p>Use this property if you want to explicitly specify the return address in the SMTP envelope.
			The value of this property will NOT be added as a message header line.
			</p>
			</remarks><value>
				A string representing the return address to be used in the SMTP envelope.
			</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the Smtp component to override the
addresses used for the SMTP envelope.
	</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' First create a message
Dim msg As New MessageStream()

' Add a "TO:" header line
msg.To.Add(New MailAddress("you@test.com"))

' Add a "FROM:" header line
msg.From = New MailAddress("me@test.com")

' Add a "SUBJECT:" header line
msg.Subject = "Test"

' Add some text
msg.Text = "test message"

' If the message is sent now, "me@test.com" would be sent after the SMTP
' "MAIL FROM" command and "you@test.com" would be sent after the SMTP "RCPT
' TO" command. You can override this, however, by explicitly setting the 
' addresses that will be used for the SMTP envelope as the following code demonstrates.

' Explicitly specify the email to use for "MAIL FROM" (This will NOT be included in the header)
Smtp1.MailFrom = New MailAddress("sender@test.com")

' Explicitly specify the email to use for "RCPT TO"; (This will NOT be included in the header)
Smtp1.Recipients.Add(New MailAddress("receiver@test.com"))

' Send the message, this will return an SmtpResult object
Smtp1.Server = "mail.test.com"
Dim result As SmtpResult = Smtp1.Send(msg)

' Check the information about the message sent
Debug.WriteLine("Bytes of data Sent: " + result.SentLength)
Dim ma As MailAddress
For Each ma In result.Recipients
   Debug.WriteLine("Mail sent to: " + ma.Address)
Next

' Output
' --------------------------------
' Bytes of data sent: 477
' Mail sent to: &lt;receiver@test.com&gt;
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// First create a message
MessageStream msg = new MessageStream();

// Add a "TO:" header line
msg.To.Add(new MailAddress("you@test.com"));

// Add a "FROM:" header line
msg.From = new MailAddress("me@test.com");

// Add a "SUBJECT:" header line
msg.Subject = "Test";

// Add some text
msg.Text = "test message";

// If the message is sent now, "me@test.com" would be sent after the SMTP
// "MAIL FROM" command and "you@test.com" would be sent after the SMTP "RCPT
// TO" command. You can override this, however, by explicitly setting the 
// addresses that will be used for the SMTP envelope as the following code demonstrates.

// Explicitly specify the email to use for "MAIL FROM" (This will NOT be included in the header)
smtp1.MailFrom = new MailAddress("sender@test.com");

// Explicitly specify the email to use for "RCPT TO"; (This will NOT be included in the header)
smtp1.Recipients.Add(new MailAddress("receiver@test.com"));

// Send the message, this will return an SmtpResult object
smtp1.Server = "mail.dart.com";
SmtpResult result = smtp1.Send(msg);

// Check the information about the message sent
Debug.WriteLine("Bytes of data Sent: " + result.SentLength);
foreach(MailAddress ma in result.Recipients)
   Debug.WriteLine("Mail sent to: " + ma.Address);

// Output
// --------------------------------
// Bytes of data sent: 477
// Mail sent to: &lt;receiver@test.com&gt;
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Smtp.Server">
            <summary>
           		 Gets or sets the SMTP server hostname or address.
			</summary><remarks>
				<p>Used to identify the SMTP resource either by hostname (that is resolved by DNS) or dot address (of the form 11.22.33.44).
				The object always checks this property, so you can change it at any time and subsequent sessions will be automatically
				established with the correct server.</p>
				<p>The Smtp component was designed to automatically log in to the server when any communication with the server needs to take place. In order for this to occur the Smtp.Server property has to be set to valid values.  Once this has been done, the user will be automatically logged in transparently.
					If the mail server is listening on a port ouside
					of the RFC spcification (i.e., not port 25) this can be set using the Smtp.Connection.Connect.
				</p>
				<p>You must set the Smtp.Server property before proper use.</p>
			</remarks><value>
				 A string value representing the SMTP server to which the connection will be made.
			</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates creating a basic MIME message with a single attachment.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Create a MessageStream object
Dim msg As New MessageStream()

' Add a normal recipient
msg.To.Add(New MailAddress("you@test.com"))

' Add a CC recipient
msg.CC.Add(New MailAddress("you2@test.com"))

' Add a BCC recipient
msg.BCC.Add(New MailAddress("you3@test.com"))

' Specify the sender
msg.From = New MailAddress("me@test.com")

' Specify the subject
msg.Subject = "Hello"

' Add some text to the message.
msg.Text = "Hi everyone. How are ya doing?"

' Add an attachment
msg.Attachments.Add("C:\files\graph.jpg")

' Specify the server
Smtp1.Server = "mail.test.com"

' Send the message
Smtp1.Send(msg)
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Create a MessageStream object
MessageStream msg = new MessageStream();

// Add a normal recipient
msg.To.Add(new MailAddress("you@test.com"));

// Add a CC recipient
msg.CC.Add(new MailAddress("you2@test.com"));

// Add a BCC recipient
msg.BCC.Add(new MailAddress("you3@test.com"));

// Specify the sender
msg.From = new MailAddress("me@test.com");

// Specify the subject
msg.Subject = "Hello";

// Add some text to the message.
msg.Text = "Hi everyone. How are ya doing?";

// Add an attachment
msg.Attachments.Add("C:\\files\\graph.jpg");

// Specify the server
smtp1.Server = "mail.test.com";

// Send the message
smtp1.Send(msg);
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Smtp.ServerPort">
            <summary>
        		Gets or sets the SMTP server port.
			</summary><remarks>
				<p>Used to identify the SMTP server port, which is the "well-known" port 25 by convention.
				 The object always checks this property, so you can change it at any time and subsequent sessions will be automatically
				established with the correct port.</p>
			</remarks><value>
				An integer value representing the port of the SMTP server to which the connection will be made. Defaults to 25.
			</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates use of the Smtp component when dealing with 
a client or server which does not use common protocol settings.
				</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Set the username (usually not required).
Smtp1.Username = "myusername"

' Set the password (usually not required).
Smtp1.Password = "mypass"

' Set the client interface (this overrides the default interface)
Smtp1.Client = "111.222.111.222"
Smtp1.ClientPort = 8123

' Set the server
Smtp1.Server = "mail.test.com"

' Set the server port (this defaults to 25, the well-known port for SMTP)
Smtp1.ServerPort = 9876

' Send a message
Smtp1.Send("you@test.com", "me@test.com", "test", "test message")
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Set the username (usually not required).
smtp1.Username = "myusername";

// Set the password (usually not required).
smtp1.Password = "mypass";

// Set the client interface (this overrides the default interface)
smtp1.Client = "111.222.111.222";
smtp1.ClientPort = 8123;

// Set the server
smtp1.Server = "mail.test.com";

// Set the server port (this defaults to 25, the well-known port for SMTP)
smtp1.ServerPort = 9876;

// Send a message
smtp1.Send("you@test.com", "me@test.com", "test", "test message");
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Smtp.SynchronizingObject">
            <summary>Set this object to automatically control thread marshalling between worker threads and the main UI thread.</summary><value>
				If used, the main UI thread object; null if unused.
			</value><remarks>
				<p>Any application that (1) uses multithreading (for example, an application which uses an asynchronous BeginXXX method)
				and (2) must update a shared UI element on the main UI thread (such as a ListView object) from one of these worker threads must set this
				property to the value of the main UI thread object. If the application meets both of these requirements and
				this property is NOT set, you may see strange behavior in your application (such as strange exceptions or improper UI element values).</p>
				<p>If you do not know whether or not you need to use this property, simply take the failsafe
				approach when programming Windows applications and always set this property to the Main Form object.
				If any thread marshalling has to occur between a worker thread and the UI thread, it will occur automatically.</p>
				<p>Provides data for the CollectionChanged event.


					<b>NOTE for server implementations:</b> If you are using a PowerTCP server component to build a server application, you
				do not want to set this property (as it will cause the server application to become single-threaded). Instead, you want to use
				the Control.BeginInvoke method to thread-marshall to the main UI thread (see any of the installed sample server applications for an example of this).</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Smtp.Client">
            <summary>
				Gets or sets the client hostname or address when a specific interface binding is desired.
			</summary><remarks>
				<p>Set this property to either a dot address ("111.111.111.111") or a hostname (which will be resolved by DNS).</p>
				<p>Normally, the default interface binding is chosen. Use this property to override the default behavior, which is to bind to the first (default) adapter.</p>
			</remarks><value>
				A string representing a host name or dot address if a specific interface binding is desired, or a zero-length string.
			</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates use of the Smtp component when dealing with 
a client or server which does not use common protocol settings.
				</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Set the username (usually not required).
Smtp1.Username = "myusername"

' Set the password (usually not required).
Smtp1.Password = "mypass"

' Set the client interface (this overrides the default interface)
Smtp1.Client = "111.222.111.222"
Smtp1.ClientPort = 8123

' Set the server
Smtp1.Server = "mail.test.com"

' Set the server port (this defaults to 25, the well-known port for SMTP)
Smtp1.ServerPort = 9876

' Send a message
Smtp1.Send("you@test.com", "me@test.com", "test", "test message")
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Set the username (usually not required).
smtp1.Username = "myusername";

// Set the password (usually not required).
smtp1.Password = "mypass";

// Set the client interface (this overrides the default interface)
smtp1.Client = "111.222.111.222";
smtp1.ClientPort = 8123;

// Set the server
smtp1.Server = "mail.test.com";

// Set the server port (this defaults to 25, the well-known port for SMTP)
smtp1.ServerPort = 9876;

// Send a message
smtp1.Send("you@test.com", "me@test.com", "test", "test message");
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Smtp.ClientPort">
            <summary>
				Gets or sets the client port when a specific local port is desired. 
			</summary><remarks>
				<p>Set this property to any value between 1 and 65535 to specify the local port for the connection.
				This property is often useful if for some reason the client machine is limited in the ports that can be used to make connections. This is often the case in intranet environments where client are restricted or firewalled for security purposes.</p>
			</remarks><value>
				 An integer value indicating the client port to use when a specific local port is desired; 0 indicates that any port can be used. The default is 0.
			</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates use of the Smtp component when dealing with 
a client or server which does not use common protocol settings.
				</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Set the username (usually not required).
Smtp1.Username = "myusername"

' Set the password (usually not required).
Smtp1.Password = "mypass"

' Set the client interface (this overrides the default interface)
Smtp1.Client = "111.222.111.222"
Smtp1.ClientPort = 8123

' Set the server
Smtp1.Server = "mail.test.com"

' Set the server port (this defaults to 25, the well-known port for SMTP)
Smtp1.ServerPort = 9876

' Send a message
Smtp1.Send("you@test.com", "me@test.com", "test", "test message")
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Set the username (usually not required).
smtp1.Username = "myusername";

// Set the password (usually not required).
smtp1.Password = "mypass";

// Set the client interface (this overrides the default interface)
smtp1.Client = "111.222.111.222";
smtp1.ClientPort = 8123;

// Set the server
smtp1.Server = "mail.test.com";

// Set the server port (this defaults to 25, the well-known port for SMTP)
smtp1.ServerPort = 9876;

// Send a message
smtp1.Send("you@test.com", "me@test.com", "test", "test message");
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Smtp.HelloName">
            <summary>Gets or sets the hostname presented to the server during the greeting</summary><remarks>
				<p>The hello command (HELO) is sent when communication begins with the mail server. Typically
				the value presented after HELO is the domain.</p>
			</remarks><value>A string value representing the hostname presented to the server during the greeting.</value>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Smtp.Timeout">
            <summary>
				Specifies the maximum number of milliseconds to wait for responses to commands or time between data buffer transfers.
			</summary><remarks>
				<p>After connecting to a server, this value is used to establish the period of time to wait for
			server responses. During data transfer operations, a <a href="ms-help://MS.MSDNVS/cpref/html/frlrfSystemNetSocketsSocketExceptionClassTopic.htm">SocketException</a> will
			be thrown if any data buffer transfer
			operation does not complete within the timeout period.</p>
			</remarks><value>
				 An integer specifying the maximum number of milliseconds to wait for responses to commands.
			</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates properties of the Smtp component.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Don't ask the server if the message is too large.
Smtp1.AutoSize = False

' Only wait 10 seconds for a response
Smtp1.Timeout = 10000

' Send a message
Smtp1.Server = "mail.test.com"
Smtp1.Send("you@test.com", "me@test.com", "test", "test message"
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Don't ask the server if the message is too large.
smtp1.AutoSize = false;

// Only wait 10 seconds for a response
smtp1.Timeout = 10000;

// Send a message
smtp1.Server = "mail.test.com";
smtp1.Send("you@test.com", "me@test.com", "test", "test message");
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Smtp.Username">
            <summary>
          		Gets or sets the username used during session login.
			</summary><remarks>
				<p>If set, the value of this property is automatically sent during session login.</p>
				<p>Most SMTP servers do not require use of a username or password. Set this property if you need to 
				connect with an SMTP server that DOES require a username/password.</p>
			</remarks><value>
				A string value representing the username to be issued during session login.
			</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates use of the Smtp component when dealing with 
a client or server which does not use common protocol settings.
				</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Set the username (usually not required).
Smtp1.Username = "myusername"

' Set the password (usually not required).
Smtp1.Password = "mypass"

' Set the client interface (this overrides the default interface)
Smtp1.Client = "111.222.111.222"
Smtp1.ClientPort = 8123

' Set the server
Smtp1.Server = "mail.test.com"

' Set the server port (this defaults to 25, the well-known port for SMTP)
Smtp1.ServerPort = 9876

' Send a message
Smtp1.Send("you@test.com", "me@test.com", "test", "test message")
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Set the username (usually not required).
smtp1.Username = "myusername";

// Set the password (usually not required).
smtp1.Password = "mypass";

// Set the client interface (this overrides the default interface)
smtp1.Client = "111.222.111.222";
smtp1.ClientPort = 8123;

// Set the server
smtp1.Server = "mail.test.com";

// Set the server port (this defaults to 25, the well-known port for SMTP)
smtp1.ServerPort = 9876;

// Send a message
smtp1.Send("you@test.com", "me@test.com", "test", "test message");
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Smtp.Password">
            <summary>
          		Gets or sets the password used during session login.
			</summary><remarks>
				<p>If set, the value of this property is automatically sent during session login.</p>
				<p>Most SMTP servers do not require use of a username or password. Set this property if you need to 
				connect with an SMTP server that DOES require a username/password.</p>
			</remarks><value>
				A string value representing the password to be issued during session login.
			</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates use of the Smtp component when dealing with 
a client or server which does not use common protocol settings.
				</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Set the username (usually not required).
Smtp1.Username = "myusername"

' Set the password (usually not required).
Smtp1.Password = "mypass"

' Set the client interface (this overrides the default interface)
Smtp1.Client = "111.222.111.222"
Smtp1.ClientPort = 8123

' Set the server
Smtp1.Server = "mail.test.com"

' Set the server port (this defaults to 25, the well-known port for SMTP)
Smtp1.ServerPort = 9876

' Send a message
Smtp1.Send("you@test.com", "me@test.com", "test", "test message")
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Set the username (usually not required).
smtp1.Username = "myusername";

// Set the password (usually not required).
smtp1.Password = "mypass";

// Set the client interface (this overrides the default interface)
smtp1.Client = "111.222.111.222";
smtp1.ClientPort = 8123;

// Set the server
smtp1.Server = "mail.test.com";

// Set the server port (this defaults to 25, the well-known port for SMTP)
smtp1.ServerPort = 9876;

// Send a message
smtp1.Send("you@test.com", "me@test.com", "test", "test message");
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>		
        </member>
        <member name="P:Dart.PowerTCP.Mail.Smtp.AutoSize">
            <summary>
          		Gets or sets a value indicating if the server will be asked if the message is too large before sending.
			</summary><remarks>
				<p>The advent of MIME, which introduced the transfer of greater amounts of non-ASCII files, resulted in much larger data load for SMTP
				servers. The SIZE command was introduced as a way for a server to announce the maximum file size it would accept and for a client
				to announce the size of data it is about to send. When a client announces the size of the data, the server then has an opportunity
				to accept or reject the data. If the SMTP server supports the SIZE command, Smtp.AutoSize controls whether or not this announcement is made.</p>
				<p>If you are sending mail using a server that supports the SIZE command, set this value to false to keep the client from
				announcing the size of the data that will be sent.</p>
			</remarks><value>
				true if the server should be asked if the message is too large before sending, false otherwise. Defaults to true.
			</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates properties of the Smtp component.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Don't ask the server if the message is too large.
Smtp1.AutoSize = False

' Only wait 10 seconds for a response
Smtp1.Timeout = 10000

' Send a message
Smtp1.Server = "mail.test.com"
Smtp1.Send("you@test.com", "me@test.com", "test", "test message"
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Don't ask the server if the message is too large.
smtp1.AutoSize = false;

// Only wait 10 seconds for a response
smtp1.Timeout = 10000;

// Send a message
smtp1.Server = "mail.test.com";
smtp1.Send("you@test.com", "me@test.com", "test", "test message");
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>		
        </member>
        <member name="P:Dart.PowerTCP.Mail.Smtp.Connected">
            <summary>
				Gets the connected state of the connection.
			</summary><remarks>
				<p>If the PowerTCP component is connected to a remote resource AND authenticated, this property returns true. If this property is false, the connection was either never connected, is no longer connected, or is connected but not yet authenticated.
				When receiving data from the server, this property is a good way to tell if all data has been received. Keep receiving data in a loop until this property equals false.
				</p>
				<p>When using PowerTCP components which make use of the Tcp component as the underlying connection, this 
				property returns the same value as the Object.Connection.Connected property (where Object.Connection exposes the Tcp object used for the connection).</p>
				<p>The Object.ConnectedChanged and Object.ConnectedChangedEx events are raised whenever this property changes.</p>
			</remarks><value>
				true if the TCP connection is connected to a remote resource and authenticated; otherwise, false.
			</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates closing the Smtp component's connection.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' First check if the Smtp component is connected
If Smtp1.Connected Then
   Try
      ' Try to close gracefully
      Smtp1.Close()
   Catch ex As Exception
      ' If an error occurs here, just abruptly close.
      Smtp1.Dispose()
   End Try
End If
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// First check if the Smtp component is connected
if(smtp1.Connected)
{
   try
   {
      // Try to close gracefully
      smtp1.Close();
   }
   catch(Exception ex)
   {
      // If an error occurs here, just abruptly close.
      smtp1.Dispose();
   }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Smtp.Connection">
            <summary>
				Gets the Tcp component instance used for the connection.
			</summary><remarks>
				<p>Many PowerTCP components use the Tcp component for the connection. This property exposes that object, allowing such actions as sending server requests directly over the TCP connection or getting information about the socket (such as local/remote IP addresses).
				If you need to communicate with a proxy server, set the properties of Object.Connection.Proxy to enable proxy communication.
				In addition, Object.Connection.Send can be used to send any command to the server.</p>
				<p>Use the Object.Connection property to directly access the TCP connection. This could be useful if:</p>
				<ul>
					<li>You need to use the Tcp.Proxy object to communicate with proxy servers.</li>
					<li>You wish to display information about the socket endpoints to the user (local/remote IP addresses, for example).</li>
					<li>You want to use the Tcp object used by the PowerTCP component as an initializer for the TraceForm.</li>
					<li>You wish to capture trace information by using the Tcp.Trace event.</li>
					<li>You wish to close the connection.</li>
				</ul>
			</remarks><value>
				The Tcp instance that the PowerTCP component uses for the connection. 
			</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the exposed TCP connection to send commands to an SMTP server.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Connect to the server
Smtp1.Connection.Connect("mail.test.com", 25)

' Receive the response. (Don't have to do anything with it).
Smtp1.Connection.Receive()

' Send EHLO command.
Smtp1.Connection.Send("EHLO myserver" + vbCrLf)

' Recieve the response. (Don't have to do anything with it).
Smtp1.Connection.Receive()

' Get HELP on a command. 
Smtp1.Connection.Send("HELP EHLO" + vbCrLf)

' Receive the response into a string.
Dim s As String = Smtp1.Connection.Receive().ToString()

' Display the response.
Debug.WriteLine(s)

' Send QUIT command.
Smtp1.Connection.Send("QUIT" + vbCrLf)

' Receive the response.
Smtp1.Connection.Receive()
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Connect to the server
smtp1.Connection.Connect("mail.test.com", 25);
			
// Receive the response. (Don't have to do anything with it).
smtp1.Connection.Receive();

// Send EHLO command.
smtp1.Connection.Send("EHLO myserver\r\n");

// Recieve the response. (Don't have to do anything with it).
smtp1.Connection.Receive();

// Get HELP on a command. 
smtp1.Connection.Send("HELP EHLO\r\n");

// Receive the response into a string.
string s = smtp1.Connection.Receive().ToString();
			
// Display the response.
Debug.WriteLine(s);

// Send QUIT command.
smtp1.Connection.Send("QUIT\r\n");

// Receive the response.
smtp1.Connection.Receive();
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Smtp.DSN">
            <summary>
				Returns the DeliveryStatusNotification object that controls DSN use.
			</summary><remarks>
				<p>Because the support for notification of the success or failure of a sent message was quite limited, 
				RFC 1891 defined an extension to the SMTP protocol to allow for Delivery Status Notification, or DSN.
				DSN allows much greater control over what conditions should the sender be notified and the construction of 
				the notification itself. This was achieved by extending the SMTP <i>RCPT</i> and <i>MAIL</i> commands to
				allow the specification of notification parameters. These parameters include:</p>
				<ul>
				<li>A <i>NOTIFY</i> parameter (appended to RCPT command) to specify under what conditions the sender should be notified (<i>NEVER</i>, <i>SUCCESS</i>, <i>FAILURE</i>, or <i>DELAY</i>).</li>
				<li>A <i>RET</i> parameter (appended to MAIL command) to specify whether or not the message should be included in the DSN.</li>
				<li>A <i>ENVID</i> parameter (appended to MAIL command) specifying an envelope identifier to be transmitted with the DSN.</li>
				<li>A <i>ORCPT</i> parameter (appended to RCPT command) specifying the original recipient.</li>
				</ul>
				<p>The properties of the DeliveryStatusNotification object control the use of these parameters:</p>
				<ul>
				<li>Set DeliveryStatusNotification.Type to specify under what conditions a DSN should be sent (DSNType.Default, DSNType.Delay, DSNType.Failure, DSNType.Never, or DSNType.Success). </li>
				<li>Set DeliveryStatusNotification.ReturnMessage to true to specify that the entire message should be included with the DSN, and false if only the header should be included.</li>
				<li>Set DeliveryStatusNotification.EnvelopeID to the envelope identifier to be transmitted with the DSN.</li>
				</ul>
				<p>Once the properties of the DeliveryStatusNotification object have been set, all DSN related communication
				will occur transparently. The ORCPT parameter is automatically added and set to the recipient.</p>
			</remarks><value>
				The DeliveryStatusNotification object to control DNS use.
			</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the DeliveryStatusNotification class to send an email with DSN.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.SecureMail"
' at the top of your class.

' Specify a DSN ID to use.
Smtp1.DSN.EnvelopeID = "ID1234567"

' Specify to return the entire message instead of the headers.
Smtp1.DSN.ReturnMessage = True

' Send a DSN on failure or delay.
Smtp1.DSN.Type = DSNType.Delay Or DSNType.Failure

' Send a message
Smtp1.Server = "mail@test.com"
Smtp1.Send("you@test.com", "me@test.com", "Test", "test message")
<span class="lang">[C#]</span>
// Be sure to import the namespace by putting "using Dart.PowerTCP.SecureMail;"
// at the top of your class.

// Specify a DSN ID to use.
smtp1.DSN.EnvelopeID = "ID1234567";

// Specify to return the entire message instead of the headers.
smtp1.DSN.ReturnMessage = true;

// Send a DSN on failure or delay.
smtp1.DSN.Type = DSNType.Delay | DSNType.Failure; 

// Send a message
smtp1.Server = "mail.test.com";
smtp1.Send("you@test.com", "me@test.com", "Test", "test message");
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Smtp.DoEvents">
            <summary>
				  Gets or sets a value that controls the processing of events during blocking method calls.
			</summary><remarks>
				<p>When performing a synchronous (blocking) method, PowerTCP will process user-interface events (such as window painting)
            if this property is set to true AND the current thread has an event message queue.
            If no message queue is present (such as on an ASP page or under any worker thread), the value of this property has no effect.
            This property is used only for synchronous methods. Object.DoEvents is not needed if using asynchronous methods because the asynchronous method will execute on a different thread, allowing the UI thread to continue working unblocked.</p>
				<p>For example, this property is beneficial when an interactive application is being used and the user may want to abort a currently processing operation by clicking an "Abort" button.
			If Object.DoEvents is set to false, this will not be possible.
			Set the Object.DoEvents property to true and the application will respond to other events (such as button clicks) during synchronous operations.
			</p>
			</remarks><value>
				true if user-interface events should be processed during synchronous method calls; otherwise, false. The default value is true.
			</value>
        </member>
        <member name="T:SmtpEditor">
            <summary>
            SmtpEditor
            </summary>
        </member>
        <member name="M:SmtpEditor.#ctor">
            <summary>
            Initialize a new instance of SmtpEditor
            </summary>
        </member>
        <member name="M:SmtpEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            EditValue
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SmtpEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            GetEditStyle
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:SmtpEditorForm">
            <summary>
            Summary description for SmtpEditorForm.
            </summary>
        </member>
        <member name="M:SmtpEditorForm.#ctor(Dart.PowerTCP.Mail.Smtp)">
            <summary>
            Initialize a new instance of SmtpEditorForm
            </summary>
            <param name="smtp"></param>
        </member>
        <member name="M:SmtpEditorForm.Dispose">
            <summary>
            Release all system resources.
            </summary>
        </member>
        <member name="M:SmtpEditorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:SmtpEditorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SmtpLicenseProvider">
            <summary>
            Summary description for SmtpLicenseProvider.
            </summary>
        </member>
        <member name="T:Dart.PowerTCP.Mail.InvalidParameterTypeException">
            <summary>
            Thrown whenever a method is called with an invalid parameter.
            </summary>
            <remarks>
            This exception is thrown if a method is called with a parameter of the wrong type.
            To keep this exception from being thrown read the documentation on the function throwing the exception.
            </remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.InvalidParameterTypeException.#ctor">
            <summary>
            Initializes a new instance of InvalidParameterTypeException.
            </summary>
        </member>
        <member name="M:Dart.PowerTCP.Mail.InvalidParameterTypeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of InvalidParameterTypeException.
            </summary>
        </member>
        <member name="M:Dart.PowerTCP.Mail.InvalidParameterTypeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of InvalidParameterTypeException.
            </summary>
        </member>
        <member name="M:Dart.PowerTCP.Mail.InvalidParameterTypeException.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the InvalidParameterException class.
            </summary>
        </member>
        <member name="M:Dart.PowerTCP.Mail.InvalidParameterTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of InvalidParameterTypeException.
            </summary>
        </member>
        <member name="T:Dart.PowerTCP.Mail.ProtocolException">
            <summary>
            Used to throw protocol exceptions for upper-layer protocols like FTP, SMTP and POP3.
            </summary>
            <remarks><p>This exception is thrown when a server response is negative. For example, 
            if the server returned "500" (indicating a syntax error) as response to a command being 
            sent, a ProtocolException would be thrown.</p></remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.ProtocolException.#ctor">
            <summary>
            Initializes a new instance of the ProtocolException class.
            </summary>
        </member>
        <member name="M:Dart.PowerTCP.Mail.ProtocolException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ProtocolException class.
            </summary>
        </member>
        <member name="M:Dart.PowerTCP.Mail.ProtocolException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the ProtocolException class.
            </summary>
        </member>
        <member name="M:Dart.PowerTCP.Mail.ProtocolException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the ProtocolException class.
            </summary>
        </member>
        <member name="T:Dart.PowerTCP.Mail.ProxyType">
            <summary>
            Enumerates the supported proxy types.
            </summary>
            <remarks>
            <p>This enumeration is used by the Proxy property.</p>
            <p>Set the Proxy.Type property to the proper ProxyType of your proxy server before calling any method that requires communication with the server.</p>
            </remarks>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ProxyType.None">
            <summary>
            No proxy server is used.
            </summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ProxyType.Socks4">
            <summary>
            SOCKS v4 proxy.
            </summary>
        </member>
        <member name="F:Dart.PowerTCP.Mail.ProxyType.Socks5">
            <summary>
            SOCKS v5 proxy.
            </summary>
        </member>
        <member name="T:Dart.PowerTCP.Mail.ConnectEventHandler">
            
            <summary>
            Represents the method (event handler) that is raised when the BeginConnect operation completes.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A ExceptionEventArgs object that contains the event data.</param>
            <remarks>
            <p>As Microsoft describes in their MSDN documentation, the event model in the .NET Framework is based on having an event delegate that connects an event with its handler. To raise an event, two elements are needed: 
            <ul type="disc">
            <li>A class that holds the event data. This class must derive from the base class <a href="ms-help://MS.MSDNVS/cpref/html/frlrfsystemeventargsclasstopic.htm">EventArgs</a>.</li>
            <li>A delegate that points to a method that provides the response to the event.</li>
            </ul>
            When using the BeginConnect method, the class that holds the event data is the ExceptionEventArgs class. A method must be created with the same signature as the delegate. In this example that would mean a method would have to be defined to accept two arguments (an object and a ExceptionEventArgs) and return void.
            Once this has been done, the delegate must be "connected" to the handling event. This is done by adding an instance of the delegate to the event.
            </p>
            <p>For more information about event handler delegates, see the Using Events In PowerTCP topic.</p>
            </remarks>
        </member>
        <member name="T:Dart.PowerTCP.Mail.ExceptionEventArgs">
            <summary>
            Provides data for asynchronous event handlers.
            </summary>
            <remarks><p>A <b>ExceptionEventArgs</b> object is passed into asynchronous event handlers after an asynchronous operation has completed. 
            If an exception occurred during the asynchronous operation, it is returned in ExceptionEventArgs.Exception.</p>
            <p>For more information on implementing and handling events using PowerTCP.NET, see the topic, "Events in PowerTCP".</p>
            </remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.ExceptionEventArgs.#ctor(System.Exception,System.Object)">
            <summary>
            Initialize default instance of the ExceptionEventArgs class.
            </summary>
            <param name="exception"></param>
            <param name="state"></param>
        </member>
        <member name="P:Dart.PowerTCP.Mail.ExceptionEventArgs.Exception">
            <summary>
				Gets any exception which occurred during the asynchronous operation.
			</summary><remarks>
				<p>Check this property to tell if an exception occurred during the asynchronous operation. If this property is null, no exception occurred.</p>
				<p>The exception property is useful for checking exceptions and handling them appropriately. For example, if a bad command was sent to the server, a ProtocolException may be thrown. You could check this property to see if it was of type ProtocolException, than handle appropriately.</p>
			</remarks><value>
				If any exception occurred during the asynchronous operation, this property will contain an Exception object describing the exception.
			</value>
        </member>
        <member name="P:Dart.PowerTCP.Mail.ExceptionEventArgs.State">
            <summary>
				Gets the object that was included as part of the associated method call. 
			</summary><remarks>
				<p>The EndEventArgs.State property can be used in the calling asynchronous method to make data accessible
				to the handling event.</p>
				<p>This property is useful for making data accessible to the handling event. Since asynchronous methods are "disconnected" (meaning that when one is called, it executes on it's own and returns in the event handler) data that you were using in the code that called the asynchronous method may not be available in the event handler. Simply pass this data in as <i>state</i> when calling the asynchronous method (usually a BeginXXX method) and it is available in the event handler.
				If you do not wish to make an object accessible in the EndXXX event, simple pass in null as <i>state</i>.</p>
			</remarks><value>
				An object containing data passed into the calling asynchronous method.
			</value>
        </member>
        <member name="T:Dart.PowerTCP.Mail.SegmentEventHandler">
            <summary>
            Represents the method (event handler) that is raised when data is received or sent.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A SegmentEventArgs object that contains the event data.</param>
            <remarks>
            <p>As Microsoft describes in their MSDN documentation, the event model in the .NET Framework is based on having an event delegate that connects an event with its handler. To raise an event, two elements are needed: 
            <ul type="disc">
            <li>A class that holds the event data. This class must derive from the base class <a href="ms-help://MS.MSDNVS/cpref/html/frlrfsystemeventargsclasstopic.htm">EventArgs</a>.</li>
            <li>A delegate that points to a method that provides the response to the event.</li>
            </ul>
            When sending or receiving data, the class that holds the event data is the SegmentEventArgs class. A method must be created with the same signature as the delegate. In this example that would mean a method would have to be defined to accept two arguments (an object and a SegmentEventArgs) and return void.
            Once this has been done, the delegate must be "connected" to the handling event. This is done by adding an instance of the delegate to the event.
            </p>
            <p>For more information about event handler delegates, see the Using Events in PowerTCP topic.</p>
            <p>If your code causes an exception, it would be returned to the handling
            event without you seeing it. To preclude such a condition, you should ALWAYS
            use a try/
            catch block around your event-handling code.</p>
            </remarks>
            <example>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the <b>Log</b> event to create a text log of all data sent over the control connection.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' The Trace Event will fire whenever data is sent/received over the control connection. 
Private Sub Ftp1_Trace(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureFtp.SegmentEventArgs) Handles Ftp1.Trace
   ' Create FileStream to write to log file
   Dim stream1 As New System.IO.FileStream("c:\FtpTest\mylog.log", IO.FileMode.OpenOrCreate, IO.FileAccess.ReadWrite)

   ' Create text to precede sent/received data.
   Dim recv() As Byte = System.Text.Encoding.ASCII.GetBytes(vbCrLf + "Received &lt;--" + vbCrLf)
   Dim sent() As Byte = System.Text.Encoding.ASCII.GetBytes(vbCrLf + "Sent --&gt;" + vbCrLf)

   ' Set the stream position to append.
   stream1.Position = stream1.Length

   ' Check if data is incoming or outgoing and write appropriate data
   If e.Sent = True Then
      stream1.Write(sent, 0, sent.Length)
   Else
      stream1.Write(recv, 0, recv.Length)
   End If

   ' Write the data
   stream1.Write(e.Segment.Buffer, e.Segment.Offset, e.Segment.Count)

   ' Close the stream
   stream1.Close()

End Sub    
<span class="lang">[C#]</span> 
// The Trace Event will fire whenever data is sent/received. 
private void Ftp1_Trace(object sender, Dart.PowerTCP.SecureFtp.SegmentEventArgs e)
{

    // Create FileStream to write to log file
    System.IO.FileStream stream1 = new System.IO.FileStream("c:\\FtpTest\\log.txt", System.IO.FileMode.OpenOrCreate, System.IO.FileAccess.ReadWrite);

    // Create text to precede sent/received data.
    byte[] recv = System.Text.ASCIIEncoding.ASCII.GetBytes("\r\nReceived &lt;-- \r\n");
    byte[] sent = System.Text.ASCIIEncoding.ASCII.GetBytes("\r\nSent --&gt; \r\n");

    // Set the stream position to append.
    stream1.Position = stream1.Length;

    // Check if data is incoming or outgoing and write appropriate data
    if(e.Sent == true)
        stream1.Write(sent, 0, sent.Length);
    else
        stream1.Write(recv, 0, recv.Length);

    // Write the data
    stream1.Write(e.Segment.Buffer, e.Segment.Offset, e.Segment.Count);

    // Close the stream
    stream1.Close();
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
            </example>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Dart.PowerTCP.Mail.EventHandlerEx" -->
        <member name="T:Dart.PowerTCP.Mail.Segment">
            <summary>
            Provides a reference to a data segment where data is sent or received over a TCP stream.
            </summary>
            <remarks>
            <p>When data is sent or received when using the Tcp component (which may be by using the Tcp component
            directly, or by using another component that uses the Tcp compoent for the underlying connection), a Segment object is returned.
            This Segment oject will contain data such as the data sent or received and the amount of bytes sent
            or received. To use the data, simply access the Segment.Buffer property using the offset specified
            by the Segment.Offset property. As a shortcut, the Segment.ToString method can be used to simply return
            all data sent or received as a string.</p>
            <p>The Segment object is also used by other components beside the Tcp component. 
            For example, several components have a Trace event which allows access to any data sent or received over the
            control connection. A SegmentEventArgs class is made accessable in this event, containing a Segment object
            describing the data sent or received.</p>
            </remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates connecting to a server while specifying a local interface to use.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Connect to the server, specifying the local interface to use
Tcp1.Connect("atropos", 13, "192.168.0.83", 8888)

' Since connection was to DAYTIME port (13), simply receive the time
Dim seg As Segment = Tcp1.Receive()

Debug.WriteLine("Time reported by server: " + seg.ToString())
<span class="lang">[C#]</span> 
// Connect to the server, specifying the local interface to use
tcp1.Connect("atropos", 13, "192.168.0.83", 8888);

// Since connection was to DAYTIME port (13), simply receive the time
Segment seg = tcp1.Receive();

Debug.WriteLine("Time reported by server: " + seg.ToString());
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Segment.ToString">
            <summary>
			Returns all data sent/received as a string.
			</summary><returns>A string representing all data sent or received.</returns><p>If the object is a Segment object, this property returns all data contained in Segment.Buffer as a string. 
			The Object.Charset property is used for decoding the byte array into the string.
			If the object is a Datagram object, this property returns all data contained in Datagram.Buffer.
			</p>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates connecting to a server while specifying a local interface to use.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Connect to the server, specifying the local interface to use
Tcp1.Connect("atropos", 13, "192.168.0.83", 8888)

' Since connection was to DAYTIME port (13), simply receive the time
Dim seg As Segment = Tcp1.Receive()

Debug.WriteLine("Time reported by server: " + seg.ToString())
<span class="lang">[C#]</span> 
// Connect to the server, specifying the local interface to use
tcp1.Connect("atropos", 13, "192.168.0.83", 8888);

// Since connection was to DAYTIME port (13), simply receive the time
Segment seg = tcp1.Receive();

Debug.WriteLine("Time reported by server: " + seg.ToString());
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Segment.Buffer">
            <summary>
			The buffer containing the data that was sent/received.
			</summary><value>
			A byte array containing data that was sent/received over the socket.
			</value><remarks>
				<p>When using the Tcp component, using Tcp.Send or Tcp.Receive will return a Segment object. The
			data sent/received is available through Segment.Buffer.</p>
				<p>When using the Udp component, using Udp.Send or Udp.Receive will return a Datagram object. The
			data sent/received is available through Datagram.Buffer.</p>
				<p>When using other PowerTCP components, a Segment or Datagram object (which one depends on if TCP or UDP
			is used as the transport protocol) is made available to describe
			data sent or received, often in a Trace event. The Segment.Buffer or Datagram.Buffer property contains the actual
			data sent or received.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates connecting to a server while specifying a local interface to use.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Connect to the server, specifying the local interface to use
Tcp1.Connect("atropos", 13, "192.168.0.83", 8888)

' Since connection was to DAYTIME port (13), simply receive the time
Dim seg As Segment = Tcp1.Receive()

Debug.WriteLine("Time reported by server: " + seg.ToString())
<span class="lang">[C#]</span> 
// Connect to the server, specifying the local interface to use
tcp1.Connect("atropos", 13, "192.168.0.83", 8888);

// Since connection was to DAYTIME port (13), simply receive the time
Segment seg = tcp1.Receive();

Debug.WriteLine("Time reported by server: " + seg.ToString());
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Segment.Offset">
            <summary>
			The offset into the buffer.
			</summary><value>An integer representing the offset into the buffer.</value><remarks>
			Use this property to access offset parameter of the Receive and Send methods.
			</remarks><remarks>
				<p>When using the Tcp component, using Tcp.Send or Tcp.Receive will return a Segment object. The
			buffer offset is available through Segment.Offset.</p>
				<p>When using the Udp component, using Udp.Send or Udp.Receive will return a Datagram object. The
			buffer offset is available through Datagram.Offset.</p>
				<p>Use this property to properly access the data available in Segment.Buffer or Datagram.Buffer.</p>
				<p>When using other PowerTCP components, a Segment or Datagram object (which one depends on if TCP or UDP
			is used as the transport protocol) is made available to describe
			data sent or received, often in a Trace event. The Segment.Offset or Datagram.Offset property contains the 
			offset into the buffer.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates connecting to a server while specifying a local interface to use.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Connect to the server, specifying the local interface to use
Tcp1.Connect("atropos", 13, "192.168.0.83", 8888)

' Since connection was to DAYTIME port (13), simply receive the time
Dim seg As Segment = Tcp1.Receive()

Debug.WriteLine("Time reported by server: " + seg.ToString())
<span class="lang">[C#]</span> 
// Connect to the server, specifying the local interface to use
tcp1.Connect("atropos", 13, "192.168.0.83", 8888);

// Since connection was to DAYTIME port (13), simply receive the time
Segment seg = tcp1.Receive();

Debug.WriteLine("Time reported by server: " + seg.ToString());
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Segment.Count">
            <summary>
			The amount of bytes that were sent/received.
			</summary><value>
			An integer value representing the amount of bytes that were sent/received.
			</value><remarks>
				<p>When using the Tcp component, using Tcp.Send or Tcp.Receive will return a Segment object. The
			amount of bytes transferred is available through Segment.Offset.</p>
				<p>When using the Udp component, using Udp.Send or Udp.Receive will return a Datagram object. The
			amount of bytes transferred is available through Datagram.Offset.</p>
				<p>When using other PowerTCP components, a Segment or Datagram object (which one depends on if TCP or UDP
			is used as the transport protocol) is made available to describe
			data sent or received, often in a Trace event. The Segment.Count or Datagram.Count property contains the 
			amount of bytes transferred.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates connecting to a server while specifying a local interface to use.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Connect to the server, specifying the local interface to use
Tcp1.Connect("atropos", 13, "192.168.0.83", 8888)

' Since connection was to DAYTIME port (13), simply receive the time
Dim seg As Segment = Tcp1.Receive()

Debug.WriteLine("Time reported by server: " + seg.ToString())
<span class="lang">[C#]</span> 
// Connect to the server, specifying the local interface to use
tcp1.Connect("atropos", 13, "192.168.0.83", 8888);

// Since connection was to DAYTIME port (13), simply receive the time
Segment seg = tcp1.Receive();

Debug.WriteLine("Time reported by server: " + seg.ToString());
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Segment.Sent">
            <summary>
			Indicates whether the data was sent or received.
			</summary><value>true if the data was sent, false otherwise.</value><remarks>
				<p>When using the Tcp component, all data sent or received with Tcp.Send or Tcp.Receive will return a Segment object.
			The Segment.Sent property indicates whether data was sent or received. If this property is true, then 
			the Segment object was created because data was sent; false, the Segment object was created
			because data was received.</p>
				<p>When using the Udp component, all data sent or received with Udp.Send or Udp.Receive will return a Datagram object.
			The Datagram.Sent property indicates whether data was sent or received. If this property is true, then 
			the Datagram object was created because data was sent; false, the Datagram object was created
			because data was received.</p>
				<p>
			When using other PowerTCP components, a Segment or Datagram object is made available to describe
			data sent or received, often in a Trace event. Access the Sent property to determine if the Trace event
			was raised because data was sent or received.
			</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates connecting to a server while specifying a local interface to use.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Connect to the server, specifying the local interface to use
Tcp1.Connect("atropos", 13, "192.168.0.83", 8888)

' Since connection was to DAYTIME port (13), simply receive the time
Dim seg As Segment = Tcp1.Receive()

Debug.WriteLine("Time reported by server: " + seg.ToString())
<span class="lang">[C#]</span> 
// Connect to the server, specifying the local interface to use
tcp1.Connect("atropos", 13, "192.168.0.83", 8888);

// Since connection was to DAYTIME port (13), simply receive the time
Segment seg = tcp1.Receive();

Debug.WriteLine("Time reported by server: " + seg.ToString());
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Segment.SocketFlags">
            <summary>
				Gets the SocketFlags associated with the Segment.
			</summary><remarks>
				<p>Indicates the flags used when Tcp.Send or Tcp.Receive are used. See the <a href="ms-help://MS.VSCC/MS.MSDNQTR.2002JAN.1033/cpref/html/frlrfSystemNetSocketsSocketFlagsClassTopic.htm">SocketFlags</a> topic within the MSDN documentation for more info.</p>
			</remarks><value>
				The SocketFlags associated with the Segment.
			</value>
        </member>
        <member name="T:Dart.PowerTCP.Mail.SegmentEventArgs">
            <summary>
            Provides data for any event where data is sent or received.
            </summary>
            <remarks><p>A <b>SegmentEventArgs</b> object is passed as a parameter to all events that report the transfer of data. This object contains
            a Segment object that references the data sent/received.</p>
            <p>If your code causes an exception, it would be returned to the handling
            event without you seeing it. To preclude such a condition, you should ALWAYS
            use a try/
            catch block around your event-handling code.</p>
            </remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates asynchronous receiving and sending of data.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub AsynchTcpDemo()

   ' Attempt to connect to an echo port.
   Try
      Tcp1.Connect("myserver", 7)
   Catch ex As Exception
      Return
   End Try

   ' Send data, since we are connected to an echo port, the same data should be returned.
   ' The following code demonstrates asynchronously sending data. When data has been sent
   ' the EndSend event will be raised.

   Dim buffer() As Byte = System.Text.Encoding.Default.GetBytes("a")
   Tcp1.BeginSend(buffer, 0, buffer.Length, Net.Sockets.SocketFlags.None, Nothing)
End Sub

Private Sub Tcp1_EndSend(ByVal sender As Object, ByVal e As Dart.PowerTCP.SegmentEventArgs) Handles Tcp1.EndSend
   ' Check for exception
   If e.Exception Is Nothing Then

      ' Send is complete. Display info about the data sent.
      Debug.WriteLine("Byte count sent: " + e.Segment.Count)
      Debug.WriteLine("Data sent: " + e.Segment.ToString())
      
      Dim buffer(Tcp1.ReceiveBufferSize) As Byte

      ' Receive the data. The EndReceive event will be raised upon completion.
      Tcp1.BeginReceive(buffer, 0, buffer.Length, Net.Sockets.SocketFlags.None, Nothing)
    
    End If
End Sub

Private Sub Tcp1_EndReceive(ByVal sender As Object, ByVal e As Dart.PowerTCP.SegmentEventArgs) Handles Tcp1.EndReceive
   ' Check for exception
   If e.Exception Is Nothing Then

      ' Receive is complete. Display info about the data sent.
      Debug.WriteLine("Byte count received: " + e.Segment.Count)
      Debug.WriteLine("Data received: " + e.Segment.ToString())

      ' Close the connection
      Tcp1.Close()
    End If
End Sub
<span class="lang">[C#]</span> 
private void AsynchTcpDemo()
{
    // Attempt to connect to an echo port.
    try
    {
        tcp1.Connect("myserver", 7);
    }
    catch(Exception ex)
    {return;}

    // Send data, since we are connected to an echo port, the same data should be returned.
    // The following code demonstrates asynchronously sending data. When data has been sent
    // the EndSend event will be raised.

    byte[] buffer = System.Text.Encoding.Default.GetBytes("a");
    tcp1.BeginSend(buffer, 0, buffer.Length, System.Net.Sockets.SocketFlags.None, null);
}

private void tcp1_EndSend(object sender, Dart.PowerTCP.SegmentEventArgs e)
{
    // Check for exception
    if(e.Exception == null)
    {
        // Send is complete. Display info about the data sent.
        Debug.WriteLine("Byte count sent: " + e.Segment.Count);
        Debug.WriteLine("Data sent: " + e.Segment.ToString());
                

        byte[] buffer = new byte[tcp1.ReceiveBufferSize];
                    
        // Receive the data. The EndReceive event will be raised upon completion.
        tcp1.BeginReceive(buffer, 0, buffer.Length, System.Net.Sockets.SocketFlags.None, null);
    }
}

private void tcp1_EndReceive(object sender, Dart.PowerTCP.SegmentEventArgs e)
{
    // Check for exception
    if(e.Exception == null)
    {
        // Receive is complete. Display info about the data sent.
        Debug.WriteLine("Byte count received: " + e.Segment.Count);
        Debug.WriteLine("Data received: " + e.Segment.ToString());

        // Close the connection
        tcp1.Close();
    }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.SegmentEventArgs.Segment">
            <summary>
            The Segment object referencing the data that was sent or received.
            </summary>
            <value>A Segment object referencing the data that was sent or received.</value>
            <remarks><p>
            The Segment object will contain data describing the data that was sent or received.
            For example, the Segment object will contain the data itself, the amount of bytes sent,'
            and whether the Segment object was created as a result of data being sent or received.</p>
            <p>To access the data contained within the Segment object, simply access the properties of the
            Segment object. As a shortcut, you can simply get all data contained within the Segment object by
            using the Segment.ToString method.</p>
            </remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates asynchronous receiving and sending of data.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub AsynchTcpDemo()

   ' Attempt to connect to an echo port.
   Try
      Tcp1.Connect("myserver", 7)
   Catch ex As Exception
      Return
   End Try

   ' Send data, since we are connected to an echo port, the same data should be returned.
   ' The following code demonstrates asynchronously sending data. When data has been sent
   ' the EndSend event will be raised.

   Dim buffer() As Byte = System.Text.Encoding.Default.GetBytes("a")
   Tcp1.BeginSend(buffer, 0, buffer.Length, Net.Sockets.SocketFlags.None, Nothing)
End Sub

Private Sub Tcp1_EndSend(ByVal sender As Object, ByVal e As Dart.PowerTCP.SegmentEventArgs) Handles Tcp1.EndSend
   ' Check for exception
   If e.Exception Is Nothing Then

      ' Send is complete. Display info about the data sent.
      Debug.WriteLine("Byte count sent: " + e.Segment.Count)
      Debug.WriteLine("Data sent: " + e.Segment.ToString())
      
      Dim buffer(Tcp1.ReceiveBufferSize) As Byte

      ' Receive the data. The EndReceive event will be raised upon completion.
      Tcp1.BeginReceive(buffer, 0, buffer.Length, Net.Sockets.SocketFlags.None, Nothing)
    
    End If
End Sub

Private Sub Tcp1_EndReceive(ByVal sender As Object, ByVal e As Dart.PowerTCP.SegmentEventArgs) Handles Tcp1.EndReceive
   ' Check for exception
   If e.Exception Is Nothing Then

      ' Receive is complete. Display info about the data sent.
      Debug.WriteLine("Byte count received: " + e.Segment.Count)
      Debug.WriteLine("Data received: " + e.Segment.ToString())

      ' Close the connection
      Tcp1.Close()
    End If
End Sub
<span class="lang">[C#]</span> 
private void AsynchTcpDemo()
{
    // Attempt to connect to an echo port.
    try
    {
        tcp1.Connect("myserver", 7);
    }
    catch(Exception ex)
    {return;}

    // Send data, since we are connected to an echo port, the same data should be returned.
    // The following code demonstrates asynchronously sending data. When data has been sent
    // the EndSend event will be raised.

    byte[] buffer = System.Text.Encoding.Default.GetBytes("a");
    tcp1.BeginSend(buffer, 0, buffer.Length, System.Net.Sockets.SocketFlags.None, null);
}

private void tcp1_EndSend(object sender, Dart.PowerTCP.SegmentEventArgs e)
{
    // Check for exception
    if(e.Exception == null)
    {
        // Send is complete. Display info about the data sent.
        Debug.WriteLine("Byte count sent: " + e.Segment.Count);
        Debug.WriteLine("Data sent: " + e.Segment.ToString());
                

        byte[] buffer = new byte[tcp1.ReceiveBufferSize];
                    
        // Receive the data. The EndReceive event will be raised upon completion.
        tcp1.BeginReceive(buffer, 0, buffer.Length, System.Net.Sockets.SocketFlags.None, null);
    }
}

private void tcp1_EndReceive(object sender, Dart.PowerTCP.SegmentEventArgs e)
{
    // Check for exception
    if(e.Exception == null)
    {
        // Receive is complete. Display info about the data sent.
        Debug.WriteLine("Byte count received: " + e.Segment.Count);
        Debug.WriteLine("Data received: " + e.Segment.ToString());

        // Close the connection
        tcp1.Close();
    }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.SegmentEventArgs.Exception">
            <summary>
				Gets any exception which occurred during the asynchronous operation.
			</summary><remarks>
				<p>Check this property to tell if an exception occurred during the asynchronous operation. If this property is null, no exception occurred.</p>
				<p>The exception property is useful for checking exceptions and handling them appropriately. For example, if a bad command was sent to the server, a ProtocolException may be thrown. You could check this property to see if it was of type ProtocolException, than handle appropriately.</p>
			</remarks><value>
				If any exception occurred during the asynchronous operation, this property will contain an Exception object describing the exception.
			</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates asynchronous receiving and sending of data.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub AsynchTcpDemo()

   ' Attempt to connect to an echo port.
   Try
      Tcp1.Connect("myserver", 7)
   Catch ex As Exception
      Return
   End Try

   ' Send data, since we are connected to an echo port, the same data should be returned.
   ' The following code demonstrates asynchronously sending data. When data has been sent
   ' the EndSend event will be raised.

   Dim buffer() As Byte = System.Text.Encoding.Default.GetBytes("a")
   Tcp1.BeginSend(buffer, 0, buffer.Length, Net.Sockets.SocketFlags.None, Nothing)
End Sub

Private Sub Tcp1_EndSend(ByVal sender As Object, ByVal e As Dart.PowerTCP.SegmentEventArgs) Handles Tcp1.EndSend
   ' Check for exception
   If e.Exception Is Nothing Then

      ' Send is complete. Display info about the data sent.
      Debug.WriteLine("Byte count sent: " + e.Segment.Count)
      Debug.WriteLine("Data sent: " + e.Segment.ToString())
      
      Dim buffer(Tcp1.ReceiveBufferSize) As Byte

      ' Receive the data. The EndReceive event will be raised upon completion.
      Tcp1.BeginReceive(buffer, 0, buffer.Length, Net.Sockets.SocketFlags.None, Nothing)
    
    End If
End Sub

Private Sub Tcp1_EndReceive(ByVal sender As Object, ByVal e As Dart.PowerTCP.SegmentEventArgs) Handles Tcp1.EndReceive
   ' Check for exception
   If e.Exception Is Nothing Then

      ' Receive is complete. Display info about the data sent.
      Debug.WriteLine("Byte count received: " + e.Segment.Count)
      Debug.WriteLine("Data received: " + e.Segment.ToString())

      ' Close the connection
      Tcp1.Close()
    End If
End Sub
<span class="lang">[C#]</span> 
private void AsynchTcpDemo()
{
    // Attempt to connect to an echo port.
    try
    {
        tcp1.Connect("myserver", 7);
    }
    catch(Exception ex)
    {return;}

    // Send data, since we are connected to an echo port, the same data should be returned.
    // The following code demonstrates asynchronously sending data. When data has been sent
    // the EndSend event will be raised.

    byte[] buffer = System.Text.Encoding.Default.GetBytes("a");
    tcp1.BeginSend(buffer, 0, buffer.Length, System.Net.Sockets.SocketFlags.None, null);
}

private void tcp1_EndSend(object sender, Dart.PowerTCP.SegmentEventArgs e)
{
    // Check for exception
    if(e.Exception == null)
    {
        // Send is complete. Display info about the data sent.
        Debug.WriteLine("Byte count sent: " + e.Segment.Count);
        Debug.WriteLine("Data sent: " + e.Segment.ToString());
                

        byte[] buffer = new byte[tcp1.ReceiveBufferSize];
                    
        // Receive the data. The EndReceive event will be raised upon completion.
        tcp1.BeginReceive(buffer, 0, buffer.Length, System.Net.Sockets.SocketFlags.None, null);
    }
}

private void tcp1_EndReceive(object sender, Dart.PowerTCP.SegmentEventArgs e)
{
    // Check for exception
    if(e.Exception == null)
    {
        // Receive is complete. Display info about the data sent.
        Debug.WriteLine("Byte count received: " + e.Segment.Count);
        Debug.WriteLine("Data received: " + e.Segment.ToString());

        // Close the connection
        tcp1.Close();
    }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.SegmentEventArgs.State">
            <summary>
				Gets the object that was included as part of the associated method call. 
			</summary><remarks>
				<p>The EndEventArgs.State property can be used in the calling asynchronous method to make data accessible
				to the handling event.</p>
				<p>This property is useful for making data accessible to the handling event. Since asynchronous methods are "disconnected" (meaning that when one is called, it executes on it's own and returns in the event handler) data that you were using in the code that called the asynchronous method may not be available in the event handler. Simply pass this data in as <i>state</i> when calling the asynchronous method (usually a BeginXXX method) and it is available in the event handler.
				If you do not wish to make an object accessible in the EndXXX event, simple pass in null as <i>state</i>.</p>
			</remarks><value>
				An object containing data passed into the calling asynchronous method.
			</value>
        </member>
        <member name="T:Dart.PowerTCP.Mail.Tcp">
            <summary>
            The Tcp component provides comprehensive Transmission Control Protocol support.
            </summary><remarks>
				<p>Use the Tcp Component to establish and manage socket-level streams of data. It simplifies the use of TCP communications by providing methods to establish connections, send and receive data, and terminate connections. Synchronous and asynchronous use is fully supported.</p>
				<H4 class="dtH4">Using the Tcp Component</H4>
				<p>What follows are short usage descriptions. For more information, see the appropriate member topic.</p>
				<p><b>Low-level interface vs stream interface</b>: Choose between sending data directly over the socket using a low-level interface, or use the stream
				interface to send/receive data with additional, stream-specific functionality. If you wish to use the low-level interface, you would use the Tcp.Send
				and Tcp.Receive methods. If you wish to use the stream-interface, use the Tcp.Stream.Read and Tcp.Stream.Write methods.
				</p>
				<p><b>Connecting:</b> To connect to a host, use either Tcp.Connect (to connect synchronously) or Tcp.BeginConnect (to connect asynchronously), specifying a remote host and port to connect to. Both of these 
				methods are overloaded to allow the specification of a local interface/port as well.</p>
				<p><b>Sending data using the low-level interface:</b> After connecting, send data by using either Tcp.Send (to send data synchronously) or Tcp.BeginSend (to send data asynchronously). 
				These methods are overloaded to allow sending of strings or byte arrays. A Segment object is returned from all Send operations, containing information about the data sent.</p>
				<p><b>Sending data using the stream interface:</b> To send data using the stream interface, use Tcp.Stream.Write. The stream interface offers additional functionality over the low-level interface for sending data such
				as sending data up to a delimiter and sending data while replacing characters.</p>
				<p><b>Receiving data using the low-level interface:</b> To receive data, use either Tcp.Receive (to receive data synchronously) or Tcp.BeginReceive (to receive data asynchronously). This method is most useful when you either want to receive
				all available data in the buffer.</p>
				<p><b>Receiving data using the stream-interface:</b> To receive data using the stream interface, use Tcp.Stream.Read. The stream interface offers additional functionality over the low-level interface for receiving data such
				as receiving up to a delimiter or filling a fixed-size buffer.</p>
				<p><b>Event notification:</b> The Tcp component provides full event support including the Tcp.Trace event, raised when data is sent or received,
				the Tcp.ConnectedChanged event, raised when the value of Tcp.Connected changes.</p>
				<p><b>Socket option configuration:</b> The Tcp component enables socket option configuration (such as KeepAlive and NoDelay socket options, for example) by simply setting properties of the Tcp component. In addition, buffer-size/socket timeout
				configuration is possible by setting both the sending or receiving buffer size, and the sending and receiving timeout value.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates connecting implementing the SMTP protocol using the Tcp component to send a simple message.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub TcpDemo()

   ' The following code assumes that good responses are always received from
   ' the server. More robust code should check each response and handle appropriately.

   ' Connect to SMTP port
   Tcp1.Connect("mail", 25)

   ' Send the EHLO command
   Tcp1.Send("EHLO myserver" + vbCrLf)

   ' Get response from the server
   Dim seg As Segment = Tcp1.Receive()

   ' Send MAIL FROM command
   Tcp1.Send("MAIL FROM: test@myserver.com" + vbCrLf)

   ' Get response from the server
   seg = Tcp1.Receive()

   ' Send RCPT TO command
   Tcp1.Send("RCPT TO: you@yourserver.com" + vbCrLf)

   ' Get response from the server
   seg = Tcp1.Receive()

   ' Send DATA command
   Tcp1.Send("DATA" + vbCrLf)

   ' Get response from the server
   seg = Tcp1.Receive()

   ' Send DATA
   Tcp1.Send("Test Message" + vbCrLf + "." + vbCrLf)

   ' Receive response from the server
   seg = Tcp1.Receive()

   ' Write output
   Debug.WriteLine("Operation complete. The following information")
   Debug.WriteLine("was reported by the server:")
   Debug.WriteLine(seg.ToString())
End Sub
<span class="lang">[C#]</span> 
private void TcpDemo()
{
 
   // The following code assumes that good responses are always received from
   // the server. More robust code should check each response and handle appropriately.

   // Connect to SMTP port
   tcp1.Connect("mail", 25);

   // Send the EHLO command
   tcp1.Send("EHLO myserver\r\n");

   // Get response from the server
   Segment seg = tcp1.Receive();

   // Send MAIL FROM command
   tcp1.Send("MAIL FROM: test@myserver.com\r\n");

   // Get response from the server
   seg = tcp1.Receive();

   // Send RCPT TO command
   tcp1.Send("RCPT TO: you@yourserver.com\r\n");

   // Get response from the server
   seg = tcp1.Receive();

   // Send DATA command
   tcp1.Send("DATA\r\n");

   // Get response from the server
   seg = tcp1.Receive();

   // Send DATA
   tcp1.Send("Test Message\r\n.\r\n");

   // Receive response from the server
   seg = tcp1.Receive();

   // Write output
   Debug.WriteLine("Operation complete. The following information");
   Debug.WriteLine("was reported by the server about the operation:");
   Debug.WriteLine(seg.ToString());
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Tcp.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the Tcp class.
            </summary><param name="container">The IContainer which contains the object.</param><remarks>
				<p>Use this constructor to add the Tcp class to the IContainer container.</p>
				<p>To create an instance of the Tcp component using Visual Studio.NET, simply add the Tcp component to the form and the object will automatically be created and initialized. If working out of the Visual Studio.NET environment (or using the Tcp component as a reference), the Tcp component will have to be explicitly created and initialized.</p>
				<p>The following table shows initial property values for an instance of Tcp.</p>
				<div class="tablediv">
					<table cellspacing="0" class="dtTABLE">
						<tr valign="top">
							<th width="50%">Property</th>
							<th width="50%">Initial Value</th>
						</tr>
						<tr valign="top">
							<td width="50%"> Tcp.Available </td>
							<td width="50%"> 0 </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Tcp.Charset </td>
							<td width="50%"> Default system charset (accessible via System.Text.Encoding.Default.BodyName)</td>
						</tr>
						<tr valign="top">
							<td width="50%"> Tcp.Connected </td>
							<td width="50%"> false </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Tcp.DoEvents </td>
							<td width="50%"> true </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Tcp.KeepAlive </td>
							<td width="50%"> false </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Tcp.LocalEndPoint </td>
							<td width="50%"> reference to System.Net.IPEndPoint </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Tcp.NoDelay </td>
							<td width="50%"> false </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Tcp.OutOfBandInline </td>
							<td width="50%"> false </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Tcp.Proxy </td>
							<td width="50%"> reference to Dart.PowerTCP.Proxy </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Tcp.ReceiveBufferSize </td>
							<td width="50%"> 8192 </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Tcp.ReceiveTimeout </td>
							<td width="50%"> 0 </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Tcp.RemoteEndPoint </td>
							<td width="50%"> reference to System.Net.IPEndPoint </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Tcp.ReuseAddress </td>
							<td width="50%"> false </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Tcp.SendBufferSize </td>
							<td width="50%"> 8192 </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Tcp.SendTimeout </td>
							<td width="50%"> 0 </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Tcp.Socket </td>
							<td width="50%"> null </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Tcp.State </td>
							<td width="50%"> null </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Tcp.Stream </td>
							<td width="50%"> SegmentedStream object </td>
						</tr>
					</table>
				</div>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates creating a <b>Tcp</b> object.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Declare as class member
Friend WithEvents Tcp1 As Dart.PowerTCP.SecureFtp.Tcp

' Create in class initialization
Me.Tcp1 = New Dart.PowerTCP.SecureFtp.Tcp()
<span class="lang">[C#]</span> 
private Dart.PowerTCP.SecureFtp.Tcp tcp1 = new Dart.PowerTCP.SecureFtp.Tcp();         
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Tcp.InitializeComponent">
            <summary>
            	Required method for Designer support - do not modify
            	the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Tcp.#ctor">
            <summary>
            Initializes a new instance of the Tcp class.
            </summary><remarks>
				<p>The default constructor initializes a new Tcp class.</p>
				<p>To create an instance of the Tcp component using Visual Studio.NET, simply add the Tcp component to the form and the object will automatically be created and initialized. If working out of the Visual Studio.NET environment (or using the Tcp component as a reference), the Tcp component will have to be explicitly created and initialized.</p>
				<p>The following table shows initial property values for an instance of Tcp.</p>
				<div class="tablediv">
					<table cellspacing="0" class="dtTABLE">
						<tr valign="top">
							<th width="50%">Property</th>
							<th width="50%">Initial Value</th>
						</tr>
						<tr valign="top">
							<td width="50%"> Tcp.Available </td>
							<td width="50%"> 0 </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Tcp.Charset </td>
							<td width="50%"> Default system charset (accessible via System.Text.Encoding.Default.BodyName)</td>
						</tr>
						<tr valign="top">
							<td width="50%"> Tcp.Connected </td>
							<td width="50%"> false </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Tcp.DoEvents </td>
							<td width="50%"> true </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Tcp.KeepAlive </td>
							<td width="50%"> false </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Tcp.LocalEndPoint </td>
							<td width="50%"> reference to System.Net.IPEndPoint </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Tcp.NoDelay </td>
							<td width="50%"> false </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Tcp.OutOfBandInline </td>
							<td width="50%"> false </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Tcp.Proxy </td>
							<td width="50%"> reference to Dart.PowerTCP.Proxy </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Tcp.ReceiveBufferSize </td>
							<td width="50%"> 8192 </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Tcp.ReceiveTimeout </td>
							<td width="50%"> 0 </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Tcp.RemoteEndPoint </td>
							<td width="50%"> reference to System.Net.IPEndPoint </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Tcp.ReuseAddress </td>
							<td width="50%"> false </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Tcp.SendBufferSize </td>
							<td width="50%"> 8192 </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Tcp.SendTimeout </td>
							<td width="50%"> 0 </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Tcp.Socket </td>
							<td width="50%"> null </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Tcp.State </td>
							<td width="50%"> null </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Tcp.Stream </td>
							<td width="50%"> SegmentedStream object </td>
						</tr>
					</table>
				</div>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates creating a <b>Tcp</b> object.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Declare as class member
Friend WithEvents Tcp1 As Dart.PowerTCP.SecureFtp.Tcp

' Create in class initialization
Me.Tcp1 = New Dart.PowerTCP.SecureFtp.Tcp()
<span class="lang">[C#]</span> 
private Dart.PowerTCP.SecureFtp.Tcp tcp1 = new Dart.PowerTCP.SecureFtp.Tcp();         
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Tcp.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Initializes a new instance of the Tcp class, specifying the System.Net.Sockets.Socket to use for the underlying connection.
            </summary><param name="acceptedSocket">The System.Net.Sockets.Socket to use for the underlying connection.</param><remarks>
				<p>Use this constructor create an instance of the Tcp class using an already created Socket. Typically, this is used when a connection is made on a socket that is listening for connections.</p>
				<p>To create an instance of the Tcp component using Visual Studio.NET, simply add the Tcp component to the form and the object will automatically be created and initialized. If working out of the Visual Studio.NET environment (or using the Tcp component as a reference), the Tcp component will have to be explicitly created and initialized.</p>
				<p>The following table shows initial property values for an instance of Tcp.</p>
				<div class="tablediv">
					<table cellspacing="0" class="dtTABLE">
						<tr valign="top">
							<th width="50%">Property</th>
							<th width="50%">Initial Value</th>
						</tr>
						<tr valign="top">
							<td width="50%"> Tcp.Available </td>
							<td width="50%"> 0 </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Tcp.Charset </td>
							<td width="50%"> Default system charset (accessible via System.Text.Encoding.Default.BodyName)</td>
						</tr>
						<tr valign="top">
							<td width="50%"> Tcp.Connected </td>
							<td width="50%"> false </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Tcp.DoEvents </td>
							<td width="50%"> true </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Tcp.KeepAlive </td>
							<td width="50%"> false </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Tcp.LocalEndPoint </td>
							<td width="50%"> reference to System.Net.IPEndPoint </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Tcp.NoDelay </td>
							<td width="50%"> false </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Tcp.OutOfBandInline </td>
							<td width="50%"> false </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Tcp.Proxy </td>
							<td width="50%"> reference to Dart.PowerTCP.Proxy </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Tcp.ReceiveBufferSize </td>
							<td width="50%"> 8192 </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Tcp.ReceiveTimeout </td>
							<td width="50%"> 0 </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Tcp.RemoteEndPoint </td>
							<td width="50%"> reference to System.Net.IPEndPoint </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Tcp.ReuseAddress </td>
							<td width="50%"> false </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Tcp.SendBufferSize </td>
							<td width="50%"> 8192 </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Tcp.SendTimeout </td>
							<td width="50%"> 0 </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Tcp.Socket </td>
							<td width="50%"> null </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Tcp.State </td>
							<td width="50%"> null </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Tcp.Stream </td>
							<td width="50%"> SegmentedStream object </td>
						</tr>
					</table>
				</div>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates creating a <b>Tcp</b> object.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Declare as class member
Friend WithEvents Tcp1 As Dart.PowerTCP.SecureFtp.Tcp

' Create in class initialization
Me.Tcp1 = New Dart.PowerTCP.SecureFtp.Tcp()
<span class="lang">[C#]</span> 
private Dart.PowerTCP.SecureFtp.Tcp tcp1 = new Dart.PowerTCP.SecureFtp.Tcp();         
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Tcp.#ctor(System.ComponentModel.Component)">
            <summary>
             Initializes a new instance of the Tcp component.
            </summary>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates sending bytes to the server with a SocketFlag option. </p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub Test()
   ' Connect to an echo port
   Tcp1.Connect("atropos", 7)

   Dim sendbuffer() As Byte = System.Text.Encoding.Default.GetBytes("abcdefg")

   ' Send some bytes with "OutOfBand" SocketFlag option
   Tcp1.Send(sendbuffer, 0, sendbuffer.Length, SocketFlags.OutOfBand)

   Dim recvbuffer(sendbuffer.Length) As Byte

   ' Server will echo the bytes back. Receive the bytes.
   Tcp1.Receive(recvbuffer, 0, recvbuffer.Length, SocketFlags.None)

   ' Close the connection.
   Tcp1.Close()
End Sub
<span class="lang">[C#]</span> 
private void Test()
{
   // Connect to the echo port
   tcp1.Connect("atropos", 7);

   byte[] sendbuffer = System.Text.Encoding.Default.GetBytes("abcdefg");

   // Send some bytes with "OutOfBand" SocketFlag option
   tcp1.Send(sendbuffer, 0, sendbuffer.Length, SocketFlags.OutOfBand);

   byte[] recvbuffer = new byte[sendbuffer.Length];

   // Server will echo the bytes back. Receive the bytes.
   tcp1.Receive(recvbuffer, 0, recvbuffer.Length, SocketFlags.None);

   // Close the connection.
   tcp1.Close();
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Tcp.#ctor(System.Net.Sockets.Socket,System.ComponentModel.Component)">
            <summary>
             Initializes a new instance of the Tcp component.
            </summary>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates sending bytes to the server with a SocketFlag option. </p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub Test()
   ' Connect to an echo port
   Tcp1.Connect("atropos", 7)

   Dim sendbuffer() As Byte = System.Text.Encoding.Default.GetBytes("abcdefg")

   ' Send some bytes with "OutOfBand" SocketFlag option
   Tcp1.Send(sendbuffer, 0, sendbuffer.Length, SocketFlags.OutOfBand)

   Dim recvbuffer(sendbuffer.Length) As Byte

   ' Server will echo the bytes back. Receive the bytes.
   Tcp1.Receive(recvbuffer, 0, recvbuffer.Length, SocketFlags.None)

   ' Close the connection.
   Tcp1.Close()
End Sub
<span class="lang">[C#]</span> 
private void Test()
{
   // Connect to the echo port
   tcp1.Connect("atropos", 7);

   byte[] sendbuffer = System.Text.Encoding.Default.GetBytes("abcdefg");

   // Send some bytes with "OutOfBand" SocketFlag option
   tcp1.Send(sendbuffer, 0, sendbuffer.Length, SocketFlags.OutOfBand);

   byte[] recvbuffer = new byte[sendbuffer.Length];

   // Server will echo the bytes back. Receive the bytes.
   tcp1.Receive(recvbuffer, 0, recvbuffer.Length, SocketFlags.None);

   // Close the connection.
   tcp1.Close();
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Tcp.Dispose(System.Boolean)">
            <summary>
			Releases all resources associated with the object.
			</summary><remarks>
				<p>The Object.Dispose method abruptly aborts the connection and releases all resources.</p>
				<p>Object.Dispose should ONLY be used to release all resources used by the
object, and the object should not be used subsequently. If an abort is
desired, then Object.Close or Object.Connection.Close if available should be used to terminate
activity and reset the object. The Object cannot be used once Object.Dispose() or Object.Dispose(true) are called.
</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates connecting to an echo port, sending data, receiving data, then closing the connection.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub TcpDemo()

   ' Connect to echo port.
   Tcp1.Connect("atropos", "7")

   ' Send some data
   Dim seg As Segment = Tcp1.Send("Hello")

   ' Display info
   Debug.WriteLine("Bytes of data sent: " &amp; seg.Count)
   Debug.WriteLine("Data sent: " &amp; seg.ToString())

   ' Receive response (this should be the same as the sent data)
   seg = Tcp1.Receive()

   ' Display info
   Debug.WriteLine("Bytes of data received: " &amp; seg.Count)
   Debug.WriteLine("Data received: " &amp; seg.ToString())

   ' Since connection is to an echo port, the client has to
   ' close the connection.
   Try
      Tcp1.Close()
   Catch ex As Exception
      ' Error, just dispose the object.
      Tcp1.Dispose()
   End Try

   '* Output
   '* --------------------------
   '* Bytes of data sent: 5
   '* Data sent: Hello
   '* Bytes of data received: 5
   '* Data received: Hello
   '*
End Sub
<span class="lang">[C#]</span> 
private void TcpDemo()
{
   // Connect to echo port.
   tcp1.Connect("atropos", "7"); 

   // Send some data
   Segment seg = tcp1.Send("Hello");

   // Display info
   Debug.WriteLine("Bytes of data sent: " + seg.Count);
   Debug.WriteLine("Data sent: " + seg.ToString());

   // Receive response (this should be the same as the sent data)
   seg = tcp1.Receive();

   // Display info
   Debug.WriteLine("Bytes of data received: " + seg.Count);
   Debug.WriteLine("Data received: " + seg.ToString());

   // Since connection is to an echo port, the client has to
   // close the connection.
   try
   {
      tcp1.Close();
   }
   catch(Exception ex)
   {
      // Error, just dispose the object.
      tcp1.Dispose();
   }

   /* Output
    * --------------------------
    * Bytes of data sent: 5
    * Data sent: Hello
    * Bytes of data received: 5
    * Data received: Hello
    */
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Tcp.BlockingConnect(System.String,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            BlockingConnect is used for establishing ALL connections (async and blocking)
            </summary>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Tcp.BeginConnect(System.String,System.Int32,System.String,System.Int32,System.Object)">
            <summary>
            Connect to a server asynchronously, specifying the local interface to use. The Tcp.EndConnect event is raised when completed.
            </summary><param name="server">Remote hostname or address in dot notation.</param><param name="serverPort">Remote port, a number between 1 and 65535, inclusive.</param><param name="client">Optional local hostname or address in dot notation. Use "" as default.</param><param name="clientPort">Optional local port, a number between 1 and 65535, inclusive. Use 0 as default.</param><param name="state">User state information.</param><remarks>
				<p>Use this method if you wish to connect to a host transparently with minimal 
			application impact, as execution occurs on another thread. This method begins to asynchronously connect to the server. Upon completion (on both success and failure)
            the Tcp.EndConnect event is raised. An EventArgs object is passed into this event, containing
            information about the event. If the connection
            succeeds, the ConnectedChanged event is raised. Once the connection has been made, you can send and receive data from the remote device.</p>
				<p>If you are using the Tcp component as a reference, you must "wire up" the event yourself. This involves creating a method as the event handler that implements the EventHandler delegate.</p>
				<p>For more information on implementing and handling events using PowerTCP.NET, see the topic, Using Events In PowerTCP.</p>
				<p>To connect synchronously, use the Tcp.Connect method.</p>
			</remarks><exception cref="T:System.InvalidOperationException">BeginXXX method used without providing an EndXXX event handler.</exception><returns>An IAsyncResult that represents the asynchronous operation, which could still be pending.</returns>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates asynchronously connecting using the BeginConnect method.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub Test()
   ' Begin to asynchronously connect to an echo port.
   Tcp1.BeginConnect("atropos", 7)
End Sub

Private Sub Tcp1_EndConnect(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureFtp.ExceptionEventArgs) Handles Tcp1.EndConnect
   ' Connect complete, check for any exceptions
   If e.Exception Is Nothing Then
      ' Now send some data.
      Tcp1.Send("hello")

      ' Receive the data back.
      Dim seg As Segment = Tcp1.Receive()
      Debug.WriteLine(seg.ToString())
   End If
End Sub
<span class="lang">[C#]</span> 
private void Test()
{
   // Begin to asynchronously connect to an echo port.
   tcp1.BeginConnect("atropos", 7);
}

private void tcp1_EndConnect(object sender, Dart.PowerTCP.SecureFtp.ExceptionEventArgs e)
{
   // Connect complete, check for any exceptions
   if(e.Exception == null)
   {
      // Now send some data.
      tcp1.Send("hello");

      // Receive the data back.
      Segment seg = tcp1.Receive();

      Debug.WriteLine(seg.ToString());
   }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Tcp.BeginConnect(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Object)">
            <summary>
            Connect to a server asynchronously, specifying the local interface and a range of local ports to use. The Tcp.EndConnect event is raised when completed.
            </summary><param name="server">Remote hostname or address in dot notation.</param><param name="serverPort">Remote port, a number between 1 and 65535, inclusive.</param><param name="client">Optional local hostname or address in dot notation. Use "" as default.</param><param name="clientPortMin">The minimum client port number to use as a local interface.</param><param name="clientPortMax">The maximim client port number to use as a local interface.</param><param name="state">User state information.</param><remarks>
				<p>Use this method if you wish to connect to a host transparently with minimal 
			application impact, as execution occurs on another thread. This method begins to asynchronously connect to the server. Upon completion (on both success and failure)
            the Tcp.EndConnect event is raised. An EventArgs object is passed into this event, containing
            information about the event. If the connection
            succeeds, the ConnectedChanged event is raised. Once the connection has been made, you can send and receive data from the remote device.</p>
				<p>If you are using the Tcp component as a reference, you must "wire up" the event yourself. This involves creating a method as the event handler that implements the EventHandler delegate.</p>
				<p>For more information on implementing and handling events using PowerTCP.NET, see the topic, Using Events In PowerTCP.</p>
				<p>To connect synchronously, use the Tcp.Connect method.</p>
			</remarks><exception cref="T:System.InvalidOperationException">BeginXXX method used without providing an EndXXX event handler.</exception><returns>An IAsyncResult that represents the asynchronous operation, which could still be pending.</returns>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Tcp.BeginConnect(System.String,System.Int32)">
            <summary>
            Connect to a server asynchronously. The Tcp.EndConnect event is raised when completed.
            </summary><param name="server">Remote hostname or address in dot notation.</param><param name="serverPort">Remote port, a number between 1 and 65535, inclusive.</param><remarks>
				<p>Use this method if you wish to connect to a host transparently with minimal 
			application impact, as execution occurs on another thread. This method begins to asynchronously connect to the server. Upon completion (on both success and failure)
            the Tcp.EndConnect event is raised. An EventArgs object is passed into this event, containing
            information about the event. If the connection
            succeeds, the ConnectedChanged event is raised. Once the connection has been made, you can send and receive data from the remote device.</p>
				<p>If you are using the Tcp component as a reference, you must "wire up" the event yourself. This involves creating a method as the event handler that implements the EventHandler delegate.</p>
				<p>For more information on implementing and handling events using PowerTCP.NET, see the topic, Using Events In PowerTCP.</p>
				<p>To connect synchronously, use the Tcp.Connect method.</p>
			</remarks><exception cref="T:System.InvalidOperationException">BeginXXX method used without providing an EndXXX event handler.</exception><returns>An IAsyncResult that represents the asynchronous operation, which could still be pending.</returns>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates asynchronously connecting using the BeginConnect method.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub Test()
   ' Begin to asynchronously connect to an echo port.
   Tcp1.BeginConnect("atropos", 7)
End Sub

Private Sub Tcp1_EndConnect(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureFtp.ExceptionEventArgs) Handles Tcp1.EndConnect
   ' Connect complete, check for any exceptions
   If e.Exception Is Nothing Then
      ' Now send some data.
      Tcp1.Send("hello")

      ' Receive the data back.
      Dim seg As Segment = Tcp1.Receive()
      Debug.WriteLine(seg.ToString())
   End If
End Sub
<span class="lang">[C#]</span> 
private void Test()
{
   // Begin to asynchronously connect to an echo port.
   tcp1.BeginConnect("atropos", 7);
}

private void tcp1_EndConnect(object sender, Dart.PowerTCP.SecureFtp.ExceptionEventArgs e)
{
   // Connect complete, check for any exceptions
   if(e.Exception == null)
   {
      // Now send some data.
      tcp1.Send("hello");

      // Receive the data back.
      Segment seg = tcp1.Receive();

      Debug.WriteLine(seg.ToString());
   }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Tcp.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Object)">
            <summary>
            Receive data into your buffer asynchronously specifying a buffer, offset, count and SocketFlags value. The Tcp.EndReceive event is raised when completed.
            </summary><param name="buffer">Destination memory location to store received data.</param><param name="offset">Starting offset within buffer for filling.</param><param name="count">Maximum number of bytes to receive.</param><param name="socketFlags">A bitwise combination of special use receiving parameters.</param><param name="state">User state information.</param><remarks>
				<p>The Tcp.BeginReceive method is used to receive data into a buffer asynchronously. When data has been received, the Tcp.EndReceive event is raised.
            A SegmentEventArgs object is passed into this event, containing a Segment object which encaspsulates information about 
            the data itself and the amount of bytes of data received.
            </p>
				<p>The object <i>state</i> is useful for any kind of state information you would like accessible in the Tcp.EndReceive event. Since the method is "disconnected" from the calling code and returns to the calling thread elsewhere, you may wish to pass an object/variable as state to be retrieved and used in the event handler.</p>
				<p>If you are using the Tcp component as a reference, you must "wire up" the event yourself. This involves creating a method as the event handler that implements the SegmentEventHandler delegate.</p>
				<p>To synchronously receive data, use the Tcp.Receive method.</p>
				<p>
            Use this method if you wish to receive data into your buffer transparently with minimal 
			application impact, as execution occurs on another thread. This method allows for greater configuration
			over how the data is received. For example, you could specify SocketFlags.Peek to peek at an incoming message.
			Also, if you would like to perform an asynchronous receive and make user defined objects available in the Tcp.EndReceive
			event (via the <i>state</i> object), you must use this method.
            </p>
			</remarks><exception cref="T:System.InvalidOperationException">BeginXXX method used without providing an EndXXX event handler.</exception><exception cref="T:System.IO.IOException">The stream is not Readable.</exception><exception cref="T:System.ArgumentNullException"><i>buffer</i> is null.</exception><exception cref="T:System.ArgumentOutOfRangeException"><i>offset</i> or <i>count</i> is less than 0.</exception><exception cref="T:System.ArgumentException"><i>offset</i> + <i>count</i> is greater than the length of <i>buffer</i>.</exception><exception cref="T:System.Net.Sockets.SocketException">The socket is not connected.</exception><returns>An IAsyncResult that represents the asynchronous operation, which could still be pending.</returns>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates asynchronous receiving and sending of data.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub AsynchTcpDemo()

   ' Attempt to connect to an echo port.
   Try
      Tcp1.Connect("myserver", 7)
   Catch ex As Exception
      Return
   End Try

   ' Send data, since we are connected to an echo port, the same data should be returned.
   ' The following code demonstrates asynchronously sending data. When data has been sent
   ' the EndSend event will be raised.

   Dim buffer() As Byte = System.Text.Encoding.Default.GetBytes("a")
   Tcp1.BeginSend(buffer, 0, buffer.Length, Net.Sockets.SocketFlags.None, Nothing)
End Sub

Private Sub Tcp1_EndSend(ByVal sender As Object, ByVal e As Dart.PowerTCP.SegmentEventArgs) Handles Tcp1.EndSend
   ' Check for exception
   If e.Exception Is Nothing Then

      ' Send is complete. Display info about the data sent.
      Debug.WriteLine("Byte count sent: " + e.Segment.Count)
      Debug.WriteLine("Data sent: " + e.Segment.ToString())
      
      Dim buffer(Tcp1.ReceiveBufferSize) As Byte

      ' Receive the data. The EndReceive event will be raised upon completion.
      Tcp1.BeginReceive(buffer, 0, buffer.Length, Net.Sockets.SocketFlags.None, Nothing)
    
    End If
End Sub

Private Sub Tcp1_EndReceive(ByVal sender As Object, ByVal e As Dart.PowerTCP.SegmentEventArgs) Handles Tcp1.EndReceive
   ' Check for exception
   If e.Exception Is Nothing Then

      ' Receive is complete. Display info about the data sent.
      Debug.WriteLine("Byte count received: " + e.Segment.Count)
      Debug.WriteLine("Data received: " + e.Segment.ToString())

      ' Close the connection
      Tcp1.Close()
    End If
End Sub
<span class="lang">[C#]</span> 
private void AsynchTcpDemo()
{
    // Attempt to connect to an echo port.
    try
    {
        tcp1.Connect("myserver", 7);
    }
    catch(Exception ex)
    {return;}

    // Send data, since we are connected to an echo port, the same data should be returned.
    // The following code demonstrates asynchronously sending data. When data has been sent
    // the EndSend event will be raised.

    byte[] buffer = System.Text.Encoding.Default.GetBytes("a");
    tcp1.BeginSend(buffer, 0, buffer.Length, System.Net.Sockets.SocketFlags.None, null);
}

private void tcp1_EndSend(object sender, Dart.PowerTCP.SegmentEventArgs e)
{
    // Check for exception
    if(e.Exception == null)
    {
        // Send is complete. Display info about the data sent.
        Debug.WriteLine("Byte count sent: " + e.Segment.Count);
        Debug.WriteLine("Data sent: " + e.Segment.ToString());
                

        byte[] buffer = new byte[tcp1.ReceiveBufferSize];
                    
        // Receive the data. The EndReceive event will be raised upon completion.
        tcp1.BeginReceive(buffer, 0, buffer.Length, System.Net.Sockets.SocketFlags.None, null);
    }
}

private void tcp1_EndReceive(object sender, Dart.PowerTCP.SegmentEventArgs e)
{
    // Check for exception
    if(e.Exception == null)
    {
        // Receive is complete. Display info about the data sent.
        Debug.WriteLine("Byte count received: " + e.Segment.Count);
        Debug.WriteLine("Data received: " + e.Segment.ToString());

        // Close the connection
        tcp1.Close();
    }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Tcp.BeginReceive(System.Byte[])">
            <summary>
            Receive data into your buffer asynchronously. The Tcp.EndReceive event is raised when completed.
            </summary><param name="buffer">Destination memory location to store received data.</param><remarks>
				<p>The Tcp.BeginReceive method is used to receive data into a buffer asynchronously. When data has been received, the Tcp.EndReceive event is raised.
            A SegmentEventArgs object is passed into this event, containing a Segment object which encaspsulates information about 
            the data itself and the amount of bytes of data received.
            </p>
				<p>The object <i>state</i> is useful for any kind of state information you would like accessible in the Tcp.EndReceive event. Since the method is "disconnected" from the calling code and returns to the calling thread elsewhere, you may wish to pass an object/variable as state to be retrieved and used in the event handler.</p>
				<p>If you are using the Tcp component as a reference, you must "wire up" the event yourself. This involves creating a method as the event handler that implements the SegmentEventHandler delegate.</p>
				<p>To synchronously receive data, use the Tcp.Receive method.</p>
				<p>
            Use this method if you wish to receive data into a buffer transparently with minimal 
			application impact, as execution occurs on another thread. This method is the standard means for
			asynchronously receiving data. All available data is received.
            </p>
			</remarks><exception cref="T:System.InvalidOperationException">BeginXXX method used without providing an EndXXX event handler.</exception><exception cref="T:System.IO.IOException">The stream is not Readable.</exception><exception cref="T:System.ArgumentNullException"><i>buffer</i> is null.</exception><exception cref="T:System.ArgumentOutOfRangeException"><i>offset</i> or <i>count</i> is less than 0.</exception><exception cref="T:System.ArgumentException"><i>offset</i> + <i>count</i> is greater than the length of <i>buffer</i>.</exception><exception cref="T:System.Net.Sockets.SocketException">The socket is not connected.</exception><returns>An IAsyncResult that represents the asynchronous operation, which could still be pending.</returns>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates asynchronous receiving and sending of data.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub AsynchTcpDemo()

   ' Attempt to connect to an echo port.
   Try
      Tcp1.Connect("myserver", 7)
   Catch ex As Exception
      Return
   End Try

   ' Send data, since we are connected to an echo port, the same data should be returned.
   ' The following code demonstrates asynchronously sending data. When data has been sent
   ' the EndSend event will be raised.

   Dim buffer() As Byte = System.Text.Encoding.Default.GetBytes("a")
   Tcp1.BeginSend(buffer, 0, buffer.Length, Net.Sockets.SocketFlags.None, Nothing)
End Sub

Private Sub Tcp1_EndSend(ByVal sender As Object, ByVal e As Dart.PowerTCP.SegmentEventArgs) Handles Tcp1.EndSend
   ' Check for exception
   If e.Exception Is Nothing Then

      ' Send is complete. Display info about the data sent.
      Debug.WriteLine("Byte count sent: " + e.Segment.Count)
      Debug.WriteLine("Data sent: " + e.Segment.ToString())
      
      Dim buffer(Tcp1.ReceiveBufferSize) As Byte

      ' Receive the data. The EndReceive event will be raised upon completion.
      Tcp1.BeginReceive(buffer, 0, buffer.Length, Net.Sockets.SocketFlags.None, Nothing)
    
    End If
End Sub

Private Sub Tcp1_EndReceive(ByVal sender As Object, ByVal e As Dart.PowerTCP.SegmentEventArgs) Handles Tcp1.EndReceive
   ' Check for exception
   If e.Exception Is Nothing Then

      ' Receive is complete. Display info about the data sent.
      Debug.WriteLine("Byte count received: " + e.Segment.Count)
      Debug.WriteLine("Data received: " + e.Segment.ToString())

      ' Close the connection
      Tcp1.Close()
    End If
End Sub
<span class="lang">[C#]</span> 
private void AsynchTcpDemo()
{
    // Attempt to connect to an echo port.
    try
    {
        tcp1.Connect("myserver", 7);
    }
    catch(Exception ex)
    {return;}

    // Send data, since we are connected to an echo port, the same data should be returned.
    // The following code demonstrates asynchronously sending data. When data has been sent
    // the EndSend event will be raised.

    byte[] buffer = System.Text.Encoding.Default.GetBytes("a");
    tcp1.BeginSend(buffer, 0, buffer.Length, System.Net.Sockets.SocketFlags.None, null);
}

private void tcp1_EndSend(object sender, Dart.PowerTCP.SegmentEventArgs e)
{
    // Check for exception
    if(e.Exception == null)
    {
        // Send is complete. Display info about the data sent.
        Debug.WriteLine("Byte count sent: " + e.Segment.Count);
        Debug.WriteLine("Data sent: " + e.Segment.ToString());
                

        byte[] buffer = new byte[tcp1.ReceiveBufferSize];
                    
        // Receive the data. The EndReceive event will be raised upon completion.
        tcp1.BeginReceive(buffer, 0, buffer.Length, System.Net.Sockets.SocketFlags.None, null);
    }
}

private void tcp1_EndReceive(object sender, Dart.PowerTCP.SegmentEventArgs e)
{
    // Check for exception
    if(e.Exception == null)
    {
        // Receive is complete. Display info about the data sent.
        Debug.WriteLine("Byte count received: " + e.Segment.Count);
        Debug.WriteLine("Data received: " + e.Segment.ToString());

        // Close the connection
        tcp1.Close();
    }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Tcp.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Object)">
            <summary>
            Send data from your buffer asynchronously, specifying a buffer, offset, count and SocketFlags value. The Tcp.EndSend event is raised when completed.
            </summary><param name="buffer">Source memory location for the data to send.</param><param name="offset">Starting offset within buffer for sending.</param><param name="count">Number of bytes to send.</param><param name="socketFlags">Bitwise combination of special use sending parameters.</param><param name="state">User state information.</param><remarks>
				<p>The Tcp.BeginSend method is used to send data from a buffer asynchronously. When the data has been sent, the Tcp.EndSend event is raised.
            A SegmentEventArgs object is passed into this event, containing a Segment object, containing information about the data sent, including
            the data itself and the amount of bytes of data sent.
            </p>
				<p>If you are using the Tcp component as a reference, you must "wire up" the event yourself. This involves creating a method as the event handler that implements the SegmentEventHandler delegate.</p>
				<p>To synchronously send data, use the Tcp.Send method.</p>
				<p>
            Use this method if you wish to receive data into a buffer transparently with minimal 
			application impact, as execution occurs on another thread. This method allows for greater configuration
			over how the data is sent. For example, you could specify SocketFlags.DontRoute to specify to send without using routing tables.
			Also, if you would like to perform an asynchronous send and make user defined data available in the EndSend
			event, you must use this method.
            </p>
			</remarks><exception cref="T:System.InvalidOperationException">BeginXXX method used without providing an EndXXX event handler.</exception><exception cref="T:System.ArgumentOutOfRangeException"><i>offset</i> or <i>count</i> is less than 0.</exception><exception cref="T:System.ArgumentException"><i>offset</i> + <i>count</i> is greater than the length of <i>buffer</i>.</exception><exception cref="T:System.Net.Sockets.SocketException">The socket is not connected.</exception><returns>An IAsyncResult that represents the asynchronous operation, which could still be pending.</returns>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates asynchronous receiving and sending of data.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub AsynchTcpDemo()

   ' Attempt to connect to an echo port.
   Try
      Tcp1.Connect("myserver", 7)
   Catch ex As Exception
      Return
   End Try

   ' Send data, since we are connected to an echo port, the same data should be returned.
   ' The following code demonstrates asynchronously sending data. When data has been sent
   ' the EndSend event will be raised.

   Dim buffer() As Byte = System.Text.Encoding.Default.GetBytes("a")
   Tcp1.BeginSend(buffer, 0, buffer.Length, Net.Sockets.SocketFlags.None, Nothing)
End Sub

Private Sub Tcp1_EndSend(ByVal sender As Object, ByVal e As Dart.PowerTCP.SegmentEventArgs) Handles Tcp1.EndSend
   ' Check for exception
   If e.Exception Is Nothing Then

      ' Send is complete. Display info about the data sent.
      Debug.WriteLine("Byte count sent: " + e.Segment.Count)
      Debug.WriteLine("Data sent: " + e.Segment.ToString())
      
      Dim buffer(Tcp1.ReceiveBufferSize) As Byte

      ' Receive the data. The EndReceive event will be raised upon completion.
      Tcp1.BeginReceive(buffer, 0, buffer.Length, Net.Sockets.SocketFlags.None, Nothing)
    
    End If
End Sub

Private Sub Tcp1_EndReceive(ByVal sender As Object, ByVal e As Dart.PowerTCP.SegmentEventArgs) Handles Tcp1.EndReceive
   ' Check for exception
   If e.Exception Is Nothing Then

      ' Receive is complete. Display info about the data sent.
      Debug.WriteLine("Byte count received: " + e.Segment.Count)
      Debug.WriteLine("Data received: " + e.Segment.ToString())

      ' Close the connection
      Tcp1.Close()
    End If
End Sub
<span class="lang">[C#]</span> 
private void AsynchTcpDemo()
{
    // Attempt to connect to an echo port.
    try
    {
        tcp1.Connect("myserver", 7);
    }
    catch(Exception ex)
    {return;}

    // Send data, since we are connected to an echo port, the same data should be returned.
    // The following code demonstrates asynchronously sending data. When data has been sent
    // the EndSend event will be raised.

    byte[] buffer = System.Text.Encoding.Default.GetBytes("a");
    tcp1.BeginSend(buffer, 0, buffer.Length, System.Net.Sockets.SocketFlags.None, null);
}

private void tcp1_EndSend(object sender, Dart.PowerTCP.SegmentEventArgs e)
{
    // Check for exception
    if(e.Exception == null)
    {
        // Send is complete. Display info about the data sent.
        Debug.WriteLine("Byte count sent: " + e.Segment.Count);
        Debug.WriteLine("Data sent: " + e.Segment.ToString());
                

        byte[] buffer = new byte[tcp1.ReceiveBufferSize];
                    
        // Receive the data. The EndReceive event will be raised upon completion.
        tcp1.BeginReceive(buffer, 0, buffer.Length, System.Net.Sockets.SocketFlags.None, null);
    }
}

private void tcp1_EndReceive(object sender, Dart.PowerTCP.SegmentEventArgs e)
{
    // Check for exception
    if(e.Exception == null)
    {
        // Receive is complete. Display info about the data sent.
        Debug.WriteLine("Byte count received: " + e.Segment.Count);
        Debug.WriteLine("Data received: " + e.Segment.ToString());

        // Close the connection
        tcp1.Close();
    }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Tcp.BeginSend(System.Byte[])">
            <summary>
            Send data from your buffer asynchronously. The Tcp.EndSend event is raised when completed.
            </summary><param name="buffer">Source memory location for the data to send.</param><remarks>
				<p>The Tcp.BeginSend method is used to send data from a buffer asynchronously. When the data has been sent, the Tcp.EndSend event is raised.
            A SegmentEventArgs object is passed into this event, containing a Segment object, containing information about the data sent, including
            the data itself and the amount of bytes of data sent.
            </p>
				<p>If you are using the Tcp component as a reference, you must "wire up" the event yourself. This involves creating a method as the event handler that implements the SegmentEventHandler delegate.</p>
				<p>To synchronously send data, use the Tcp.Send method.</p>
				<p>
            Use this method if you wish to receive data into a buffer transparently with minimal 
			application impact, as execution occurs on another thread. This method is the standard means for
			asynchronously sending data.
            </p>
			</remarks><exception cref="T:System.InvalidOperationException">BeginXXX method used without providing an EndXXX event handler.</exception><exception cref="T:System.ArgumentOutOfRangeException"><i>offset</i> or <i>count</i> is less than 0.</exception><exception cref="T:System.ArgumentException"><i>offset</i> + <i>count</i> is greater than the length of <i>buffer</i>.</exception><exception cref="T:System.Net.Sockets.SocketException">The socket is not connected.</exception><returns>An IAsyncResult that represents the asynchronous operation, which could still be pending.</returns>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates asynchronous receiving and sending of data.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub AsynchTcpDemo()

   ' Attempt to connect to an echo port.
   Try
      Tcp1.Connect("myserver", 7)
   Catch ex As Exception
      Return
   End Try

   ' Send data, since we are connected to an echo port, the same data should be returned.
   ' The following code demonstrates asynchronously sending data. When data has been sent
   ' the EndSend event will be raised.

   Dim buffer() As Byte = System.Text.Encoding.Default.GetBytes("a")
   Tcp1.BeginSend(buffer, 0, buffer.Length, Net.Sockets.SocketFlags.None, Nothing)
End Sub

Private Sub Tcp1_EndSend(ByVal sender As Object, ByVal e As Dart.PowerTCP.SegmentEventArgs) Handles Tcp1.EndSend
   ' Check for exception
   If e.Exception Is Nothing Then

      ' Send is complete. Display info about the data sent.
      Debug.WriteLine("Byte count sent: " + e.Segment.Count)
      Debug.WriteLine("Data sent: " + e.Segment.ToString())
      
      Dim buffer(Tcp1.ReceiveBufferSize) As Byte

      ' Receive the data. The EndReceive event will be raised upon completion.
      Tcp1.BeginReceive(buffer, 0, buffer.Length, Net.Sockets.SocketFlags.None, Nothing)
    
    End If
End Sub

Private Sub Tcp1_EndReceive(ByVal sender As Object, ByVal e As Dart.PowerTCP.SegmentEventArgs) Handles Tcp1.EndReceive
   ' Check for exception
   If e.Exception Is Nothing Then

      ' Receive is complete. Display info about the data sent.
      Debug.WriteLine("Byte count received: " + e.Segment.Count)
      Debug.WriteLine("Data received: " + e.Segment.ToString())

      ' Close the connection
      Tcp1.Close()
    End If
End Sub
<span class="lang">[C#]</span> 
private void AsynchTcpDemo()
{
    // Attempt to connect to an echo port.
    try
    {
        tcp1.Connect("myserver", 7);
    }
    catch(Exception ex)
    {return;}

    // Send data, since we are connected to an echo port, the same data should be returned.
    // The following code demonstrates asynchronously sending data. When data has been sent
    // the EndSend event will be raised.

    byte[] buffer = System.Text.Encoding.Default.GetBytes("a");
    tcp1.BeginSend(buffer, 0, buffer.Length, System.Net.Sockets.SocketFlags.None, null);
}

private void tcp1_EndSend(object sender, Dart.PowerTCP.SegmentEventArgs e)
{
    // Check for exception
    if(e.Exception == null)
    {
        // Send is complete. Display info about the data sent.
        Debug.WriteLine("Byte count sent: " + e.Segment.Count);
        Debug.WriteLine("Data sent: " + e.Segment.ToString());
                

        byte[] buffer = new byte[tcp1.ReceiveBufferSize];
                    
        // Receive the data. The EndReceive event will be raised upon completion.
        tcp1.BeginReceive(buffer, 0, buffer.Length, System.Net.Sockets.SocketFlags.None, null);
    }
}

private void tcp1_EndReceive(object sender, Dart.PowerTCP.SegmentEventArgs e)
{
    // Check for exception
    if(e.Exception == null)
    {
        // Receive is complete. Display info about the data sent.
        Debug.WriteLine("Byte count received: " + e.Segment.Count);
        Debug.WriteLine("Data received: " + e.Segment.ToString());

        // Close the connection
        tcp1.Close();
    }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Tcp.Close(System.Net.Sockets.LingerOption)">
            <summary>
            Close the connection.
            </summary><param name="linger">If null is used, a graceful disconnect will occur without blocking execution of your application.</param><remarks>
				<p>
            This method is the recommended way to explicitly close a connection.
            The Tcp.Connected property is set to false when the connection is closed.
			</p>
				<p>
            The LingerOption parameter controls the amount of time to remain connected after the socket is closed.
            </p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates connecting to an echo port, sending data, receiving data, then closing the connection.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub TcpDemo()

   ' Connect to echo port.
   Tcp1.Connect("atropos", "7")

   ' Send some data
   Dim seg As Segment = Tcp1.Send("Hello")

   ' Display info
   Debug.WriteLine("Bytes of data sent: " &amp; seg.Count)
   Debug.WriteLine("Data sent: " &amp; seg.ToString())

   ' Receive response (this should be the same as the sent data)
   seg = Tcp1.Receive()

   ' Display info
   Debug.WriteLine("Bytes of data received: " &amp; seg.Count)
   Debug.WriteLine("Data received: " &amp; seg.ToString())

   ' Since connection is to an echo port, the client has to
   ' close the connection.
   Try
      Tcp1.Close()
   Catch ex As Exception
      ' Error, just dispose the object.
      Tcp1.Dispose()
   End Try

   '* Output
   '* --------------------------
   '* Bytes of data sent: 5
   '* Data sent: Hello
   '* Bytes of data received: 5
   '* Data received: Hello
   '*
End Sub
<span class="lang">[C#]</span> 
private void TcpDemo()
{
   // Connect to echo port.
   tcp1.Connect("atropos", "7"); 

   // Send some data
   Segment seg = tcp1.Send("Hello");

   // Display info
   Debug.WriteLine("Bytes of data sent: " + seg.Count);
   Debug.WriteLine("Data sent: " + seg.ToString());

   // Receive response (this should be the same as the sent data)
   seg = tcp1.Receive();

   // Display info
   Debug.WriteLine("Bytes of data received: " + seg.Count);
   Debug.WriteLine("Data received: " + seg.ToString());

   // Since connection is to an echo port, the client has to
   // close the connection.
   try
   {
      tcp1.Close();
   }
   catch(Exception ex)
   {
      // Error, just dispose the object.
      tcp1.Dispose();
   }

   /* Output
    * --------------------------
    * Bytes of data sent: 5
    * Data sent: Hello
    * Bytes of data received: 5
    * Data received: Hello
    */
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Tcp.Close">
            <summary>
            Close the connection.
            </summary><remarks>
				<p>
            This method is the recommended way to explicitly close a connection.
            The Tcp.Connected property is set to false when the connection is closed.
			</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates connecting to an echo port, sending data, receiving data, then closing the connection.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub TcpDemo()

   ' Connect to echo port.
   Tcp1.Connect("atropos", "7")

   ' Send some data
   Dim seg As Segment = Tcp1.Send("Hello")

   ' Display info
   Debug.WriteLine("Bytes of data sent: " &amp; seg.Count)
   Debug.WriteLine("Data sent: " &amp; seg.ToString())

   ' Receive response (this should be the same as the sent data)
   seg = Tcp1.Receive()

   ' Display info
   Debug.WriteLine("Bytes of data received: " &amp; seg.Count)
   Debug.WriteLine("Data received: " &amp; seg.ToString())

   ' Since connection is to an echo port, the client has to
   ' close the connection.
   Try
      Tcp1.Close()
   Catch ex As Exception
      ' Error, just dispose the object.
      Tcp1.Dispose()
   End Try

   '* Output
   '* --------------------------
   '* Bytes of data sent: 5
   '* Data sent: Hello
   '* Bytes of data received: 5
   '* Data received: Hello
   '*
End Sub
<span class="lang">[C#]</span> 
private void TcpDemo()
{
   // Connect to echo port.
   tcp1.Connect("atropos", "7"); 

   // Send some data
   Segment seg = tcp1.Send("Hello");

   // Display info
   Debug.WriteLine("Bytes of data sent: " + seg.Count);
   Debug.WriteLine("Data sent: " + seg.ToString());

   // Receive response (this should be the same as the sent data)
   seg = tcp1.Receive();

   // Display info
   Debug.WriteLine("Bytes of data received: " + seg.Count);
   Debug.WriteLine("Data received: " + seg.ToString());

   // Since connection is to an echo port, the client has to
   // close the connection.
   try
   {
      tcp1.Close();
   }
   catch(Exception ex)
   {
      // Error, just dispose the object.
      tcp1.Dispose();
   }

   /* Output
    * --------------------------
    * Bytes of data sent: 5
    * Data sent: Hello
    * Bytes of data received: 5
    * Data received: Hello
    */
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Tcp.Connect(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Connect to a host, specifying the local interface to use.
            </summary><param name="server">Remote hostname or address in dot notation.</param><param name="serverPort">Remote port, a number between 1 and 65535, inclusive.</param><param name="client">Optional local hostname or address in dot notation. Use "" as default.</param><param name="clientPort">Optional local port, a number between 1 and 65535, inclusive. Use 0 as default.</param><remarks>
				<p>The Tcp.Connect method establishes a network connection between the specified local network interface/port and the device identified by remote network address/port. If no exception is thrown, the connection has succeeded and the Tcp.Connected property will return true after this method returns. Once the connection has been made, you can send/receive data to/from the server.</p>
				<p>This method always blocks until the attempted connection succeeds or fails.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates connecting to a server while specifying a local interface to use.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Connect to the server, specifying the local interface to use
Tcp1.Connect("atropos", 13, "192.168.0.83", 8888)

' Since connection was to DAYTIME port (13), simply receive the time
Dim seg As Segment = Tcp1.Receive()

Debug.WriteLine("Time reported by server: " + seg.ToString())
<span class="lang">[C#]</span> 
// Connect to the server, specifying the local interface to use
tcp1.Connect("atropos", 13, "192.168.0.83", 8888);

// Since connection was to DAYTIME port (13), simply receive the time
Segment seg = tcp1.Receive();

Debug.WriteLine("Time reported by server: " + seg.ToString());
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Tcp.Connect(System.String,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Connect to a host, specifying the local interface and a range of local ports to use.
            </summary><param name="server">Remote hostname or address in dot notation.</param><param name="serverPort">Remote port, a number between 1 and 65535, inclusive.</param><param name="client">Optional local hostname or address in dot notation. Use "" as default.</param><param name="clientPortMin">The minimum client port number to use as a local interface.</param><param name="clientPortMax">The maximum client port number to use as a local interface.</param><remarks>
				<p>The Tcp.Connect method establishes a network connection between the specified local network interface/port and the device identified by remote network address/port. If no exception is thrown, the connection has succeeded and the Tcp.Connected property will return true after this method returns. Once the connection has been made, you can send/receive data to/from the server.</p>
				<p>This method always blocks until the attempted connection succeeds or fails.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Tcp.Connect(System.String,System.Int32)">
            <summary>
            Connect to a host.
            </summary><param name="server">Remote hostname or address in dot notation.</param><param name="serverPort">Remote port, a number between 1 and 65535, inclusive.</param><remarks>
				<p>The Tcp.Connect method establishes a network connection between the default local network interface/port and the device identified by remote network address/port. If no exception is thrown, the connection has succeeded and the Tcp.Connected property will return true after this method returns. Once the connection has been made, you can send/receive data to/from the server.</p>
				<p>This method always blocks until the attempted connection succeeds or fails.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates connecting implementing the SMTP protocol using the Tcp component to send a simple message.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub TcpDemo()

   ' The following code assumes that good responses are always received from
   ' the server. More robust code should check each response and handle appropriately.

   ' Connect to SMTP port
   Tcp1.Connect("mail", 25)

   ' Send the EHLO command
   Tcp1.Send("EHLO myserver" + vbCrLf)

   ' Get response from the server
   Dim seg As Segment = Tcp1.Receive()

   ' Send MAIL FROM command
   Tcp1.Send("MAIL FROM: test@myserver.com" + vbCrLf)

   ' Get response from the server
   seg = Tcp1.Receive()

   ' Send RCPT TO command
   Tcp1.Send("RCPT TO: you@yourserver.com" + vbCrLf)

   ' Get response from the server
   seg = Tcp1.Receive()

   ' Send DATA command
   Tcp1.Send("DATA" + vbCrLf)

   ' Get response from the server
   seg = Tcp1.Receive()

   ' Send DATA
   Tcp1.Send("Test Message" + vbCrLf + "." + vbCrLf)

   ' Receive response from the server
   seg = Tcp1.Receive()

   ' Write output
   Debug.WriteLine("Operation complete. The following information")
   Debug.WriteLine("was reported by the server:")
   Debug.WriteLine(seg.ToString())
End Sub
<span class="lang">[C#]</span> 
private void TcpDemo()
{
 
   // The following code assumes that good responses are always received from
   // the server. More robust code should check each response and handle appropriately.

   // Connect to SMTP port
   tcp1.Connect("mail", 25);

   // Send the EHLO command
   tcp1.Send("EHLO myserver\r\n");

   // Get response from the server
   Segment seg = tcp1.Receive();

   // Send MAIL FROM command
   tcp1.Send("MAIL FROM: test@myserver.com\r\n");

   // Get response from the server
   seg = tcp1.Receive();

   // Send RCPT TO command
   tcp1.Send("RCPT TO: you@yourserver.com\r\n");

   // Get response from the server
   seg = tcp1.Receive();

   // Send DATA command
   tcp1.Send("DATA\r\n");

   // Get response from the server
   seg = tcp1.Receive();

   // Send DATA
   tcp1.Send("Test Message\r\n.\r\n");

   // Receive response from the server
   seg = tcp1.Receive();

   // Write output
   Debug.WriteLine("Operation complete. The following information");
   Debug.WriteLine("was reported by the server about the operation:");
   Debug.WriteLine(seg.ToString());
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Tcp.Connect(System.String,System.String)">
            <summary>
            Connect to a host.
            </summary><param name="server">Remote hostname or address in dot notation.</param><param name="serverPort">A string value which can be cast to an Integer between 1 and 65535, inclusive.</param><remarks>
				<p>The Tcp.Connect method establishes a network connection between the default local network interface/port and the device identified by remote network address/port. If no exception is thrown, the connection has succeeded and the Tcp.Connected property will return true after this method returns. Once the connection has been made, you can send/receive data to/from the server.</p>
				<p>This method always blocks until the attempted connection succeeds or fails.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates connecting to an echo port, sending data, receiving data, then closing the connection.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub TcpDemo()

   ' Connect to echo port.
   Tcp1.Connect("atropos", "7")

   ' Send some data
   Dim seg As Segment = Tcp1.Send("Hello")

   ' Display info
   Debug.WriteLine("Bytes of data sent: " &amp; seg.Count)
   Debug.WriteLine("Data sent: " &amp; seg.ToString())

   ' Receive response (this should be the same as the sent data)
   seg = Tcp1.Receive()

   ' Display info
   Debug.WriteLine("Bytes of data received: " &amp; seg.Count)
   Debug.WriteLine("Data received: " &amp; seg.ToString())

   ' Since connection is to an echo port, the client has to
   ' close the connection.
   Try
      Tcp1.Close()
   Catch ex As Exception
      ' Error, just dispose the object.
      Tcp1.Dispose()
   End Try

   '* Output
   '* --------------------------
   '* Bytes of data sent: 5
   '* Data sent: Hello
   '* Bytes of data received: 5
   '* Data received: Hello
   '*
End Sub
<span class="lang">[C#]</span> 
private void TcpDemo()
{
   // Connect to echo port.
   tcp1.Connect("atropos", "7"); 

   // Send some data
   Segment seg = tcp1.Send("Hello");

   // Display info
   Debug.WriteLine("Bytes of data sent: " + seg.Count);
   Debug.WriteLine("Data sent: " + seg.ToString());

   // Receive response (this should be the same as the sent data)
   seg = tcp1.Receive();

   // Display info
   Debug.WriteLine("Bytes of data received: " + seg.Count);
   Debug.WriteLine("Data received: " + seg.ToString());

   // Since connection is to an echo port, the client has to
   // close the connection.
   try
   {
      tcp1.Close();
   }
   catch(Exception ex)
   {
      // Error, just dispose the object.
      tcp1.Dispose();
   }

   /* Output
    * --------------------------
    * Bytes of data sent: 5
    * Data sent: Hello
    * Bytes of data received: 5
    * Data received: Hello
    */
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Tcp.Receive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
            Receive data from the host, specifying a buffer, offset, count and SocketFlags value.
            </summary><param name="buffer">Destination memory location to store received data.</param><param name="offset">Starting offset within buffer for filling.</param><param name="count">Maximum number of bytes to receive.</param><param name="socketFlags">A bitwise combination of special use receiving parameters.</param><returns>A Segment object encapsulating the data received.</returns><remarks>
				<p>After connecting, data can be received using the Tcp.Recieve method. All Tcp.Receive methods
            return a Segment object, encapsulating the data received. In order to access the data, simply
            access the properties of the Segment object returned such as Segment.Buffer (to access the data in a byte array) or Segment.ToString 
            (to access the data as a string).</p>
				<p>This method is the only way to receive data from a host while specifying a SocketFlags parameter.</p>
			</remarks><exception cref="T:System.IO.IOException">The stream is not Readable.</exception><exception cref="T:System.ArgumentNullException"><i>buffer</i> is null.</exception><exception cref="T:System.ArgumentOutOfRangeException"><i>offset</i> or <i>count</i> is less than 0.</exception><exception cref="T:System.ArgumentException"><i>offset</i> + <i>count</i> is greater than the length of <i>buffer</i>.</exception><exception cref="T:System.Net.Sockets.SocketException">The socket is not connected.</exception>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates sending bytes to the server with a SocketFlag option. </p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub Test()
   ' Connect to an echo port
   Tcp1.Connect("atropos", 7)

   Dim sendbuffer() As Byte = System.Text.Encoding.Default.GetBytes("abcdefg")

   ' Send some bytes with "OutOfBand" SocketFlag option
   Tcp1.Send(sendbuffer, 0, sendbuffer.Length, SocketFlags.OutOfBand)

   Dim recvbuffer(sendbuffer.Length) As Byte

   ' Server will echo the bytes back. Receive the bytes.
   Tcp1.Receive(recvbuffer, 0, recvbuffer.Length, SocketFlags.None)

   ' Close the connection.
   Tcp1.Close()
End Sub
<span class="lang">[C#]</span> 
private void Test()
{
   // Connect to the echo port
   tcp1.Connect("atropos", 7);

   byte[] sendbuffer = System.Text.Encoding.Default.GetBytes("abcdefg");

   // Send some bytes with "OutOfBand" SocketFlag option
   tcp1.Send(sendbuffer, 0, sendbuffer.Length, SocketFlags.OutOfBand);

   byte[] recvbuffer = new byte[sendbuffer.Length];

   // Server will echo the bytes back. Receive the bytes.
   tcp1.Receive(recvbuffer, 0, recvbuffer.Length, SocketFlags.None);

   // Close the connection.
   tcp1.Close();
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Tcp.Receive(System.Byte[])">
            <summary>
            Receive data from the host.
            </summary><param name="buffer">Destination memory location to store received data.</param><returns>A Segment object encapsulating the data received.</returns><remarks>
				<p>After connecting, data can be received using the Tcp.Recieve method. All Tcp.Receive methods
            return a Segment object, encapsulating the data received. In order to access the data, simply
            access the properties of the Segment object returned such as Segment.Buffer (to access the data in a byte array) or Segment.ToString 
            (to access the data as a string).</p>
				<p>If the amount of data received from the server exceeds Tcp.ReceiveBufferSize, the Tcp.Receive method will have to be called
			multiple times until the socket closes.
			</p>
				<p>This method is functionally equivalent to <a href="Dart.PowerTCP.SecureFtp.SegmentedStream.Read2.html">Tcp.Stream.Write(byte[])</a>.</p>
			</remarks><exception cref="T:System.IO.IOException">The stream is not Readable.</exception><exception cref="T:System.ArgumentNullException"><i>buffer</i> is null.</exception><exception cref="T:System.ArgumentOutOfRangeException"><i>offset</i> or <i>count</i> is less than 0.</exception><exception cref="T:System.ArgumentException"><i>offset</i> + <i>count</i> is greater than the length of <i>buffer</i>.</exception><exception cref="T:System.Net.Sockets.SocketException">The socket is not connected.</exception>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates sending bytes to the server. </p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub Test()
   ' Connect to an echo port
   Tcp1.Connect("atropos", 7)

   Dim sendbuffer() As Byte = System.Text.Encoding.Default.GetBytes("abcdefg")

   ' Send some bytes.
   Tcp1.Send(sendbuffer)

   Dim recvbuffer(sendbuffer.Length) As Byte

   ' Server will echo the bytes back. Receive the bytes.
   Tcp1.Receive(recvbuffer)

   ' Close the connection.
   Tcp1.Close()
End Sub
<span class="lang">[C#]</span> 
private void Test()
{
   // Connect to the echo port
   tcp1.Connect("atropos", 7);

   byte[] sendbuffer = System.Text.Encoding.Default.GetBytes("abcdefg");

   // Send some bytes.
   tcp1.Send(sendbuffer);

   byte[] recvbuffer = new byte[sendbuffer.Length];

   // Server will echo the bytes back. Receive the bytes.
   tcp1.Receive(recvbuffer);

   // Close the connection.
   tcp1.Close();
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Tcp.Receive">
            <summary>
            Receive data from the host.
            </summary><returns>A Segment object encapsulating the data received.</returns><remarks>
				<p>After connecting, data can be received using the Tcp.Recieve method. All Tcp.Receive methods
            return a Segment object, encapsulating the data received. In order to access the data, simply
            access the properties of the Segment object returned such as Segment.Buffer (to access the data in a byte array) or Segment.ToString 
            (to access the data as a string).</p>
				<p>If the amount of data received from the server exceeds Tcp.ReceiveBufferSize, the Tcp.Receive method will have to be called
			multiple times until the socket closes.
			</p>
				<p>This method is functionally equivalent to <a href="Dart.PowerTCP.SecureFtp.SegmentedStream.Read4.html">Tcp.Stream.Write()</a>.</p>
			</remarks><exception cref="T:System.IO.IOException">The stream is not Readable.</exception><exception cref="T:System.ArgumentNullException"><i>buffer</i> is null.</exception><exception cref="T:System.ArgumentOutOfRangeException"><i>offset</i> or <i>count</i> is less than 0.</exception><exception cref="T:System.ArgumentException"><i>offset</i> + <i>count</i> is greater than the length of <i>buffer</i>.</exception><exception cref="T:System.Net.Sockets.SocketException">The socket is not connected.</exception>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates connecting implementing the SMTP protocol using the Tcp component to send a simple message.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub TcpDemo()

   ' The following code assumes that good responses are always received from
   ' the server. More robust code should check each response and handle appropriately.

   ' Connect to SMTP port
   Tcp1.Connect("mail", 25)

   ' Send the EHLO command
   Tcp1.Send("EHLO myserver" + vbCrLf)

   ' Get response from the server
   Dim seg As Segment = Tcp1.Receive()

   ' Send MAIL FROM command
   Tcp1.Send("MAIL FROM: test@myserver.com" + vbCrLf)

   ' Get response from the server
   seg = Tcp1.Receive()

   ' Send RCPT TO command
   Tcp1.Send("RCPT TO: you@yourserver.com" + vbCrLf)

   ' Get response from the server
   seg = Tcp1.Receive()

   ' Send DATA command
   Tcp1.Send("DATA" + vbCrLf)

   ' Get response from the server
   seg = Tcp1.Receive()

   ' Send DATA
   Tcp1.Send("Test Message" + vbCrLf + "." + vbCrLf)

   ' Receive response from the server
   seg = Tcp1.Receive()

   ' Write output
   Debug.WriteLine("Operation complete. The following information")
   Debug.WriteLine("was reported by the server:")
   Debug.WriteLine(seg.ToString())
End Sub
<span class="lang">[C#]</span> 
private void TcpDemo()
{
 
   // The following code assumes that good responses are always received from
   // the server. More robust code should check each response and handle appropriately.

   // Connect to SMTP port
   tcp1.Connect("mail", 25);

   // Send the EHLO command
   tcp1.Send("EHLO myserver\r\n");

   // Get response from the server
   Segment seg = tcp1.Receive();

   // Send MAIL FROM command
   tcp1.Send("MAIL FROM: test@myserver.com\r\n");

   // Get response from the server
   seg = tcp1.Receive();

   // Send RCPT TO command
   tcp1.Send("RCPT TO: you@yourserver.com\r\n");

   // Get response from the server
   seg = tcp1.Receive();

   // Send DATA command
   tcp1.Send("DATA\r\n");

   // Get response from the server
   seg = tcp1.Receive();

   // Send DATA
   tcp1.Send("Test Message\r\n.\r\n");

   // Receive response from the server
   seg = tcp1.Receive();

   // Write output
   Debug.WriteLine("Operation complete. The following information");
   Debug.WriteLine("was reported by the server about the operation:");
   Debug.WriteLine(seg.ToString());
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Tcp.Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
            Send data to the server, specifying a buffer, offset, count and SocketFlags value.
            </summary><param name="buffer">Source memory location for the data to send.</param><param name="offset">Starting offset within buffer for sending.</param><param name="count">Number of bytes to send.</param><param name="socketFlags">A bitwise combination of special use sending parameters.</param><returns>A Segment object encapsulating information about the data sent.</returns><remarks>
				<p>After connecting, data can be received using the Tcp.Send method. All Tcp.Send methods
            return a Segment object, encapsulating information about the data sent such as the data sent, and the amount of bytes of data sent.</p>
				<p>This method is the only way to send data to a host while specifying a SocketFlags parameter.</p>
			</remarks><exception cref="T:System.ArgumentOutOfRangeException"><i>offset</i> or <i>count</i> is less than 0.</exception><exception cref="T:System.ArgumentException"><i>offset</i> + <i>count</i> is greater than the length of <i>buffer</i>.</exception><exception cref="T:System.Net.Sockets.SocketException">The socket is not connected.</exception>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates sending bytes to the server with a SocketFlag option. </p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub Test()
   ' Connect to an echo port
   Tcp1.Connect("atropos", 7)

   Dim sendbuffer() As Byte = System.Text.Encoding.Default.GetBytes("abcdefg")

   ' Send some bytes with "OutOfBand" SocketFlag option
   Tcp1.Send(sendbuffer, 0, sendbuffer.Length, SocketFlags.OutOfBand)

   Dim recvbuffer(sendbuffer.Length) As Byte

   ' Server will echo the bytes back. Receive the bytes.
   Tcp1.Receive(recvbuffer, 0, recvbuffer.Length, SocketFlags.None)

   ' Close the connection.
   Tcp1.Close()
End Sub
<span class="lang">[C#]</span> 
private void Test()
{
   // Connect to the echo port
   tcp1.Connect("atropos", 7);

   byte[] sendbuffer = System.Text.Encoding.Default.GetBytes("abcdefg");

   // Send some bytes with "OutOfBand" SocketFlag option
   tcp1.Send(sendbuffer, 0, sendbuffer.Length, SocketFlags.OutOfBand);

   byte[] recvbuffer = new byte[sendbuffer.Length];

   // Server will echo the bytes back. Receive the bytes.
   tcp1.Receive(recvbuffer, 0, recvbuffer.Length, SocketFlags.None);

   // Close the connection.
   tcp1.Close();
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Tcp.Send(System.Byte[])">
            <summary>
            Send data to the server.
            </summary><param name="buffer">Source memory location for the data to send.</param><returns>A Segment object encapsulating information about the data sent.</returns><remarks>
				<p>After connecting, data can be received using the Tcp.Send method. All Tcp.Send methods
            return a Segment object, encapsulating information about the data sent such as the data sent, and the amount of bytes of data sent.</p>
				<p>This method is functionally equivalent to <a href="Dart.PowerTCP.SecureFtp.SegmentedStream.Write4.html">Tcp.Stream.Write(byte[])</a>.</p>
			</remarks><exception cref="T:System.ArgumentOutOfRangeException"><i>offset</i> or <i>count</i> is less than 0.</exception><exception cref="T:System.ArgumentException"><i>offset</i> + <i>count</i> is greater than the length of <i>buffer</i>.</exception><exception cref="T:System.Net.Sockets.SocketException">The socket is not connected.</exception>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates sending bytes to the server. </p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub Test()
   ' Connect to an echo port
   Tcp1.Connect("atropos", 7)

   Dim sendbuffer() As Byte = System.Text.Encoding.Default.GetBytes("abcdefg")

   ' Send some bytes.
   Tcp1.Send(sendbuffer)

   Dim recvbuffer(sendbuffer.Length) As Byte

   ' Server will echo the bytes back. Receive the bytes.
   Tcp1.Receive(recvbuffer)

   ' Close the connection.
   Tcp1.Close()
End Sub
<span class="lang">[C#]</span> 
private void Test()
{
   // Connect to the echo port
   tcp1.Connect("atropos", 7);

   byte[] sendbuffer = System.Text.Encoding.Default.GetBytes("abcdefg");

   // Send some bytes.
   tcp1.Send(sendbuffer);

   byte[] recvbuffer = new byte[sendbuffer.Length];

   // Server will echo the bytes back. Receive the bytes.
   tcp1.Receive(recvbuffer);

   // Close the connection.
   tcp1.Close();
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Tcp.Send(System.String)">
            <summary>
            Send data to the server.
            </summary><param name="buffer">Data to be decoded into bytes and sent.</param><returns>A Segment object encapsulating information about the data sent.</returns><remarks>
				<p>After connecting, data can be received using the Tcp.Send method. All Tcp.Send methods
            return a Segment object, encapsulating information about the data sent such as the data sent, and the amount of bytes of data sent.</p>
				<p>This method is functionally equivalent to <a href="Dart.PowerTCP.SecureFtp.SegmentedStream.Write.html">Tcp.Stream.Write</a>.</p>
			</remarks><exception cref="T:System.ArgumentOutOfRangeException"><i>offset</i> or <i>count</i> is less than 0.</exception><exception cref="T:System.ArgumentException"><i>offset</i> + <i>count</i> is greater than the length of <i>buffer</i>.</exception><exception cref="T:System.Net.Sockets.SocketException">The socket is not connected.</exception>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates connecting implementing the SMTP protocol using the Tcp component to send a simple message.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub TcpDemo()

   ' The following code assumes that good responses are always received from
   ' the server. More robust code should check each response and handle appropriately.

   ' Connect to SMTP port
   Tcp1.Connect("mail", 25)

   ' Send the EHLO command
   Tcp1.Send("EHLO myserver" + vbCrLf)

   ' Get response from the server
   Dim seg As Segment = Tcp1.Receive()

   ' Send MAIL FROM command
   Tcp1.Send("MAIL FROM: test@myserver.com" + vbCrLf)

   ' Get response from the server
   seg = Tcp1.Receive()

   ' Send RCPT TO command
   Tcp1.Send("RCPT TO: you@yourserver.com" + vbCrLf)

   ' Get response from the server
   seg = Tcp1.Receive()

   ' Send DATA command
   Tcp1.Send("DATA" + vbCrLf)

   ' Get response from the server
   seg = Tcp1.Receive()

   ' Send DATA
   Tcp1.Send("Test Message" + vbCrLf + "." + vbCrLf)

   ' Receive response from the server
   seg = Tcp1.Receive()

   ' Write output
   Debug.WriteLine("Operation complete. The following information")
   Debug.WriteLine("was reported by the server:")
   Debug.WriteLine(seg.ToString())
End Sub
<span class="lang">[C#]</span> 
private void TcpDemo()
{
 
   // The following code assumes that good responses are always received from
   // the server. More robust code should check each response and handle appropriately.

   // Connect to SMTP port
   tcp1.Connect("mail", 25);

   // Send the EHLO command
   tcp1.Send("EHLO myserver\r\n");

   // Get response from the server
   Segment seg = tcp1.Receive();

   // Send MAIL FROM command
   tcp1.Send("MAIL FROM: test@myserver.com\r\n");

   // Get response from the server
   seg = tcp1.Receive();

   // Send RCPT TO command
   tcp1.Send("RCPT TO: you@yourserver.com\r\n");

   // Get response from the server
   seg = tcp1.Receive();

   // Send DATA command
   tcp1.Send("DATA\r\n");

   // Get response from the server
   seg = tcp1.Receive();

   // Send DATA
   tcp1.Send("Test Message\r\n.\r\n");

   // Receive response from the server
   seg = tcp1.Receive();

   // Write output
   Debug.WriteLine("Operation complete. The following information");
   Debug.WriteLine("was reported by the server about the operation:");
   Debug.WriteLine(seg.ToString());
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Tcp.BlockingSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
            BlockingSend is ALWAYS used for sending data
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <param name="socketFlags"></param>
            <returns></returns>
        </member>
        <member name="E:Dart.PowerTCP.Mail.Tcp.EndConnect">
            <summary>
            Raised when the Tcp.BeginConnect request completes.
            </summary><remarks>
				<p>This event is raised when the asynchronous method call Tcp.BeginConnect completes. An EventArgs object is passed into the event, containing information about the event.</p>
				<p>For more information on using events using PowerTCP.NET within the Visual Studio.NET environment, see the topic, Using Events In PowerTCP.</p>
				<p>If you are using the Tcp component as a reference, you must create a method to handle the event yourself.</p>
				<p>This event MUST be implemented if you are using the Tcp.BeginConnect method.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates asynchronously connecting using the BeginConnect method.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub Test()
   ' Begin to asynchronously connect to an echo port.
   Tcp1.BeginConnect("atropos", 7)
End Sub

Private Sub Tcp1_EndConnect(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureFtp.ExceptionEventArgs) Handles Tcp1.EndConnect
   ' Connect complete, check for any exceptions
   If e.Exception Is Nothing Then
      ' Now send some data.
      Tcp1.Send("hello")

      ' Receive the data back.
      Dim seg As Segment = Tcp1.Receive()
      Debug.WriteLine(seg.ToString())
   End If
End Sub
<span class="lang">[C#]</span> 
private void Test()
{
   // Begin to asynchronously connect to an echo port.
   tcp1.BeginConnect("atropos", 7);
}

private void tcp1_EndConnect(object sender, Dart.PowerTCP.SecureFtp.ExceptionEventArgs e)
{
   // Connect complete, check for any exceptions
   if(e.Exception == null)
   {
      // Now send some data.
      tcp1.Send("hello");

      // Receive the data back.
      Segment seg = tcp1.Receive();

      Debug.WriteLine(seg.ToString());
   }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="E:Dart.PowerTCP.Mail.Tcp.EndReceive">
            <summary>
            Raised when the Tcp.BeginReceive request completes.
            </summary><remarks>
				<p>This event is raised when the asynchronous method call Tcp.BeginReceive completes. A SegmentEventArgs object is passed into the event, containing information about the event, such
           as the data received.</p>
				<p>If any errors occurred during the asynchronous operation, they would be returned in the SegmentEventArgs object, check SegmentEventArgs.Exception to check for any exception.</p>
				<p>For more information on using events using PowerTCP.NET within the Visual Studio.NET environment, see the topic, Using Events In PowerTCP.</p>
				<p>If you are using the Tcp component as a reference, you must create a method to handle the event yourself.</p>
				<p>This event MUST be implemented if you are using the Tcp.BeginReceive method.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates asynchronous receiving and sending of data.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub AsynchTcpDemo()

   ' Attempt to connect to an echo port.
   Try
      Tcp1.Connect("myserver", 7)
   Catch ex As Exception
      Return
   End Try

   ' Send data, since we are connected to an echo port, the same data should be returned.
   ' The following code demonstrates asynchronously sending data. When data has been sent
   ' the EndSend event will be raised.

   Dim buffer() As Byte = System.Text.Encoding.Default.GetBytes("a")
   Tcp1.BeginSend(buffer, 0, buffer.Length, Net.Sockets.SocketFlags.None, Nothing)
End Sub

Private Sub Tcp1_EndSend(ByVal sender As Object, ByVal e As Dart.PowerTCP.SegmentEventArgs) Handles Tcp1.EndSend
   ' Check for exception
   If e.Exception Is Nothing Then

      ' Send is complete. Display info about the data sent.
      Debug.WriteLine("Byte count sent: " + e.Segment.Count)
      Debug.WriteLine("Data sent: " + e.Segment.ToString())
      
      Dim buffer(Tcp1.ReceiveBufferSize) As Byte

      ' Receive the data. The EndReceive event will be raised upon completion.
      Tcp1.BeginReceive(buffer, 0, buffer.Length, Net.Sockets.SocketFlags.None, Nothing)
    
    End If
End Sub

Private Sub Tcp1_EndReceive(ByVal sender As Object, ByVal e As Dart.PowerTCP.SegmentEventArgs) Handles Tcp1.EndReceive
   ' Check for exception
   If e.Exception Is Nothing Then

      ' Receive is complete. Display info about the data sent.
      Debug.WriteLine("Byte count received: " + e.Segment.Count)
      Debug.WriteLine("Data received: " + e.Segment.ToString())

      ' Close the connection
      Tcp1.Close()
    End If
End Sub
<span class="lang">[C#]</span> 
private void AsynchTcpDemo()
{
    // Attempt to connect to an echo port.
    try
    {
        tcp1.Connect("myserver", 7);
    }
    catch(Exception ex)
    {return;}

    // Send data, since we are connected to an echo port, the same data should be returned.
    // The following code demonstrates asynchronously sending data. When data has been sent
    // the EndSend event will be raised.

    byte[] buffer = System.Text.Encoding.Default.GetBytes("a");
    tcp1.BeginSend(buffer, 0, buffer.Length, System.Net.Sockets.SocketFlags.None, null);
}

private void tcp1_EndSend(object sender, Dart.PowerTCP.SegmentEventArgs e)
{
    // Check for exception
    if(e.Exception == null)
    {
        // Send is complete. Display info about the data sent.
        Debug.WriteLine("Byte count sent: " + e.Segment.Count);
        Debug.WriteLine("Data sent: " + e.Segment.ToString());
                

        byte[] buffer = new byte[tcp1.ReceiveBufferSize];
                    
        // Receive the data. The EndReceive event will be raised upon completion.
        tcp1.BeginReceive(buffer, 0, buffer.Length, System.Net.Sockets.SocketFlags.None, null);
    }
}

private void tcp1_EndReceive(object sender, Dart.PowerTCP.SegmentEventArgs e)
{
    // Check for exception
    if(e.Exception == null)
    {
        // Receive is complete. Display info about the data sent.
        Debug.WriteLine("Byte count received: " + e.Segment.Count);
        Debug.WriteLine("Data received: " + e.Segment.ToString());

        // Close the connection
        tcp1.Close();
    }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="E:Dart.PowerTCP.Mail.Tcp.EndSend">
            <summary>
            Raised when the Tcp.BeginSend request completes.
            </summary><remarks>
				<p>This event is raised when the asynchronous method call Tcp.BeginSend completes. A SegmentEventArgs object is passed into the event, containing information about the event, such
           as the data sent.</p>
				<p>If any errors occurred during the asynchronous operation, they would be returned in the SegmentEventArgs object, check SegmentEventArgs.Exception to check for any exception.</p>
				<p>For more information on using events using PowerTCP.NET within the Visual Studio.NET environment, see the topic, Using Events In PowerTCP.</p>
				<p>If you are using the Tcp component as a reference, you must create a method to handle the event yourself.</p>
				<p>This event MUST be implemented if you are using the Tcp.BeginSend method.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates asynchronous receiving and sending of data.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub AsynchTcpDemo()

   ' Attempt to connect to an echo port.
   Try
      Tcp1.Connect("myserver", 7)
   Catch ex As Exception
      Return
   End Try

   ' Send data, since we are connected to an echo port, the same data should be returned.
   ' The following code demonstrates asynchronously sending data. When data has been sent
   ' the EndSend event will be raised.

   Dim buffer() As Byte = System.Text.Encoding.Default.GetBytes("a")
   Tcp1.BeginSend(buffer, 0, buffer.Length, Net.Sockets.SocketFlags.None, Nothing)
End Sub

Private Sub Tcp1_EndSend(ByVal sender As Object, ByVal e As Dart.PowerTCP.SegmentEventArgs) Handles Tcp1.EndSend
   ' Check for exception
   If e.Exception Is Nothing Then

      ' Send is complete. Display info about the data sent.
      Debug.WriteLine("Byte count sent: " + e.Segment.Count)
      Debug.WriteLine("Data sent: " + e.Segment.ToString())
      
      Dim buffer(Tcp1.ReceiveBufferSize) As Byte

      ' Receive the data. The EndReceive event will be raised upon completion.
      Tcp1.BeginReceive(buffer, 0, buffer.Length, Net.Sockets.SocketFlags.None, Nothing)
    
    End If
End Sub

Private Sub Tcp1_EndReceive(ByVal sender As Object, ByVal e As Dart.PowerTCP.SegmentEventArgs) Handles Tcp1.EndReceive
   ' Check for exception
   If e.Exception Is Nothing Then

      ' Receive is complete. Display info about the data sent.
      Debug.WriteLine("Byte count received: " + e.Segment.Count)
      Debug.WriteLine("Data received: " + e.Segment.ToString())

      ' Close the connection
      Tcp1.Close()
    End If
End Sub
<span class="lang">[C#]</span> 
private void AsynchTcpDemo()
{
    // Attempt to connect to an echo port.
    try
    {
        tcp1.Connect("myserver", 7);
    }
    catch(Exception ex)
    {return;}

    // Send data, since we are connected to an echo port, the same data should be returned.
    // The following code demonstrates asynchronously sending data. When data has been sent
    // the EndSend event will be raised.

    byte[] buffer = System.Text.Encoding.Default.GetBytes("a");
    tcp1.BeginSend(buffer, 0, buffer.Length, System.Net.Sockets.SocketFlags.None, null);
}

private void tcp1_EndSend(object sender, Dart.PowerTCP.SegmentEventArgs e)
{
    // Check for exception
    if(e.Exception == null)
    {
        // Send is complete. Display info about the data sent.
        Debug.WriteLine("Byte count sent: " + e.Segment.Count);
        Debug.WriteLine("Data sent: " + e.Segment.ToString());
                

        byte[] buffer = new byte[tcp1.ReceiveBufferSize];
                    
        // Receive the data. The EndReceive event will be raised upon completion.
        tcp1.BeginReceive(buffer, 0, buffer.Length, System.Net.Sockets.SocketFlags.None, null);
    }
}

private void tcp1_EndReceive(object sender, Dart.PowerTCP.SegmentEventArgs e)
{
    // Check for exception
    if(e.Exception == null)
    {
        // Receive is complete. Display info about the data sent.
        Debug.WriteLine("Byte count received: " + e.Segment.Count);
        Debug.WriteLine("Data received: " + e.Segment.ToString());

        // Close the connection
        tcp1.Close();
    }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="E:Dart.PowerTCP.Mail.Tcp.Trace">
            <summary>
            Raised when data has been sent/received.
            </summary><remarks>
				<p>This event is raised when commands or data has been sent/received. If you are using a component which uses TCP as the
				transport protocol a SegmentEventArgs object is passed into the event containing any commands or data sent or received.
				If you are using a component which uses UDP as the transport protocol a DatagramEventArgs object is passed into the event containing any commands
				or data sent or received.</p>
				<p>The Object.RawTrace event always reports actual data sent/received over the socket. The Count
				of each segment reflects the number of bytes actually written and received.
				The Object.Trace event reports data sent/received at a higher level. For example, for the
				Telnet component, Object.Trace reports data sent/received, but does not report
				IAC option sequences that are processed by TelnetStream, whereas Object.RawTrace
				allows you to trace the actual data sent/received, including Telnet option
				commands.
				</p>
				<p>If you are using the PowerTCP component as a reference, you must create a method to handle the event yourself. For more information on using events using PowerTCP.NET within the Visual Studio.NET environment, see Using Events In PowerTCP.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the Tcp component's Trace event to create a log of all data sent and received.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub Tcp1_Trace(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureFtp.SegmentEventArgs) Handles Tcp1.Trace
   ' Get the data into a byte array
   Dim buffer As Byte() = System.Text.Encoding.Default.GetBytes(e.Segment.ToString())

   ' Create a FileStream
   Dim f As New FileStream("C:\test\socketlog.log", FileMode.Append)

   ' Write the data to the file.
   f.Write(buffer, 0, buffer.Length)
   f.Close()
End Sub
<span class="lang">[C#]</span> 
private void tcp1_Trace(object sender, Dart.PowerTCP.SecureFtp.SegmentEventArgs e)
{
   // Get the data into a byte array
   byte[] buffer = System.Text.Encoding.Default.GetBytes(e.Segment.ToString());
			
   // Create a FileStream
   FileStream f = new FileStream("C:\\test\\socketlog.txt", FileMode.Append);

   // Write the data to the file.
   f.Write(buffer, 0, buffer.Length);
   f.Close();
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="E:Dart.PowerTCP.Mail.Tcp.RawTrace">
            <summary>
            Raised when data has been sent/received.
            </summary><remarks>
				<p>Use this event for advanced runtime debugging for security implementations. For general data traces use the Object.Trace event.</p>
				<p>The Object.RawTrace event always reports actual data sent/received over the socket. The Count
				of each segment reflects the number of bytes actually written and received.
				The Object.Trace event reports data sent/received at a higher level. For example, for the
				Telnet component, Object.Trace reports data sent/received, but does not report
				IAC option sequences that are processed by TelnetStream, whereas Object.RawTrace
				allows you to trace the actual data sent/received, including Telnet option
				commands.
				</p>
				<p>If you are using the PowerTCP component as a reference, you must create a method to handle the event yourself. For more information on using events using PowerTCP.NET within the Visual Studio.NET environment, see Using Events In PowerTCP.</p>
			</remarks>
        </member>
        <member name="E:Dart.PowerTCP.Mail.Tcp.ConnectedChanged">
            <summary>
            Raised when the value of the Object.Connected property changes.
            </summary><remarks>
				<p>This event is raised when the value of the Object.Connected property changes. The value of the Object.Connected property changes whenever a TCP connection to a resource
				is either made or closed.</p>
				<p>This event is useful in several scenarios, for example:</p>
				<ul>
					<li>Displaying the user when a connection has been terminated.</li>
					<li>Notifying the application if a connection has been terminated.</li>
				</ul>
				<p>If you are using the PowerTCP component as a reference, you must create a method to handle the event yourself. For more information on using events using PowerTCP.NET within the Visual Studio.NET environment, see Using Events In PowerTCP.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the ConnectedChanged event to notify the user of the status of the connection.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub Tcp1_ConnectedChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles Tcp1.ConnectedChanged
   ' Get current state of connection
   If Tcp1.Connected Then
      Debug.WriteLine("Connection made")

      ' Display info about the local/remote endpoints
      Debug.WriteLine("Local endpoint: " + Tcp1.LocalEndPoint.ToString())
      Debug.WriteLine("Remote endpoint: " + Tcp1.RemoteEndPoint.ToString())
   Else
      Debug.WriteLine("Connection closed")
   End If
End Sub
<span class="lang">[C#]</span> 
private void tcp1_ConnectedChanged(object sender, System.EventArgs e)
{
    // Get current state of connection
    if(tcp1.Connected)
    {
        Debug.WriteLine("Connection made");

        // Display info about the local/remote endpoints
        Debug.WriteLine("Local endpoint: " + tcp1.LocalEndPoint.ToString());
        Debug.WriteLine("Remote endpoint: " + tcp1.RemoteEndPoint.ToString());
    }
    else
        Debug.WriteLine("Connection closed");
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="E:Dart.PowerTCP.Mail.Tcp.ConnectedChangedEx">
            <summary>
            Raised when the value of the Object.Connected property changes. Supercedes the ConnectedChanged event.
            </summary><remarks>
				<p>This event is raised when the value of the Object.Connected property changes. The value of the Object.Connected property changes whenever a TCP connection to a resource
				is either made or closed.</p>
				<p>This event is useful in several scenarios, for example:</p>
				<ul>
					<li>Displaying the user when a connection has been terminated.</li>
					<li>Notifying the application if a connection has been terminated.</li>
				</ul>
				<p>If you are using the PowerTCP component as a reference, you must create a method to handle the event yourself. For more information on using events using PowerTCP.NET within the Visual Studio.NET environment, see Using Events In PowerTCP.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the ConnectedChanged event to notify the user of the status of the connection.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub Tcp1_ConnectedChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles Tcp1.ConnectedChanged
   ' Get current state of connection
   If Tcp1.Connected Then
      Debug.WriteLine("Connection made")

      ' Display info about the local/remote endpoints
      Debug.WriteLine("Local endpoint: " + Tcp1.LocalEndPoint.ToString())
      Debug.WriteLine("Remote endpoint: " + Tcp1.RemoteEndPoint.ToString())
   Else
      Debug.WriteLine("Connection closed")
   End If
End Sub
<span class="lang">[C#]</span> 
private void tcp1_ConnectedChanged(object sender, System.EventArgs e)
{
    // Get current state of connection
    if(tcp1.Connected)
    {
        Debug.WriteLine("Connection made");

        // Display info about the local/remote endpoints
        Debug.WriteLine("Local endpoint: " + tcp1.LocalEndPoint.ToString());
        Debug.WriteLine("Remote endpoint: " + tcp1.RemoteEndPoint.ToString());
    }
    else
        Debug.WriteLine("Connection closed");
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Tcp.AutoReceive">
            <summary>
			Gets or sets a value which determines if data is automatically receved.
            </summary><value>
            true if data is to be automatically received; false otherwise. The default value is false.
            </value><remarks>
				<p>
				Setting this property to true will cause the component to automatically post a BeginReceive immediately
				after connecting. Once data is received, the Object.EndReceive event is raised. Upon exiting this event, a new
				Object.BeginReceive is posted. As a result,when you use this methodology, you simply need to connect to the server
				and send data. Data is automatically received and Object.EndReceive is raised with no explicit call to Object.BeginReceive required.
			</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Tcp.Available">
            <summary>
            Gets the amount of data that has been received from the network and is available to be read.
            </summary><value>
            The number of bytes of data that has been received from the network and are available to be read.
            </value><remarks>
				<p>When data is received from the network, it is collected in system buffers. The Tcp.Available property
            contains the amount of bytes of data that has been received. In order to receive the data into a useful 
            data structure such as a string, byte array, or Segment object that you can use within your application
            you must use the Tcp.Receive or Tcp.Stream.Read
            methods. If these methods are not invoked or are seldom invoked, then "back pressure" is exerted at the remote host and packet transmission rates will decrease.
            If these methods are invoked, the data is received and removed from the system buffers, making room for more data to be received from the network.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates receiving a chunked response from the server. HTTP 1.1 allows a server
				to send a "chunked" response. When this occurs, the server will send the headers then a hex value representing the size of the next "chunk". This is continued
				until all data has been sent. This is a good stream example because it demonstrates both reading until a delimiter is found and reading fixed-size "chunks" of data.
</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Connect to HTTP Port
Tcp1.Connect("www.yahoo.com", 80)

' Send GET Request for home page. Be sure to specify HTTP/1.1 and Host 
' to get a chunked response.
Dim command As Byte() = System.Text.Encoding.Default.GetBytes("GET / HTTP/1.1" + vbCrLf + "Host:www.yahoo.com" + vbCrLf + vbCrLf)
Tcp1.Stream.Write(command)

' Get the headers by reading until a double CRLF is found.
Dim found As Boolean = False
Dim s As String = Tcp1.Stream.Read(vbCrLf + vbCrLf, 1024, found)

Dim pagedata As String = ""

' Keep receiving data. When all data is sent, the server will close the connection.
Do While Tcp1.Connected

   ' Get the chunk size by reading until a CRLF is found.
   s = Tcp1.Stream.Read(vbCrLf, 1024, found)

   ' Remove the delimiter
   s = s.Trim()

   ' Make sure s has data
   If s &lt;&gt; "" Then

      ' Convert from string hex to decimal integer.
      Dim chunksize As Integer = System.Convert.ToInt32(s, 16)

      ' The final chunk will have size 0 and does not need to be handled.
      If chunksize &lt;&gt; 0 Then

         ' initialize byte array with chunk size
         Dim data(chunksize) As Byte

         ' Fill the byte array.
         Tcp1.Stream.Read(data, True)

         ' Add to the string
         pagedata += System.Text.Encoding.Default.GetString(data)
      End If
   End If
Loop

' Entire page should be retrieved by this point. Display
Debug.WriteLine(pagedata)
<span class="lang">[C#]</span> 
// Connect to HTTP Port
tcp1.Connect("www.yahoo.com", 80);

// Send GET Request for home page. Be sure to specify HTTP/1.1 and Host 
// to get a chunked response.
byte[] command  = System.Text.Encoding.Default.GetBytes("GET / HTTP/1.1\r\nHost:www.yahoo.com\r\n\r\n");
tcp1.Stream.Write(command);

// Get the headers by reading until a double CRLF is found.
bool found = false;
string s = tcp1.Stream.Read("\r\n\r\n", 1024, ref found);

string pagedata = "";

// Keep receiving data. When all data is sent, the server will close the connection.
while(tcp1.Connected)
{
   // Get the chunk size by reading until a CRLF is found.
   s = tcp1.Stream.Read("\r\n", 1024, ref found);
				
   // Remove the delimiter
   s = s.Trim();

   // Make sure s has data
   if(s != "")
   {
      // Convert from string hex to decimal integer.
      int chunksize = System.Convert.ToInt32(s, 16);
				
      // The final chunk will have size 0 and does not need to be handled.
      if(chunksize != 0)
      {
         // initialize byte array with chunk size
         byte[] data = new byte[chunksize];

         // Fill the byte array.
         tcp1.Stream.Read(data, true);

         // Add to the string
         pagedata+= System.Text.Encoding.Default.GetString(data);
      }
   }

}

// Entire page should be retrieved at this point. Display
Debug.WriteLine(pagedata);
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Tcp.Charset">
            <summary>
				Gets and sets the character set used for string/byte array conversions.
			</summary><value>
				A string representing the character set used.
			</value><remarks>
				<p>This value defaults to the language used on the runtime machine (accessible through
				System.Text.Encoding.Default.BodyName). Set this property
				to the desired character set string to override this behavior.
				An example charset for Kanji is "ISO-2022-JP", while standard ASCII is: "ISO-8859-1".
				</p>
				<p>When communicating with clients from other countries set this property based on the standard string defined for the language intended.
				This enables the International client to be able to properly decode the data.
				</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Tcp.Connected">
            <summary>
				Gets the connected state of the connection.
			</summary><remarks>
				<p>If the PowerTCP component is connected to a remote resource AND authenticated, this property returns true. If this property is false, the connection was either never connected, is no longer connected, or is connected but not yet authenticated.
				When receiving data from the server, this property is a good way to tell if all data has been received. Keep receiving data in a loop until this property equals false.
				</p>
				<p>When using PowerTCP components which make use of the Tcp component as the underlying connection, this 
				property returns the same value as the Object.Connection.Connected property (where Object.Connection exposes the Tcp object used for the connection).</p>
				<p>The Object.ConnectedChanged and Object.ConnectedChangedEx events are raised whenever this property changes.</p>
			</remarks><value>
				true if the TCP connection is connected to a remote resource and authenticated; otherwise, false.
			</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates the code required to build a simple echo server.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub StartServer()
   ' Begin listening for connections on port 7.
   Server1.Listen(7)
End Sub

Private Sub Server1_Connection(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureFtp.ConnectionEventArgs) Handles Server1.Connection
   ' This event is raised on a new thread when a connection is received.
   Try
      ' Keep receiving data until connection is closed
      Do While (e.Tcp.Connected)
         ' Receive data.
         Dim seg As Dart.PowerTCP.SecureFtp.Segment = e.Tcp.Receive()

         ' Echo data back to client
         e.Tcp.Send(seg.ToString())
      Loop
   Catch ex As Exception
      'eat exception  
   End Try
End Sub
<span class="lang">[C#]</span> 
private void StartServer()
{
   // Begin listening for connections on port 7.
   server1.Listen(7);
}

private void server1_Connection(object sender, Dart.PowerTCP.SecureFtp.ConnectionEventArgs e)
{
   // This event is raised on a new thread when a connection is received.
   try
   {
      // Keep receiving data until connection is closed
      while(e.Tcp.Connected)
      {
         // Receive data.
         Dart.PowerTCP.SecureFtp.Segment seg = e.Tcp.Receive();

         // Echo data back to client.
         e.Tcp.Send(seg.ToString());
      }
   }
   catch(Exception ex)
   {
      // eat any exceptions
   }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Tcp.ConnectTimeout">
            <summary>
				Gets or sets the number of milliseconds to wait for response from the server when connecting. 
			</summary><value>
				The number of milliseconds to wait for response from the server when connecting. The default value is 0.
			</value><remarks>
				<p>The Object.Connect method will block for the amount of time specified by Object.ConnectTimeout.
				If no response is received from the server in this amount of time, a System.Net.SocketException
				will be thrown. The default value is 0, indicating no timeout is used.
				</p>
				<p>NOTE. There is no pragmatic control over which the system will wait for a response. The generally accepted
				maximum wait time for Windows platforms appears to be 25 seconds. If you set this property for a value less than
				25 seconds, PowerTCP will throw a SocketException. If you set it for a value greater than 25 seconds, the system
				may throw an exception before your specified timeout is reached.</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Tcp.DoEvents">
            <summary>
				  Gets or sets a value that controls the processing of events during blocking method calls.
			</summary><remarks>
				<p>When performing a synchronous (blocking) method, PowerTCP will process user-interface events (such as window painting)
            if this property is set to true AND the current thread has an event message queue.
            If no message queue is present (such as on an ASP page or under any worker thread), the value of this property has no effect.
            This property is used only for synchronous methods. Object.DoEvents is not needed if using asynchronous methods because the asynchronous method will execute on a different thread, allowing the UI thread to continue working unblocked.</p>
				<p>For example, this property is beneficial when an interactive application is being used and the user may want to abort a currently processing operation by clicking an "Abort" button.
			If Object.DoEvents is set to false, this will not be possible.
			Set the Object.DoEvents property to true and the application will respond to other events (such as button clicks) during synchronous operations.
			</p>
			</remarks><value>
				true if user-interface events should be processed during synchronous method calls; otherwise, false. The default value is true.
			</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates some of the lesser used Tcp component members.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Disable UI events.
Tcp1.DoEvents = False

' Enable KeepAlive socket option
Tcp1.KeepAlive = True

' Disable use of Nagle's Algoritm
Tcp1.NoDelay = True

' Read urgent data as normal in-line data.
Tcp1.OutOfBandInline = True

' Allow addresses to be reused
Tcp1.ReuseAddress = True

' Connect
Tcp1.Connect("atropos", 7)

' Send data
Tcp1.Send("test")

' Receive response
Dim seg As Segment = Tcp1.Receive()
<span class="lang">[C#]</span> 
// Disable UI events.
tcp1.DoEvents = false;

// Enable KeepAlive socket option
tcp1.KeepAlive = true;

// Disable use of Nagle's Algoritm
tcp1.NoDelay = true;

// Read urgent data as normal in-line data.
tcp1.OutOfBandInline = true;

// Allow addresses to be reused
tcp1.ReuseAddress = true

// Connect
tcp1.Connect("atropos", 7);

// Send data
tcp1.Send("test");

// Receive response
Segment seg = tcp1.Receive();
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Tcp.KeepAlive">
            <summary>
            Gets or sets the value of the socket's KeepAlive option.
            </summary><value>
            <b>true</b> if packets are to be sent during inactive periods; otherwise, <b>false</b>. The default value is <b>false</b>.
            </value><remarks>
				<p>When a connection is inactive (data is not being sent or received for a period of time), setting Tcp.KeepAlive to true causes the underlying Socket of the Tcp component to probe the other end of a connection when it has been idle for an allotted amount of time (usually 2 hours).</p>
				<p>This property can be used to ensure a connection reset indication occurs during periods of inactivity.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates some of the lesser used Tcp component members.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Disable UI events.
Tcp1.DoEvents = False

' Enable KeepAlive socket option
Tcp1.KeepAlive = True

' Disable use of Nagle's Algoritm
Tcp1.NoDelay = True

' Read urgent data as normal in-line data.
Tcp1.OutOfBandInline = True

' Allow addresses to be reused
Tcp1.ReuseAddress = True

' Connect
Tcp1.Connect("atropos", 7)

' Send data
Tcp1.Send("test")

' Receive response
Dim seg As Segment = Tcp1.Receive()
<span class="lang">[C#]</span> 
// Disable UI events.
tcp1.DoEvents = false;

// Enable KeepAlive socket option
tcp1.KeepAlive = true;

// Disable use of Nagle's Algoritm
tcp1.NoDelay = true;

// Read urgent data as normal in-line data.
tcp1.OutOfBandInline = true;

// Allow addresses to be reused
tcp1.ReuseAddress = true

// Connect
tcp1.Connect("atropos", 7);

// Send data
tcp1.Send("test");

// Receive response
Segment seg = tcp1.Receive();
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Tcp.LocalEndPoint">
            <summary>
            Returns the local address the socket is bound to.
            </summary><value>
            The local IPEndPoint that the Tcp object is using for communications.
            </value><remarks>
				<p>
            <b>null</b> is returned when the Tcp.Connected property is false. When the Tcp.Connected property is true
            this property returns the IPEndPoint instance representing the local address and port. If a local interface
            was specified using the Tcp.Connect or Tcp.BeginConnect to connect to the host, this property should reflect
            that interface. Otherwise this property will reflect the default interface.
            </p>
				<p>
            To retrieve the local IP address, access Tcp.LocalEndPoint.Address. To retrieve the local port, access Tcp.LocalEndPoint.Port. 
            As a shortcut, use the Tcp.LocalEndPoint.ToString method to return the IP address and port in address:port notation.
            </p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the ConnectedChanged event to notify the user of the status of the connection.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub Tcp1_ConnectedChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles Tcp1.ConnectedChanged
   ' Get current state of connection
   If Tcp1.Connected Then
      Debug.WriteLine("Connection made")

      ' Display info about the local/remote endpoints
      Debug.WriteLine("Local endpoint: " + Tcp1.LocalEndPoint.ToString())
      Debug.WriteLine("Remote endpoint: " + Tcp1.RemoteEndPoint.ToString())
   Else
      Debug.WriteLine("Connection closed")
   End If
End Sub
<span class="lang">[C#]</span> 
private void tcp1_ConnectedChanged(object sender, System.EventArgs e)
{
    // Get current state of connection
    if(tcp1.Connected)
    {
        Debug.WriteLine("Connection made");

        // Display info about the local/remote endpoints
        Debug.WriteLine("Local endpoint: " + tcp1.LocalEndPoint.ToString());
        Debug.WriteLine("Remote endpoint: " + tcp1.RemoteEndPoint.ToString());
    }
    else
        Debug.WriteLine("Connection closed");
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Tcp.NoDelay">
            <summary>
            Gets and sets a value the disables the use of Nagle's algorithm so that data is sent immediately.
            </summary><value>
            <b>false</b> if Nagle's algorithm is to be used; otherwise <b>true</b>. The default value is <b>false</b>.
			</value><remarks>
				<p>When small pieces of data (such as a byte) are send many times consecutively, inefficiency can
            result because a packet could be sent with 1 byte of useful data and 40 bytes of header information.
            Nagle's algorithm specifies that data such as this should be automatically concatenated and sent in a single
            packet. 
            When true, Nagle's algorithm is defeated and data is immediately sent in a dedicated packet. 
            When false, Nagle's algorithm is used so consecutive Send methods might send data
            as a single (more efficient) packet.</p>
				<p>Setting this property to true could result in a speed optimization (because 
            packets is sent immediately, without having to wait to see if Tcp.Send is
            called again). Setting this property to false results in data being transmitted 
            more efficiently.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates some of the lesser used Tcp component members.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Disable UI events.
Tcp1.DoEvents = False

' Enable KeepAlive socket option
Tcp1.KeepAlive = True

' Disable use of Nagle's Algoritm
Tcp1.NoDelay = True

' Read urgent data as normal in-line data.
Tcp1.OutOfBandInline = True

' Allow addresses to be reused
Tcp1.ReuseAddress = True

' Connect
Tcp1.Connect("atropos", 7)

' Send data
Tcp1.Send("test")

' Receive response
Dim seg As Segment = Tcp1.Receive()
<span class="lang">[C#]</span> 
// Disable UI events.
tcp1.DoEvents = false;

// Enable KeepAlive socket option
tcp1.KeepAlive = true;

// Disable use of Nagle's Algoritm
tcp1.NoDelay = true;

// Read urgent data as normal in-line data.
tcp1.OutOfBandInline = true;

// Allow addresses to be reused
tcp1.ReuseAddress = true

// Connect
tcp1.Connect("atropos", 7);

// Send data
tcp1.Send("test");

// Receive response
Segment seg = tcp1.Receive();
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Tcp.OutOfBandInline">
            <summary>
            Gets or sets a value that indicates whether out-of-band (urgent) data is read as normal in-line data.
            </summary><remarks>
				<p>When the "urgent" socket flag is set, this means that the packet contains data that should be acted upon before "non-urgent" data.
				Setting this property to true will cause this urgent data to be read in-line.
				If this property is set to false, the typical technique used to receive
				out-of-band data is
				BeginReceive(SocketFlags.Urgent)
				which posts a blocking receive on the socket waiting for urgent data to
				arrive.
				</p>
				<p>To minimize interoperability problems, applications writers are advised not to use out-of-band data unless this is required in order to interoperate with an existing service.</p>
			</remarks><value>
            <b>true</b> if urgent data is to be read as normal in-line data, otherwise <b>false</b>. The default value is <b>false</b>.
            </value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates some of the lesser used Tcp component members.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Disable UI events.
Tcp1.DoEvents = False

' Enable KeepAlive socket option
Tcp1.KeepAlive = True

' Disable use of Nagle's Algoritm
Tcp1.NoDelay = True

' Read urgent data as normal in-line data.
Tcp1.OutOfBandInline = True

' Allow addresses to be reused
Tcp1.ReuseAddress = True

' Connect
Tcp1.Connect("atropos", 7)

' Send data
Tcp1.Send("test")

' Receive response
Dim seg As Segment = Tcp1.Receive()
<span class="lang">[C#]</span> 
// Disable UI events.
tcp1.DoEvents = false;

// Enable KeepAlive socket option
tcp1.KeepAlive = true;

// Disable use of Nagle's Algoritm
tcp1.NoDelay = true;

// Read urgent data as normal in-line data.
tcp1.OutOfBandInline = true;

// Allow addresses to be reused
tcp1.ReuseAddress = true

// Connect
tcp1.Connect("atropos", 7);

// Send data
tcp1.Send("test");

// Receive response
Segment seg = tcp1.Receive();
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Tcp.Proxy">
            <summary>
            Returns the Proxy instance that controls proxy server use.
            </summary><remarks>
				<p>Some networks are configured to require your use of an TCP proxy server. PowerTCP supports most types.
            Configure your proxy use by specifying the properties of this Proxy object.</p>
				<p>Use the Tcp.Proxy property if your application needs to connect with 
			one of the following proxies:</p>
				<ul>
					<li>SOCKS v4</li>
					<li>SOCKS v5</li>
				</ul>
			</remarks><value>
            The Proxy object to use to control proxy server use.
            </value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates asynchronously connecting using the BeginConnect method.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub Test()
   ' Begin to asynchronously connect to an echo port.
   Tcp1.BeginConnect("atropos", 7)
End Sub

Private Sub Tcp1_EndConnect(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureFtp.ExceptionEventArgs) Handles Tcp1.EndConnect
   ' Connect complete, check for any exceptions
   If e.Exception Is Nothing Then
      ' Now send some data.
      Tcp1.Send("hello")

      ' Receive the data back.
      Dim seg As Segment = Tcp1.Receive()
      Debug.WriteLine(seg.ToString())
   End If
End Sub
<span class="lang">[C#]</span> 
private void Test()
{
   // Begin to asynchronously connect to an echo port.
   tcp1.BeginConnect("atropos", 7);
}

private void tcp1_EndConnect(object sender, Dart.PowerTCP.SecureFtp.ExceptionEventArgs e)
{
   // Connect complete, check for any exceptions
   if(e.Exception == null)
   {
      // Now send some data.
      tcp1.Send("hello");

      // Receive the data back.
      Segment seg = tcp1.Receive();

      Debug.WriteLine(seg.ToString());
   }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Tcp.ReceiveBufferSize">
            <summary>
            Gets and sets the size of the system receive buffer.
            </summary><remarks>
				<p>This property sets the size of the system receive buffer. The default is 8192 which means that
            if the total data's bytes you are receiving exceeds this you will need to call Tcp.Receive multiple times
			until Tcp.Connection = false.
			</p>
			</remarks><value>Size of the system receive buffer in bytes. The default is 8192.</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates sending and receving data using byte arrays.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Connect to an echo port
Tcp1.Connect("atropos", 7)

' Send some bytes
Dim buffer As Byte() = System.Text.Encoding.Default.GetBytes("test")
Tcp1.Stream.Write(buffer, 0, buffer.Length)

' Receive the echoed data
Dim response(Tcp1.ReceiveBufferSize) As Byte
Tcp1.Stream.Read(response, 0, Tcp1.ReceiveBufferSize)

' Close the connection
Tcp1.Close()

' Display the response
Debug.WriteLine(System.Text.Encoding.Default.GetString(response))
<span class="lang">[C#]</span> 
// Connect to an echo port
tcp1.Connect("atropos", 7);

// Send some bytes
byte[] buffer = System.Text.Encoding.Default.GetBytes("test");
tcp1.Stream.Write(buffer, 0, buffer.Length);

// Receive the echoed data
byte[] response = new byte[tcp1.ReceiveBufferSize];
tcp1.Stream.Read(response, 0, tcp1.ReceiveBufferSize);

// Close the connection
tcp1.Close();

// Display the response
Debug.WriteLine(System.Text.Encoding.Default.GetString(response));
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Tcp.ReceiveTimeout">
            <summary>
            Gets and sets the number of milliseconds that a Tcp.Receive method will block before throwing a SocketException.
            </summary><value>
            The timeout (in milliseconds) for completing a blocking Tcp.Receive or Tcp.Stream.Read. 
            </value><remarks>
				<p>
            The Tcp component will block (not execute further code on the main thread) until either the data requested is received
			or until the method blocks for the time specified in Tcp.ReceiveTimeout, at which point a SocketException is thrown.  The default is 0, which indicates no timeout.
			Setting this property has no effect on asynchronous methods such as Tcp.BeginRead.
            </p>
				<p>
				This property is useful for determining network failure while receiving data.
				It is also useful for cases where the response from the server has to occur quickly
				or not at all, such as in an ASP script or when connecting and receiving data
				from a series of sockets in a batch process.
            </p>
            <p>If building a server application, this value determines how long a child connection can be idle before disconnecting them.</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Tcp.RemoteEndPoint">
            <summary>
            Returns the remote address/port the socket is connected to.
            </summary><value>
            The remote IPEndPoint that the Tcp object is using for communications.
            </value><remarks>
				<p><b>null</b> is returned when the Connected property is false. When the Tcp.Connected property is <b>true</b>
            this property returns the IPEndPoint instance representing the remote address and port.
            </p>
				<p>
            To retrieve the remote IP address, access Tcp.RemoteEndPoint.Address. To retrieve the remote port, access Tcp.RemoteEndPoint.Port. 
            As a shortcut, use the Tcp.RemoteEndPoint.ToString method to return the IP address and port in address:port notation.
            </p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using the ConnectedChanged event to notify the user of the status of the connection.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub Tcp1_ConnectedChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles Tcp1.ConnectedChanged
   ' Get current state of connection
   If Tcp1.Connected Then
      Debug.WriteLine("Connection made")

      ' Display info about the local/remote endpoints
      Debug.WriteLine("Local endpoint: " + Tcp1.LocalEndPoint.ToString())
      Debug.WriteLine("Remote endpoint: " + Tcp1.RemoteEndPoint.ToString())
   Else
      Debug.WriteLine("Connection closed")
   End If
End Sub
<span class="lang">[C#]</span> 
private void tcp1_ConnectedChanged(object sender, System.EventArgs e)
{
    // Get current state of connection
    if(tcp1.Connected)
    {
        Debug.WriteLine("Connection made");

        // Display info about the local/remote endpoints
        Debug.WriteLine("Local endpoint: " + tcp1.LocalEndPoint.ToString());
        Debug.WriteLine("Remote endpoint: " + tcp1.RemoteEndPoint.ToString());
    }
    else
        Debug.WriteLine("Connection closed");
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Tcp.ReuseAddress">
            <summary>
            Gets or sets a value that typically allows any local port to be specified, even if it is already in use.
            </summary><remarks>
				<p>The option is used (set to <b>true</b>) when a specific local port number is desired for multiple active connections.</p>
			</remarks><value>
            <b>true</b> if a specific local port number is desired for multiple active connections; otherwise <b>false</b>. The default is <b>false</b>, to indicate it should not be allowed.
            </value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates some of the lesser used Tcp component members.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Disable UI events.
Tcp1.DoEvents = False

' Enable KeepAlive socket option
Tcp1.KeepAlive = True

' Disable use of Nagle's Algoritm
Tcp1.NoDelay = True

' Read urgent data as normal in-line data.
Tcp1.OutOfBandInline = True

' Allow addresses to be reused
Tcp1.ReuseAddress = True

' Connect
Tcp1.Connect("atropos", 7)

' Send data
Tcp1.Send("test")

' Receive response
Dim seg As Segment = Tcp1.Receive()
<span class="lang">[C#]</span> 
// Disable UI events.
tcp1.DoEvents = false;

// Enable KeepAlive socket option
tcp1.KeepAlive = true;

// Disable use of Nagle's Algoritm
tcp1.NoDelay = true;

// Read urgent data as normal in-line data.
tcp1.OutOfBandInline = true;

// Allow addresses to be reused
tcp1.ReuseAddress = true

// Connect
tcp1.Connect("atropos", 7);

// Send data
tcp1.Send("test");

// Receive response
Segment seg = tcp1.Receive();
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Tcp.SendBufferSize">
            <summary>
            Gets and sets the size of the system send buffer.
            </summary><remarks>
				<p>This property sets the size of the system send buffer. The default is 8192 which means that
            if the total data's bytes you are sending exceeds this you will need to call Tcp.Send multiple times.</p>
			</remarks><value>
            The size of the system send buffer in bytes. The default is 8192.
            </value>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Tcp.SendTimeout">
            <summary>
            Gets and sets the number of milliseconds that a Tcp.Send method will block before throwing a SocketException.
            </summary><value>
            The timeout (in milli-seconds) for completing a blocking Tcp.Send or SegmentedStream.Write. The default is 0, which indicates no timeout.
            </value><remarks>
				<p>
            The Tcp component will block (not execute further code on the main thread) until either the data is sent
			or until the method blocks for the time specified in Tcp.SendTimeout, at which point a SocketException is thrown.  The default is 0, which indicates no timeout.
			Setting this property has no effect on asynchronous methods such as Tcp.BeginSend.
            </p>
				<p>
				This property is useful for determining network failure while sending data.
				It is also useful for cases where sending data has to occur quickly
				or not at all, such as in an ASP script or when connecting and sending data
				to a series of sockets in a batch process.
            </p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Tcp.Socket">
            <summary>
            Returns a reference to the <a href="ms-help://MS.MSDNVS/cpref/html/frlrfSystemNetSocketsSocketClassTopic.htm">System.Net.Sockets.Socket</a> instance being used.
            </summary><value>The <a href="ms-help://MS.MSDNVS/cpref/html/frlrfSystemNetSocketsSocketClassTopic.htm">System.Net.Sockets.Socket</a> being used for the TCP connection.</value><remarks>
				<p>The Socket used for the TCP connection is exposed through this property. It is not recommended to read or write to the TCP stream using the Socket object directly.
            To read or write, use the higher-level methods such as Tcp.Receive or Tcp.Send, or members of Tcp.Stream such as Tcp.Stream.Read and Tcp.Stream.Write.</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Tcp.Stream">
            <summary>
            Returns a SegmentedStream that can be used for advanced streaming operations on the socket.
            </summary><value>
            A SegmentedStream object.
            </value><remarks>
				<p>
            Typically, when data needs to be send or received, the Object.Send or Object.Receive methods can be used. However, often
            advanced streaming operations are required. Two of the most common are reading token-delimited segments and
            fixed-length segments. To read fixed-length segments, simply create a fixed-size byte array the size of the
            segment you would like to read. Then use the Object.Stream.Read method, passing in the byte array and true as
            the <i>fill</i> parameter. Data is read until either all available data has been received, or the array
            has been completely filled with data. To read token-delimited segments, create an array of characters that you
            would like to use as a delimiter. Then use the Object.Stream.Read, passing in the delimiter array. Data is
            read until the delimiter has been reached. If the delimiter is not found, data is read until all data has been
            received.</p>
			<p><b>Note: The following applies to using the Tcp.Stream property with secure PowerTCP implementations only!</b> In addition, you can change the initialization of this property to change the behavior of the way data is read
			or written. Since SegmentedStream is a PipeStream type, Object.Stream.CoreStream can be changed to any type of PipeStream.
			The PowerTCP secure implementation works this way. For example, if you wish to change to secure communications
			using SSL, you would initlialize the Object.Stream property using an SslStream like so,
			</p>
				<pre class="code">
// Initialize the Stream property to a new PipeStream "combination", enabling SSL communication. 
// (This only applies to using the Tcp component to communicate securely.)
tcp1.Stream = new SegmentedStream(new SslStream(new TcpStream(tcp1)));
</pre>
				<p>And, to switch back to "normal" communications,</p>
				<pre class="code">
// Switch back to a non-secure PipeStream "combination.
tcp1.Stream = new SegmentedStream(new TcpStream(tcp1));
</pre>
				<p><b>Note for Tcp component usage only:</b>Internally, the Tcp component will "scan" this property to link in the Tcp.CertificateReceivedEvent and Tcp.CertificateRequestedEvent, so these events do not
need to be explicitly linked in unless you require advanced functionality.
</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates connecting implementing the SMTP protocol using the Tcp component's stream interface to send a simple message.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' The following code assumes that good responses are always received from
' the server. More robust code should check each response and handle appropriately.

' Connect to SMTP port
Tcp1.Connect("mail", 25)

' Send the EHLO command
Tcp1.Stream.Write("EHLO myserver\r\n")

' Get response from the server
Dim s As String = Tcp1.Stream.Read()

' Send MAIL FROM command
Tcp1.Stream.Write("MAIL FROM: test@dart.com" + vbCrLf)

' Get response from the server
s = Tcp1.Stream.Read()

' Send RCPT TO command
Tcp1.Stream.Write("RCPT TO: cranford@dart.com" + vbCrLf)

' Get response from the server
s = Tcp1.Stream.Read()

' Send DATA command
Tcp1.Stream.Write("DATA" + vbCrLf)

' Get response from the server
s = Tcp1.Stream.Read()

' Send DATA
Tcp1.Stream.Write("Test Message" + vbCrLf + "." + vbCrLf)

' Receive response from the server
s = Tcp1.Stream.Read()

' Write output
Debug.WriteLine("Operation complete. The following information")
Debug.WriteLine("was reported by the server:")
Debug.WriteLine(s)
<span class="lang">[C#]</span> 
// The following code assumes that good responses are always received from
// the server. More robust code should check each response and handle appropriately.

// Connect to SMTP port
tcp1.Connect("mail", 25);

// Send the EHLO command
tcp1.Stream.Write("EHLO myserver\r\n");

// Get response from the server
string s = tcp1.Stream.Read();

// Send MAIL FROM command
tcp1.Stream.Write("MAIL FROM: test@dart.com\r\n");

// Get response from the server
s = tcp1.Stream.Read();

// Send RCPT TO command
tcp1.Stream.Write("RCPT TO: cranford@dart.com\r\n");

// Get response from the server
s = tcp1.Stream.Read();

// Send DATA command
tcp1.Stream.Write("DATA\r\n");

// Get response from the server
s = tcp1.Stream.Read();

// Send DATA
tcp1.Stream.Write("Test Message\r\n.\r\n");

// Receive response from the server
s = tcp1.Stream.Read();

// Write output
Debug.WriteLine("Operation complete. The following information");
Debug.WriteLine("was reported by the server:");
Debug.WriteLine(s);
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Tcp.SynchronizingObject">
            <summary>Set this object to automatically control thread marshalling between worker threads and the main UI thread.</summary><value>
				If used, the main UI thread object; null if unused.
			</value><remarks>
				<p>Any application that (1) uses multithreading (for example, an application which uses an asynchronous BeginXXX method)
				and (2) must update a shared UI element on the main UI thread (such as a ListView object) from one of these worker threads must set this
				property to the value of the main UI thread object. If the application meets both of these requirements and
				this property is NOT set, you may see strange behavior in your application (such as strange exceptions or improper UI element values).</p>
				<p>If you do not know whether or not you need to use this property, simply take the failsafe
				approach when programming Windows applications and always set this property to the Main Form object.
				If any thread marshalling has to occur between a worker thread and the UI thread, it will occur automatically.</p>
				<p>Provides data for the CollectionChanged event.


					<b>NOTE for server implementations:</b> If you are using a PowerTCP server component to build a server application, you
				do not want to set this property (as it will cause the server application to become single-threaded). Instead, you want to use
				the Control.BeginInvoke method to thread-marshall to the main UI thread (see any of the installed sample server applications for an example of this).</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Tcp.Tag">
            <summary>
			Gets or sets an object reference that can be used to associate this instance with any other.
		</summary><remarks>
			Use this property to associate any type derived from Object class with the component. 
			A common use for the <B>Tag</B> property is to store data that is closely associated with the component.
		</remarks><value>
		Any object that is associated with the component; null if no objects are 
		associated with the component.
		</value><summary>
            Gets or sets an object reference that can be used to associate this instance with any other.
            </summary><value>
            Any object that is associated with the object, <b>null</b> if no objects are associated with the object
            </value><remarks>
				<p>
			 Use this property to associate any object with the object.				
            </p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates a simple multi-client chat server.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub StartServer()
   ' Begin listening for connections on port 8888.
   Server1.Listen(8888)
End Sub

Private Sub Server1_Connection(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureFtp.ConnectionEventArgs) Handles Server1.Connection
   ' This event is raised on a new thread when a connection is received.
   Try
      ' Send username command.
      e.Tcp.Stream.Write("Please enter your username: ")

      ' Read until a CRLF is reached
      Dim found As Boolean = False
      Dim s As String = e.Tcp.Stream.Read(vbCrLf, 1024, found)

      If (found) Then
         ' Trim(whitespace)
         s = s.Trim()

         ' Associate username with TCP instance
         e.Tcp.Tag = s
         e.Tcp.Stream.Write("Go ahead and chat" + vbCrLf)
      Else
         ' Disconnect
         e.Tcp.Stream.Write("Bad Input" + vbCrLf)
         e.Tcp.Stream.Close()
      End If

      Do While (e.Tcp.Connected)
         
         ' Receive data.
         found = False
         Dim text As String = e.Tcp.Stream.Read(vbCrLf, 1024, found)
         
         ' Echo data back to all clients
         Dim tcp As Dart.PowerTCP.SecureFtp.Tcp
         For Each tcp In Server1.Connections
            ' Preface text with user name and send
            tcp.Stream.Write(e.Tcp.Tag.ToString() + ": " + text + vbCrLf)
         Next
      Loop
   Catch ex As Exception
      ' eat exception
   End Try
End Sub
<span class="lang">[C#]</span> 
private void StartServer()
{
   // Begin listening for connections on port 8888.
   server1.Listen(8888);
}

private void server1_Connection(object sender, Dart.PowerTCP.SecureFtp.ConnectionEventArgs e)
{
   // This event is raised on a new thread when a connection is received.
   try
   {
      // Send username command.
      e.Tcp.Stream.Write("Please enter your username: ");

      // Read until a CRLF is reached
      bool found = false;
      string s = e.Tcp.Stream.Read("\r\n", 1024, ref found);

      if(found)
      {
         // Trim whitespace
         s = s.Trim();

         // Associate username with TCP instance
         e.Tcp.Tag = s;
         e.Tcp.Stream.Write("Go ahead and chat\r\n");
      }
      else
      {
         // Disconnect
         e.Tcp.Stream.Write("Bad Input\r\n");
         e.Tcp.Stream.Close();
      }
      while(e.Tcp.Connected)
      {
         // Receive data.
         found = false;
         string text = e.Tcp.Stream.Read("\r\n", 1024, ref found);

         // Echo data back to all clients
         foreach(Dart.PowerTCP.SecureFtp.Tcp tcp in server1.Connections)
         {
            // Preface text with user name (from Tcp.Tag) and send
            tcp.Stream.Write(e.Tcp.Tag.ToString() + ": " + text + "\r\n");
         }
      }
   }
   catch(Exception ex)
   {
      // eat exception
   }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="T:Dart.PowerTCP.Mail.Proxy">
            <summary>
            Provides an easy way to manage communication with proxy servers
            </summary>
            <remarks>
            	<p>The <b>Proxy</b> class provides extensive native support for proxy servers. Simply set the appropriate properties of the <b>Proxy</b> class and proxy communication occurs transparently.</p>
            	<p>When using PowerTCP components that use the Tcp component for the underlying connection, you can set the Proxy properties by using the object.Connection property, which exposes the Tcp component.
            	When using the Tcp component, simple set the Tcp.Proxy property.
            	</p>	
            </remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Proxy.#ctor">
            <summary>
            Initializes a new instance of the <b>Proxy</b> class.
            </summary>
            <remarks>
            The default constructor initializes a new instance of the <b>Proxy class.</b>
            </remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Proxy.Server">
            <summary>
				Get or set a value which specifies the proxy server to use.
			</summary><value>
				A string representing the proxy server to use.
			</value><remarks>
				<p>Specifies the hostname of the proxy server. Specify the server either in dot notation ("111.111.111.111") or by host name ("myserver").</p>
			</remarks>	
        </member>
        <member name="P:Dart.PowerTCP.Mail.Proxy.Password">
            <summary>
				Password to use when authenticating to a proxy.
			</summary><value>
				A string value representing the password used to access the a proxy.
			</value><remarks>
				<p>Specifies the password to use for authentication on some proxies.</p>
			</remarks>	
        </member>
        <member name="P:Dart.PowerTCP.Mail.Proxy.ServerPort">
            <summary>
				Port to use when connecting to a proxy server.
			</summary><value>An integer value representing a proxy port to connect to.</value><remarks>
				<p>Specifies the port to use when connecting to the proxy server.</p>
			</remarks>	
        </member>
        <member name="P:Dart.PowerTCP.Mail.Proxy.Type">
            <summary>
            Type of proxy.
            </summary>
            <value>
            One of the ProxyType values.
            </value>
            <remarks>
            <p>Specifies the type of proxy used.</p>
            </remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Proxy.Username">
            <summary>
				User name to use when authenticating to a proxy.
			</summary><value>
				A string value representing the user name used to access a proxy.
			</value><remarks>
				<p>Specifies the username to use for authentication on some proxies.</p>
			</remarks>	
        </member>
        <member name="T:Dart.PowerTCP.Mail.TcpStream">
            <summary>
            TcpStream implements sending and receiving of data through network sockets.
            </summary>
            <remarks>
            <p>All PowerTCP components which use TCP as the transport-layer protocol use this class as the interface to the Socket.</p>
            </remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.TcpStream.#ctor(Dart.PowerTCP.Mail.Tcp)">
            <summary>
            Initializes a new instance of the TcpStream class for the specified Tcp object.
            </summary>
            <param name="tcp">The Tcp object that provides the network data for the new TcpStream.</param>
        </member>
        <member name="M:Dart.PowerTCP.Mail.TcpStream.Close">
            <summary>
            Closes the current stream and releases any resources 
            (such as sockets and file handles) associated with the current stream.
            </summary>
        </member>
        <member name="M:Dart.PowerTCP.Mail.TcpStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads at least one byte of data from the stream and copies it into the provided buffer.
            </summary>
            <remarks>
            <p>This is the standard method to use when reading a stream synchronously.</p>
            <p>The return value may be less than the 
            number of bytes requested if that many bytes are not currently available, or zero if 
            the end of the stream has been reached. Applications 
            must check this value to know how many bytes were read into the buffer.</p>
            </remarks>
            <param name="buffer">The storage location for the received data.</param>
            <param name="offset">The zero-based position in the buffer at which to store the received data.</param>
            <param name="size">The maximum number of bytes to read.</param>
            <returns>The total number of bytes read into the buffer.</returns>
            <exception cref="T:System.IO.IOException">Thrown when the stream is not Readable.</exception>
            <exception cref="M:System.ArgumentNullException.#ctor">Thrown when the receiving buffer is null.</exception>
            <exception cref="M:System.ArgumentOutOfRangeException.#ctor">Thrown when the offset is less than zero or when size is less than or equal to zero.</exception>
            <exception cref="M:System.ArgumentException.#ctor">Thrown when the (offset + size) &gt; buffer.Length.</exception>
        </member>
        <member name="M:Dart.PowerTCP.Mail.TcpStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the stream and returns when the operation is complete.
            </summary>
            <param name="buffer">The storage location of the data to be sent.</param>
            <param name="offset">The zero-based position in the buffer from which to begin writing from.</param>
            <param name="size">The exact number of bytes to write.</param>
            <exception cref="T:System.IO.IOException">Thrown when the stream is not Writeable.</exception>
            <exception cref="M:System.ArgumentNullException.#ctor">Thrown when buffer is null.</exception>
            <exception cref="M:System.ArgumentOutOfRangeException.#ctor">Thrown when the offset is less than zero or when size is less than or equal to zero.</exception>
            <exception cref="M:System.ArgumentException.#ctor">Thrown when the (offset + size) &gt; buffer.Length.</exception>
            <remarks>
            <p>Use the CanWrite property to determine whether the current instance supports writing.</p>
            </remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.TcpStream.Available">
            <summary>
            Gets the amount of data that has been received from the network and is available to be read.
            </summary>
            <returns>The number of bytes of data that has been received from the network and is available to be read.</returns>
        </member>
        <member name="P:Dart.PowerTCP.Mail.TcpStream.CanRead">
            <summary>
            Indicates that data can be read from the stream.
            </summary>
            <returns><b>true</b> if the stream can be read; otherwise, <b>false</b>.</returns>
            <remarks>If the stream is closed, this property returns <b>false</b>.</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.TcpStream.CanWrite">
            <summary>
            Indicates that data can be written to the stream.
            </summary>
            <returns><b>true</b> if the stream can be written to; otherwise, <b>false</b>.</returns>
            <remarks>If the stream is closed, this property returns <b>false</b>.</remarks>
        </member>
        <member name="T:Dart.PowerTCP.Mail.BusyException">
            <summary>
            Thrown whenever a method is called to perform an operation when an operation is already in progress.
            </summary>
            <remarks>
            This exception is thrown if a method is called to perform an upper-layer protocol operation when an operation is already in progress.
            To keep this exception from being thrown, check the object.Busy property to see if an operation is already in progress.
            </remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.BusyException.#ctor">
            <summary>
            Initializes a new instance of the BusyException class.
            </summary>
        </member>
        <member name="M:Dart.PowerTCP.Mail.BusyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the BusyException class.
            </summary>
        </member>
        <member name="M:Dart.PowerTCP.Mail.BusyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the BusyException class.
            </summary>
        </member>
        <member name="M:Dart.PowerTCP.Mail.BusyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the BusyException class.
            </summary>
        </member>
        <member name="T:Dart.PowerTCP.Mail.DatagramEventHandler">
            <summary>
		Represents the method (event handler) that is raised when data is received or sent.
		</summary><param name="sender">The source of the event.</param><param name="e">A DatagramEventArgs object that contains the event data.</param><remarks>
				<p>As Microsoft describes in their MSDN documentation, the event model in the .NET Framework is based on having an event delegate that connects an event with its handler. To raise an event, two elements are needed: 
		<ul type="disc">
						<li>A class that holds the event data. This class must derive from the base class <a href="ms-help://MS.MSDNVS/cpref/html/frlrfsystemeventargsclasstopic.htm">EventArgs</a>.</li>
						<li>A delegate that points to a method that provides the response to the event.</li>
					</ul>
		When sending or receiving data, the class that holds the event data is the DatagraEventArgs class. A method must be created with the same signature as the delegate. In this example that would mean a method would have to be defined to accept two arguments (an object and a DatagramEventArgs) and return void.
		Once this has been done, the delegate must be "connected" to the handling event. This is done by adding an instance of the delegate to the event.
		</p>
				<p>For more information about event handler delegates, see the Using Events In PowerTCP topic.</p>
				<p>If your code causes an exception, it would be returned to the handling
		event without you seeing it. To preclude such a condition, you should ALWAYS
		use a try/catch block around your event-handling code.</p>
			</remarks>
        </member>
        <member name="T:Dart.PowerTCP.Mail.Datagram">
            <summary>
				Encapsulates a UDP datagram.
			</summary><remarks>
				<p>When datagrams are sent or received using the Udp component, a Datagram object
				is returned describing the datagram sent. This Datagram object may be returned directly
				from the method (which is the case when using Udp.Send or Udp.Receive) or it may be
				part of associated event data (which is the case when using Udp.BeginSend or Udp.BeginReceive).
				</p>
				<p>
				Access the properties of the Datagram object to get information about the datagram sent/received.
				For example, Datagram.Buffer contains the actual datagram data. Datagram.RemoteEndPoint contains
				the address/port of the remote host to which the datagram was sent or from which the datagram was
				received.
				</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates creating a UDP echo server application which listens for datagrams and echoes them back to the sender.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
   ' Listen for datagrams on port 7.
   Udp1.Open(7)

   ' Begin an asynchronous Receive
   Dim buffer(Udp1.BufferSize) As Byte
   Udp1.BeginReceive(buffer)
End Sub

Private Sub Udp1_EndReceive(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureFtp.DatagramEventArgs) Handles Udp1.EndReceive
   
   ' Check for an Exception
   If e.Exception is Nothing Then
      ' Echo the data back using the Datagram object passed into the event.
      ' Datagram.Buffer = data received from client
      ' Datagram.RemoteEndPoint = address/port of client.
      Udp1.Send(e.Datagram.Buffer, e.Datagram.RemoteEndPoint)
   End If

   ' Start receiving next
   Dim buffer(Udp1.BufferSize) As Byte
   Udp1.BeginReceive(buffer)
   
End Sub
<span class="lang">[C#]</span> 
private void StartServer()
{			
   // Listen for datagrams on port 7.
   udp1.Open(7);

   // Begin an asynchronous Receive
   byte[] buffer = new byte[udp1.BufferSize];
   udp1.BeginReceive(buffer);
}

private void udp1_EndReceive(object sender, Dart.PowerTCP.SecureFtp.DatagramEventArgs e)
{
   // Check for an exception
   if(e.Exception == null)
   {
      // Echo the data back using the Datagram object passed into the event.
      // Datagram.Buffer = data received from client
      // Datagram.RemoteEndPoint = address/port of client.
      Datagram d = udp1.Send(e.Datagram.Buffer, e.Datagram.RemoteEndPoint);
   }		
   // Start receiving next
   byte[] buffer = new byte[udp1.BufferSize];
   udp1.BeginReceive(buffer);
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Datagram.ToString">
            <summary>
			Returns all data sent/received as a string.
			</summary><returns>A string representing all data sent or received.</returns><p>If the object is a Segment object, this property returns all data contained in Segment.Buffer as a string. 
			The Object.Charset property is used for decoding the byte array into the string.
			If the object is a Datagram object, this property returns all data contained in Datagram.Buffer.
			</p>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates sending some datagrams to an echo server and receiving the datagrams from the echo server.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Dim iterations as Integer = 3

' Listen on the default interface and an ephemeral port.
udp1.Open()

' Send several datagrams
Dim s as String = "test"
Dim i as Integer
For i=0 to iterations
   Udp1.send(s, "MyEchoServer", 7)
Next

' receive the echoed datagrams, there should be 3...requiring 3 Udp.Receive calls.
For i=0 to iterations
   Dim d as Datagram = Udp1.Receive(s.Length)
   Debug.WriteLine(d.ToString())
Next

'* Output
'* ------------------------
'* test
'* test
'* test
'* ------------------------
'*
<span class="lang">[C#]</span> 
int iterations = 3;

// Listen on the default interface and an ephemeral port.
udp1.Open();

// Send several datagrams
string s = "test";
for(int i=0; i&lt;iterations; i++)
   udp1.send(s, "MyEchoServer", 7);

// receive the echoed datagrams, there should be 3...requiring 3 Udp.Receive calls.
for(int i=0; i&lt;iterations; i++)
{
   Datagram d = udp1.Receive(s.Length);
   Debug.WriteLine(d.ToString());
}

/* Output
* ------------------------
* test
* test
* test
* ------------------------
*/
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Datagram.Buffer">
            <summary>
			The buffer containing the data that was sent/received.
			</summary><value>
			A byte array containing data that was sent/received over the socket.
			</value><remarks>
				<p>When using the Tcp component, using Tcp.Send or Tcp.Receive will return a Segment object. The
			data sent/received is available through Segment.Buffer.</p>
				<p>When using the Udp component, using Udp.Send or Udp.Receive will return a Datagram object. The
			data sent/received is available through Datagram.Buffer.</p>
				<p>When using other PowerTCP components, a Segment or Datagram object (which one depends on if TCP or UDP
			is used as the transport protocol) is made available to describe
			data sent or received, often in a Trace event. The Segment.Buffer or Datagram.Buffer property contains the actual
			data sent or received.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates creating a UDP echo server application which listens for datagrams and echoes them back to the sender.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
   ' Listen for datagrams on port 7.
   Udp1.Open(7)

   ' Begin an asynchronous Receive
   Dim buffer(Udp1.BufferSize) As Byte
   Udp1.BeginReceive(buffer)
End Sub

Private Sub Udp1_EndReceive(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureFtp.DatagramEventArgs) Handles Udp1.EndReceive
   
   ' Check for an Exception
   If e.Exception is Nothing Then
      ' Echo the data back using the Datagram object passed into the event.
      ' Datagram.Buffer = data received from client
      ' Datagram.RemoteEndPoint = address/port of client.
      Udp1.Send(e.Datagram.Buffer, e.Datagram.RemoteEndPoint)
   End If

   ' Start receiving next
   Dim buffer(Udp1.BufferSize) As Byte
   Udp1.BeginReceive(buffer)
   
End Sub
<span class="lang">[C#]</span> 
private void StartServer()
{			
   // Listen for datagrams on port 7.
   udp1.Open(7);

   // Begin an asynchronous Receive
   byte[] buffer = new byte[udp1.BufferSize];
   udp1.BeginReceive(buffer);
}

private void udp1_EndReceive(object sender, Dart.PowerTCP.SecureFtp.DatagramEventArgs e)
{
   // Check for an exception
   if(e.Exception == null)
   {
      // Echo the data back using the Datagram object passed into the event.
      // Datagram.Buffer = data received from client
      // Datagram.RemoteEndPoint = address/port of client.
      Datagram d = udp1.Send(e.Datagram.Buffer, e.Datagram.RemoteEndPoint);
   }		
   // Start receiving next
   byte[] buffer = new byte[udp1.BufferSize];
   udp1.BeginReceive(buffer);
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Datagram.Offset">
            <summary>
			The offset into the buffer.
			</summary><value>An integer representing the offset into the buffer.</value><remarks>
			Use this property to access offset parameter of the Receive and Send methods.
			</remarks><remarks>
				<p>When using the Tcp component, using Tcp.Send or Tcp.Receive will return a Segment object. The
			buffer offset is available through Segment.Offset.</p>
				<p>When using the Udp component, using Udp.Send or Udp.Receive will return a Datagram object. The
			buffer offset is available through Datagram.Offset.</p>
				<p>Use this property to properly access the data available in Segment.Buffer or Datagram.Buffer.</p>
				<p>When using other PowerTCP components, a Segment or Datagram object (which one depends on if TCP or UDP
			is used as the transport protocol) is made available to describe
			data sent or received, often in a Trace event. The Segment.Offset or Datagram.Offset property contains the 
			offset into the buffer.</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Datagram.Count">
            <summary>
			The amount of bytes that were sent/received.
			</summary><value>
			An integer value representing the amount of bytes that were sent/received.
			</value><remarks>
				<p>When using the Tcp component, using Tcp.Send or Tcp.Receive will return a Segment object. The
			amount of bytes transferred is available through Segment.Offset.</p>
				<p>When using the Udp component, using Udp.Send or Udp.Receive will return a Datagram object. The
			amount of bytes transferred is available through Datagram.Offset.</p>
				<p>When using other PowerTCP components, a Segment or Datagram object (which one depends on if TCP or UDP
			is used as the transport protocol) is made available to describe
			data sent or received, often in a Trace event. The Segment.Count or Datagram.Count property contains the 
			amount of bytes transferred.</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Datagram.RemoteEndPoint">
            <summary>
				Gets a System.Net.IPEndPoint representing the address/port of the remote host.
			</summary><remarks>
				<p>This property contains a System.Net.IPEndPoint representing the address/port of the
				remote port. One situation where this is useful is using the Datagram.RemoteEndPoint property
				to determine where to send a datagram reply to a received datagram.
				</p>
			</remarks><value>
				A System.Net.IPEndPoint representing the address/port of the remote host.
			</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates creating a UDP echo server application which listens for datagrams and echoes them back to the sender.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
   ' Listen for datagrams on port 7.
   Udp1.Open(7)

   ' Begin an asynchronous Receive
   Dim buffer(Udp1.BufferSize) As Byte
   Udp1.BeginReceive(buffer)
End Sub

Private Sub Udp1_EndReceive(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureFtp.DatagramEventArgs) Handles Udp1.EndReceive
   
   ' Check for an Exception
   If e.Exception is Nothing Then
      ' Echo the data back using the Datagram object passed into the event.
      ' Datagram.Buffer = data received from client
      ' Datagram.RemoteEndPoint = address/port of client.
      Udp1.Send(e.Datagram.Buffer, e.Datagram.RemoteEndPoint)
   End If

   ' Start receiving next
   Dim buffer(Udp1.BufferSize) As Byte
   Udp1.BeginReceive(buffer)
   
End Sub
<span class="lang">[C#]</span> 
private void StartServer()
{			
   // Listen for datagrams on port 7.
   udp1.Open(7);

   // Begin an asynchronous Receive
   byte[] buffer = new byte[udp1.BufferSize];
   udp1.BeginReceive(buffer);
}

private void udp1_EndReceive(object sender, Dart.PowerTCP.SecureFtp.DatagramEventArgs e)
{
   // Check for an exception
   if(e.Exception == null)
   {
      // Echo the data back using the Datagram object passed into the event.
      // Datagram.Buffer = data received from client
      // Datagram.RemoteEndPoint = address/port of client.
      Datagram d = udp1.Send(e.Datagram.Buffer, e.Datagram.RemoteEndPoint);
   }		
   // Start receiving next
   byte[] buffer = new byte[udp1.BufferSize];
   udp1.BeginReceive(buffer);
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Datagram.Sent">
            <summary>
			Indicates whether the data was sent or received.
			</summary><value>true if the data was sent, false otherwise.</value><remarks>
				<p>When using the Tcp component, all data sent or received with Tcp.Send or Tcp.Receive will return a Segment object.
			The Segment.Sent property indicates whether data was sent or received. If this property is true, then 
			the Segment object was created because data was sent; false, the Segment object was created
			because data was received.</p>
				<p>When using the Udp component, all data sent or received with Udp.Send or Udp.Receive will return a Datagram object.
			The Datagram.Sent property indicates whether data was sent or received. If this property is true, then 
			the Datagram object was created because data was sent; false, the Datagram object was created
			because data was received.</p>
				<p>
			When using other PowerTCP components, a Segment or Datagram object is made available to describe
			data sent or received, often in a Trace event. Access the Sent property to determine if the Trace event
			was raised because data was sent or received.
			</p>
			</remarks>
        </member>
        <member name="T:Dart.PowerTCP.Mail.DatagramEventArgs">
            <summary>
			Provides data for any event where datagrams are sent or received.
			</summary><remarks>
				<p>A <b>DatagramEventArgs</b> object is passed as a parameter to all events that report the transfer of datagrams. This object contains
			a Datagram object that references the data sent/received.</p>
				<p>If your code causes an exception, it would be returned to the handling
			event without you seeing it. To preclude such a condition, you should ALWAYS
			use a try/
			catch block around your event-handling code.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates creating a UDP echo server application which listens for datagrams and echoes them back to the sender.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
   ' Listen for datagrams on port 7.
   Udp1.Open(7)

   ' Begin an asynchronous Receive
   Dim buffer(Udp1.BufferSize) As Byte
   Udp1.BeginReceive(buffer)
End Sub

Private Sub Udp1_EndReceive(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureFtp.DatagramEventArgs) Handles Udp1.EndReceive
   
   ' Check for an Exception
   If e.Exception is Nothing Then
      ' Echo the data back using the Datagram object passed into the event.
      ' Datagram.Buffer = data received from client
      ' Datagram.RemoteEndPoint = address/port of client.
      Udp1.Send(e.Datagram.Buffer, e.Datagram.RemoteEndPoint)
   End If

   ' Start receiving next
   Dim buffer(Udp1.BufferSize) As Byte
   Udp1.BeginReceive(buffer)
   
End Sub
<span class="lang">[C#]</span> 
private void StartServer()
{			
   // Listen for datagrams on port 7.
   udp1.Open(7);

   // Begin an asynchronous Receive
   byte[] buffer = new byte[udp1.BufferSize];
   udp1.BeginReceive(buffer);
}

private void udp1_EndReceive(object sender, Dart.PowerTCP.SecureFtp.DatagramEventArgs e)
{
   // Check for an exception
   if(e.Exception == null)
   {
      // Echo the data back using the Datagram object passed into the event.
      // Datagram.Buffer = data received from client
      // Datagram.RemoteEndPoint = address/port of client.
      Datagram d = udp1.Send(e.Datagram.Buffer, e.Datagram.RemoteEndPoint);
   }		
   // Start receiving next
   byte[] buffer = new byte[udp1.BufferSize];
   udp1.BeginReceive(buffer);
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.DatagramEventArgs.Datagram">
            <summary>
				Gets the Datagram object that represents the datagram for which the event was raised.
			</summary><remarks>
				<p>When the Udp.EndSend or Udp.EndReceive events are raised signifying that a datagram has
				been sent or received, the DatagramEventArgs.Datagram property returns the Datagram object
				representing the datagram for which the event was raised.
				</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates creating a UDP echo server application which listens for datagrams and echoes them back to the sender.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
   ' Listen for datagrams on port 7.
   Udp1.Open(7)

   ' Begin an asynchronous Receive
   Dim buffer(Udp1.BufferSize) As Byte
   Udp1.BeginReceive(buffer)
End Sub

Private Sub Udp1_EndReceive(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureFtp.DatagramEventArgs) Handles Udp1.EndReceive
   
   ' Check for an Exception
   If e.Exception is Nothing Then
      ' Echo the data back using the Datagram object passed into the event.
      ' Datagram.Buffer = data received from client
      ' Datagram.RemoteEndPoint = address/port of client.
      Udp1.Send(e.Datagram.Buffer, e.Datagram.RemoteEndPoint)
   End If

   ' Start receiving next
   Dim buffer(Udp1.BufferSize) As Byte
   Udp1.BeginReceive(buffer)
   
End Sub
<span class="lang">[C#]</span> 
private void StartServer()
{			
   // Listen for datagrams on port 7.
   udp1.Open(7);

   // Begin an asynchronous Receive
   byte[] buffer = new byte[udp1.BufferSize];
   udp1.BeginReceive(buffer);
}

private void udp1_EndReceive(object sender, Dart.PowerTCP.SecureFtp.DatagramEventArgs e)
{
   // Check for an exception
   if(e.Exception == null)
   {
      // Echo the data back using the Datagram object passed into the event.
      // Datagram.Buffer = data received from client
      // Datagram.RemoteEndPoint = address/port of client.
      Datagram d = udp1.Send(e.Datagram.Buffer, e.Datagram.RemoteEndPoint);
   }		
   // Start receiving next
   byte[] buffer = new byte[udp1.BufferSize];
   udp1.BeginReceive(buffer);
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.DatagramEventArgs.Exception">
            <summary>
				Gets any exception which occurred during the asynchronous operation.
			</summary><remarks>
				<p>Check this property to tell if an exception occurred during the asynchronous operation. If this property is null, no exception occurred.</p>
				<p>The exception property is useful for checking exceptions and handling them appropriately. For example, if a bad command was sent to the server, a ProtocolException may be thrown. You could check this property to see if it was of type ProtocolException, than handle appropriately.</p>
			</remarks><value>
				If any exception occurred during the asynchronous operation, this property will contain an Exception object describing the exception.
			</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates creating a UDP echo server application which listens for datagrams and echoes them back to the sender.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
   ' Listen for datagrams on port 7.
   Udp1.Open(7)

   ' Begin an asynchronous Receive
   Dim buffer(Udp1.BufferSize) As Byte
   Udp1.BeginReceive(buffer)
End Sub

Private Sub Udp1_EndReceive(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureFtp.DatagramEventArgs) Handles Udp1.EndReceive
   
   ' Check for an Exception
   If e.Exception is Nothing Then
      ' Echo the data back using the Datagram object passed into the event.
      ' Datagram.Buffer = data received from client
      ' Datagram.RemoteEndPoint = address/port of client.
      Udp1.Send(e.Datagram.Buffer, e.Datagram.RemoteEndPoint)
   End If

   ' Start receiving next
   Dim buffer(Udp1.BufferSize) As Byte
   Udp1.BeginReceive(buffer)
   
End Sub
<span class="lang">[C#]</span> 
private void StartServer()
{			
   // Listen for datagrams on port 7.
   udp1.Open(7);

   // Begin an asynchronous Receive
   byte[] buffer = new byte[udp1.BufferSize];
   udp1.BeginReceive(buffer);
}

private void udp1_EndReceive(object sender, Dart.PowerTCP.SecureFtp.DatagramEventArgs e)
{
   // Check for an exception
   if(e.Exception == null)
   {
      // Echo the data back using the Datagram object passed into the event.
      // Datagram.Buffer = data received from client
      // Datagram.RemoteEndPoint = address/port of client.
      Datagram d = udp1.Send(e.Datagram.Buffer, e.Datagram.RemoteEndPoint);
   }		
   // Start receiving next
   byte[] buffer = new byte[udp1.BufferSize];
   udp1.BeginReceive(buffer);
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.DatagramEventArgs.State">
            <summary>
				Gets the object that was included as part of the associated method call. 
			</summary><remarks>
				<p>The EndEventArgs.State property can be used in the calling asynchronous method to make data accessible
				to the handling event.</p>
				<p>This property is useful for making data accessible to the handling event. Since asynchronous methods are "disconnected" (meaning that when one is called, it executes on it's own and returns in the event handler) data that you were using in the code that called the asynchronous method may not be available in the event handler. Simply pass this data in as <i>state</i> when calling the asynchronous method (usually a BeginXXX method) and it is available in the event handler.
				If you do not wish to make an object accessible in the EndXXX event, simple pass in null as <i>state</i>.</p>
			</remarks><value>
				An object containing data passed into the calling asynchronous method.
			</value>
        </member>
        <member name="T:Dart.PowerTCP.Mail.Udp">
            <summary>
            The Udp component provides comprehensive User Datagram Protocol support.
            </summary><remarks>
				<p>Use the Udp Component to send and receive UDP datagrams. It simplifies the use of UDP communications by providing methods to send/receive datagrams, listen for datagrams, and multicast/broadcast. Synchronous and asynchronous use is fully supported.</p>
				<H4 class="dtH4">Using the Udp Component</H4>
				<p>What follows are short usage descriptions. For more information, see the appropriate member topic.</p>
				<p><b>Listen for datagrams: </b> The Udp.Open method causes the Udp component to allocate a socket for sending and receiving datagrams.</p>
				<p><b>Send/receive datagrams: </b> Use the Udp.Send and Udp.Receive methods to send/receive datagrams.</p>
				<p><b>Join/leave multicast groups: </b> Use the Udp.JoinMulticastGroup to join a multicast group. Use the Udp.LeaveMulticastGroup to leave a multicast group.</p>
				<p><b>Asynchronous use: </b> Use the Udp.BeginSend and Udp.BeginReceive methods to send/receive datagrams asynchronously.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates sending some datagrams to an echo server and receiving the datagrams from the echo server.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Dim iterations as Integer = 3

' Listen on the default interface and an ephemeral port.
udp1.Open()

' Send several datagrams
Dim s as String = "test"
Dim i as Integer
For i=0 to iterations
   Udp1.send(s, "MyEchoServer", 7)
Next

' receive the echoed datagrams, there should be 3...requiring 3 Udp.Receive calls.
For i=0 to iterations
   Dim d as Datagram = Udp1.Receive(s.Length)
   Debug.WriteLine(d.ToString())
Next

'* Output
'* ------------------------
'* test
'* test
'* test
'* ------------------------
'*
<span class="lang">[C#]</span> 
int iterations = 3;

// Listen on the default interface and an ephemeral port.
udp1.Open();

// Send several datagrams
string s = "test";
for(int i=0; i&lt;iterations; i++)
   udp1.send(s, "MyEchoServer", 7);

// receive the echoed datagrams, there should be 3...requiring 3 Udp.Receive calls.
for(int i=0; i&lt;iterations; i++)
{
   Datagram d = udp1.Receive(s.Length);
   Debug.WriteLine(d.ToString());
}

/* Output
* ------------------------
* test
* test
* test
* ------------------------
*/
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="F:Dart.PowerTCP.Mail.Udp.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Udp.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the Udp class.
            </summary><param name="container">The IContainer which contains the object.</param><remarks>
				<p>Use this constructor to add the Udp component to the IContainer container.</p>
				<p>To create an instance of the Udp component using Visual Studio.NET, simply add the Udp component to the form and the object will automatically be created and initialized. If working out of the Visual Studio.NET environment (or using the Udp component as a reference), the Udp component will have to be explicitly created and initialized.</p>
				<p>The following table shows initial property values for an instance of Udp.</p>
				<div class="tablediv">
					<table cellspacing="0" class="dtTABLE">
						<tr valign="top">
							<th width="50%">Property</th>
							<th width="50%">Initial Value</th>
						</tr>
						<tr valign="top">
							<td width="50%"> Udp.BufferSize </td>
							<td width="50%"> 8192 </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Udp.Busy </td>
							<td width="50%"> false </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Udp.Charset </td>
							<td width="50%"> Default system charset (accessible via System.Text.Encoding.Default.BodyName)</td>
						</tr>
						<tr valign="top">
							<td width="50%"> Udp.DoEvents </td>
							<td width="50%"> true </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Udp.MulticastTimeToLive </td>
							<td width="50%"> 1 </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Udp.Timeout </td>
							<td width="50%"> 0 </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Udp.Socket </td>
							<td width="50%"> null </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Udp.Tag </td>
							<td width="50%"> null </td>
						</tr>
					</table>
				</div>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates creating a <b>Udp</b> object.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Declare as class member
Friend WithEvents Udp1 As Dart.PowerTCP.SecureFtp.Udp

' Create in class initialization
Me.Udp1 = New Dart.PowerTCP.SecureFtp.Udp()
<span class="lang">[C#]</span> 
private Dart.PowerTCP.SecureFtp.Udp udp1 = new Dart.PowerTCP.SecureFtp.Udp();         
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Udp.#ctor">
            <summary>
            Initializes a new instance of the Udp class.
            </summary><remarks>
				<p>The default constructor initializes a new Udp class instance.</p>
				<p>To create an instance of the Udp component using Visual Studio.NET, simply add the Udp component to the form and the object will automatically be created and initialized. If working out of the Visual Studio.NET environment (or using the Udp component as a reference), the Udp component will have to be explicitly created and initialized.</p>
				<p>The following table shows initial property values for an instance of Udp.</p>
				<div class="tablediv">
					<table cellspacing="0" class="dtTABLE">
						<tr valign="top">
							<th width="50%">Property</th>
							<th width="50%">Initial Value</th>
						</tr>
						<tr valign="top">
							<td width="50%"> Udp.BufferSize </td>
							<td width="50%"> 8192 </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Udp.Busy </td>
							<td width="50%"> false </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Udp.Charset </td>
							<td width="50%"> Default system charset (accessible via System.Text.Encoding.Default.BodyName)</td>
						</tr>
						<tr valign="top">
							<td width="50%"> Udp.DoEvents </td>
							<td width="50%"> true </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Udp.MulticastTimeToLive </td>
							<td width="50%"> 1 </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Udp.Timeout </td>
							<td width="50%"> 0 </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Udp.Socket </td>
							<td width="50%"> null </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Udp.Tag </td>
							<td width="50%"> null </td>
						</tr>
					</table>
				</div>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates creating a <b>Udp</b> object.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Declare as class member
Friend WithEvents Udp1 As Dart.PowerTCP.SecureFtp.Udp

' Create in class initialization
Me.Udp1 = New Dart.PowerTCP.SecureFtp.Udp()
<span class="lang">[C#]</span> 
private Dart.PowerTCP.SecureFtp.Udp udp1 = new Dart.PowerTCP.SecureFtp.Udp();         
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Udp.Dispose(System.Boolean)">
            <summary>
			Releases all resources associated with the object.
			</summary><remarks>
				<p>The Object.Dispose method abruptly aborts the connection and releases all resources.</p>
				<p>Object.Dispose should ONLY be used to release all resources used by the
object, and the object should not be used subsequently. If an abort is
desired, then Object.Close or Object.Connection.Close if available should be used to terminate
activity and reset the object. The Object cannot be used once Object.Dispose() or Object.Dispose(true) are called.
</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Udp.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Udp.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Object)">
            <summary>
				Asynchronously receive a datagram, specifying a buffer, offset, count and SocketFlags value.
			</summary><remarks>
				<p>Use the Udp.Receive method to asynchronously receive a datagram after first calling Udp.Open to 
				specify a port/address to listen for datagrams. When the Udp.BeginReceive method has completed, the
				Udp.EndReceive event is raised. Made accessible in the Udp.EndReceive event is a Datagram object
				representing the datagram received. Datagram.Buffer contains the actual datagram data. Datagram.RemoteEndPoint contains
				the address/port of the remote host from which the datagram was sent.
				</p>
				<p>To synchronously receive a datagram, use Udp.Receive.</p>
				<p>
				A UDP datagram provides little functionality over an IP datagram, adding a port 
				number field which allows multiplexing on the receiving host and checksum field
				which provides basic error handling.
				Unlike TCP, UDP datagrams are sent as a unit. If Udp.BeginSend is called
				3 times to send 3 datagrams to a host, the receiving host will have 
				to call Udp.BeginReceive 3 times. Also, the size of each datagram sent will equal
				the size of each datagram received by the receiving host. In addition, since 
				UDP is a connectionless protocol, any datagrams sent to the host are not 
				guarenteed to be delivered. Therefore, any required error checking (outside of UDP's checksum
				implementation) will have to be done by the application-layer protocol.
				</p>
			</remarks><param name="buffer">A byte array to be filled with the data received.</param><param name="offset">Starting offset within buffer for filling.</param><param name="count">Maximum number of bytes to receive.</param><param name="socketFlags">A bitwise combination of special use receiving parameters.</param><param name="state">User state information.</param><exception cref="T:System.ArgumentNullException"><i>buffer</i> is null.</exception><exception cref="T:System.ArgumentOutOfRangeException"><I>offset</I> or <I>count</I> is less than 0.</exception><exception cref="T:System.ArgumentException"><I>offset</I> + <I>count</I> is greater than the length of <I>buffer</I>.</exception><exception cref="T:System.InvalidOperationException">BeginXXX method used without providing an EndXXX event handler.</exception><returns>An IAsyncResult that represents the asynchronous receive, which could still be pending.</returns>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates creating a UDP echo server application which listens for datagrams and echoes them back to the sender.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
   ' Listen for datagrams on port 7.
   Udp1.Open(7)

   ' Begin an asynchronous Receive
   Dim buffer(Udp1.BufferSize) As Byte
   Udp1.BeginReceive(buffer)
End Sub

Private Sub Udp1_EndReceive(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureFtp.DatagramEventArgs) Handles Udp1.EndReceive
   
   ' Check for an Exception
   If e.Exception is Nothing Then
      ' Echo the data back using the Datagram object passed into the event.
      ' Datagram.Buffer = data received from client
      ' Datagram.RemoteEndPoint = address/port of client.
      Udp1.Send(e.Datagram.Buffer, e.Datagram.RemoteEndPoint)
   End If

   ' Start receiving next
   Dim buffer(Udp1.BufferSize) As Byte
   Udp1.BeginReceive(buffer)
   
End Sub
<span class="lang">[C#]</span> 
private void StartServer()
{			
   // Listen for datagrams on port 7.
   udp1.Open(7);

   // Begin an asynchronous Receive
   byte[] buffer = new byte[udp1.BufferSize];
   udp1.BeginReceive(buffer);
}

private void udp1_EndReceive(object sender, Dart.PowerTCP.SecureFtp.DatagramEventArgs e)
{
   // Check for an exception
   if(e.Exception == null)
   {
      // Echo the data back using the Datagram object passed into the event.
      // Datagram.Buffer = data received from client
      // Datagram.RemoteEndPoint = address/port of client.
      Datagram d = udp1.Send(e.Datagram.Buffer, e.Datagram.RemoteEndPoint);
   }		
   // Start receiving next
   byte[] buffer = new byte[udp1.BufferSize];
   udp1.BeginReceive(buffer);
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Udp.BeginReceive(System.Byte[])">
            <summary>
				Asynchronously receive a datagram.
			</summary><remarks>
				<p>Use the Udp.Receive method to asynchronously receive a datagram after first calling Udp.Open to 
				specify a port/address to listen for datagrams. When the Udp.BeginReceive method has completed, the
				Udp.EndReceive event is raised. Made accessible in the Udp.EndReceive event is a Datagram object
				representing the datagram received. Datagram.Buffer contains the actual datagram data. Datagram.RemoteEndPoint contains
				the address/port of the remote host from which the datagram was sent.
				</p>
				<p>To synchronously receive a datagram, use Udp.Receive.</p>
				<p>
				A UDP datagram provides little functionality over an IP datagram, adding a port 
				number field which allows multiplexing on the receiving host and checksum field
				which provides basic error handling.
				Unlike TCP, UDP datagrams are sent as a unit. If Udp.BeginSend is called
				3 times to send 3 datagrams to a host, the receiving host will have 
				to call Udp.BeginReceive 3 times. Also, the  of each datagram sent will equal
				the size of each datagram received by the receiving host. In addition, since 
				UDP is a connectionless protocol, any datagrams sent to the host are not 
				guarenteed to be delivered. Therefore, any required error checking (outside of UDP's checksum
				implementation) will have to be done by the application-layer protocol.
				</p>
			</remarks><returns>An IAsyncResult that represents the asynchronous receive, which could still be pending.</returns><param name="buffer">A byte array to be filled with the data received.</param><exception cref="T:System.ArgumentNullException"><i>buffer</i> is null.</exception><exception cref="T:System.InvalidOperationException">BeginXXX method used without providing an EndXXX event handler.</exception>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates creating a UDP echo server application which listens for datagrams and echoes them back to the sender.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
   ' Listen for datagrams on port 7.
   Udp1.Open(7)

   ' Begin an asynchronous Receive
   Dim buffer(Udp1.BufferSize) As Byte
   Udp1.BeginReceive(buffer)
End Sub

Private Sub Udp1_EndReceive(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureFtp.DatagramEventArgs) Handles Udp1.EndReceive
   
   ' Check for an Exception
   If e.Exception is Nothing Then
      ' Echo the data back using the Datagram object passed into the event.
      ' Datagram.Buffer = data received from client
      ' Datagram.RemoteEndPoint = address/port of client.
      Udp1.Send(e.Datagram.Buffer, e.Datagram.RemoteEndPoint)
   End If

   ' Start receiving next
   Dim buffer(Udp1.BufferSize) As Byte
   Udp1.BeginReceive(buffer)
   
End Sub
<span class="lang">[C#]</span> 
private void StartServer()
{			
   // Listen for datagrams on port 7.
   udp1.Open(7);

   // Begin an asynchronous Receive
   byte[] buffer = new byte[udp1.BufferSize];
   udp1.BeginReceive(buffer);
}

private void udp1_EndReceive(object sender, Dart.PowerTCP.SecureFtp.DatagramEventArgs e)
{
   // Check for an exception
   if(e.Exception == null)
   {
      // Echo the data back using the Datagram object passed into the event.
      // Datagram.Buffer = data received from client
      // Datagram.RemoteEndPoint = address/port of client.
      Datagram d = udp1.Send(e.Datagram.Buffer, e.Datagram.RemoteEndPoint);
   }		
   // Start receiving next
   byte[] buffer = new byte[udp1.BufferSize];
   udp1.BeginReceive(buffer);
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Udp.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.String,System.Int32,System.Object)">
            <summary>
				Asynchronously send a datagram to the specified remote address and port, specifying a buffer, offset, count and SocketFlags value.
			</summary><remarks>
				<p>Use the Udp.BeginSend method to send a datagram created from the data contained
				in <i>buffer</i> to the specified <i>host</i> and <i>port</i> asynchronously. 
				When the data has been sent, the Udp.EndSend event is raised.</p>
				<p>To synchronously send a datagram, use Udp.Send.</p>
				<p>
				A UDP datagram provides little functionality over an IP datagram, adding a port 
				number field which allows multiplexing on the receiving host and checksum field
				which provides basic error handling.
				Unlike TCP, UDP datagrams are sent as a unit. If Udp.BeginSend is called
				3 times to send 3 datagrams to a host, the receiving host will have 
				to call Udp.BeginReceive 3 times. Also, the size of each datagram sent will equal
				the size of each datagram received by the receiving host. In addition, since 
				UDP is a connectionless protocol, any datagrams sent to the host are not 
				guarenteed to be delivered. Therefore, any required error checking (outside of UDP's checksum
				implementation) will have to be done by the application-layer protocol.
				</p>
				<p>To send a broadcast datagram, use "255.255.255.255" as the remote address. To sent 
				a multicast datagram, use the multicast group address as the remote address as the remote address after first joining a multicast group by using Udp.JoinMulitcastGroup.
				</p>
			</remarks><returns>An IAsyncResult that represents the asynchronous send, which could still be pending.</returns><param name="buffer">A byte array containing the data to send.</param><param name="offset">Starting offset within buffer for sending.</param><param name="count">Number of bytes to send.</param><param name="socketFlags">A bitwise combination of special use sending parameters.</param><param name="host">The host address (either dot address or hostname) to send the datagram to.</param><param name="port">The host port to send the datagram to.</param><param name="state">User state information.</param><exception cref="T:System.ArgumentNullException"><i>buffer</i> is null.</exception><exception cref="T:System.Net.Sockets.SocketException">The remote address is unknown, invalid, or unable to be resolved.</exception><exception cref="T:System.ArgumentOutOfRangeException">The remote port is out of the range of valid values.<br>--or--</br><I>offset</I> or <I>count</I> is less than 0.</exception><exception cref="T:System.ArgumentException"><I>offset</I> + <I>count</I> is greater than the length of <I>buffer</I>.</exception><exception cref="T:System.InvalidOperationException">BeginXXX method used without providing an EndXXX event handler.</exception>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates sending data asynchronously.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub AsynchTest()
   ' Begin listening for datagrams.
   Udp1.Open(1111)

   ' Asynchronously send a datagram. EndSend event will be raised upon completion.
   Dim buffer As Byte() = System.Text.Encoding.Default.GetBytes("test")
   Udp1.BeginSend(buffer, "weezer", 8888)
End Sub

Private Sub Udp1_EndSend(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureFtp.DatagramEventArgs) Handles Udp1.EndSend
   If e.Exception Is Nothing Then
      Debug.WriteLine("Data sent: " + e.Datagram.ToString())
   Else
      Debug.WriteLine("Exception returned from event: " + e.Exception.ToString())
   End If
End Sub
<span class="lang">[C#]</span> 
private void AsynchTest()
{
    // Begin listening for datagrams.
    udp1.Open(1111);

    // Asynchronously send a datagram. EndSend event will be raised upon completion.
    byte[] buffer = System.Text.Encoding.Default.GetBytes("test");
    udp1.BeginSend(buffer, "MyEchoServer", 7);
}

private void udp1_EndSend(object sender, Dart.PowerTCP.SecureFtp.DatagramEventArgs e)
{
   if(e.Exception == null)
   {
      Debug.WriteLine("Data sent: " + e.Datagram.ToString());
   }
   else
   {
      Debug.WriteLine("Exception returned from event: " + e.Exception.ToString());
   }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Udp.BeginSend(System.Byte[],System.String,System.Int32)">
            <summary>
				Asynchronously send a datagram to the specified remote address and port.
			</summary><remarks>
				<p>Use the Udp.BeginSend method to send a datagram created from the data contained
				in <i>buffer</i> to the specified <i>host</i> and <i>port</i> asynchronously. 
				When the data has been sent, the Udp.EndSend event is raised.</p>
				<p>To synchronously send a datagram, use Udp.Send.</p>
				<p>
				A UDP datagram provides little functionality over an IP datagram, adding a port 
				number field which allows multiplexing on the receiving host and checksum field
				which provides basic error handling.
				Unlike TCP, UDP datagrams are sent as a unit. If Udp.BeginSend is called
				3 times to send 3 datagrams to a host, the receiving host will have 
				to call Udp.BeginReceive 3 times. Also, the size of each datagram sent will equal
				the size of each datagram received by the receiving host. In addition, since 
				UDP is a connectionless protocol, any datagrams sent to the host are not 
				guarenteed to be delivered. Therefore, any required error checking (outside of UDP's checksum
				implementation) will have to be done by the application-layer protocol.
				</p>
				<p>To send a broadcast datagram, use "255.255.255.255" as the remote address. To sent 
				a multicast datagram, use the multicast group address as the remote address after first joining a multicast group by using Udp.JoinMulitcastGroup.
				</p>
			</remarks><param name="buffer">A byte array containing the data to send.</param><param name="host">The host address (either dot address or hostname) to send the datagram to.</param><param name="port">The host port to send the datagram to.</param><exception cref="T:System.ArgumentNullException"><i>buffer</i> is null.</exception><exception cref="T:System.Net.Sockets.SocketException">The remote address is unknown, invalid, or unable to be resolved.</exception><exception cref="T:System.ArgumentOutOfRangeException">The remote port is out of the range of valid values.</exception><exception cref="T:System.InvalidOperationException">BeginXXX method used without providing an EndXXX event handler.</exception><returns>An IAsyncResult that represents the asynchronous send, which could still be pending.</returns>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates sending data asynchronously.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub AsynchTest()
   ' Begin listening for datagrams.
   Udp1.Open(1111)

   ' Asynchronously send a datagram. EndSend event will be raised upon completion.
   Dim buffer As Byte() = System.Text.Encoding.Default.GetBytes("test")
   Udp1.BeginSend(buffer, "weezer", 8888)
End Sub

Private Sub Udp1_EndSend(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureFtp.DatagramEventArgs) Handles Udp1.EndSend
   If e.Exception Is Nothing Then
      Debug.WriteLine("Data sent: " + e.Datagram.ToString())
   Else
      Debug.WriteLine("Exception returned from event: " + e.Exception.ToString())
   End If
End Sub
<span class="lang">[C#]</span> 
private void AsynchTest()
{
    // Begin listening for datagrams.
    udp1.Open(1111);

    // Asynchronously send a datagram. EndSend event will be raised upon completion.
    byte[] buffer = System.Text.Encoding.Default.GetBytes("test");
    udp1.BeginSend(buffer, "MyEchoServer", 7);
}

private void udp1_EndSend(object sender, Dart.PowerTCP.SecureFtp.DatagramEventArgs e)
{
   if(e.Exception == null)
   {
      Debug.WriteLine("Data sent: " + e.Datagram.ToString());
   }
   else
   {
      Debug.WriteLine("Exception returned from event: " + e.Exception.ToString());
   }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Udp.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.IPEndPoint,System.Object)">
            <summary>
				Asynchronously send a datagram to the specified IPEndPoint, specifying a buffer, offset, count and SocketFlags value.
			</summary><remarks>
				<p>Use the Udp.BeginSend method to send a datagram created from the data contained
				in <i>buffer</i> to the specified <i>host</i> asynchronously. 
				When the data has been sent, the Udp.EndSend event is raised.</p>
				<p>To synchronously send a datagram, use Udp.Send.</p>
				<p>
				A UDP datagram provides little functionality over an IP datagram, adding a port 
				number field which allows multiplexing on the receiving host and checksum field
				which provides basic error handling.
				Unlike TCP, UDP datagrams are sent as a unit. If Udp.BeginSend is called
				3 times to send 3 datagrams to a host, the receiving host will have 
				to call Udp.BeginReceive 3 times. Also, the size of each datagram sent will equal
				the size of each datagram received by the receiving host. In addition, since 
				UDP is a connectionless protocol, any datagrams sent to the host are not 
				guarenteed to be delivered. Therefore, any required error checking (outside of UDP's checksum
				implementation) will have to be done by the application-layer protocol.
				</p>
				<p>To send a broadcast datagram, use "255.255.255.255" as the remote address. To sent 
				a multicast datagram, use the multicast group address as the remote address after first joining a multicast group by using Udp.JoinMulitcastGroup.
				</p>
			</remarks><returns>An IAsyncResult that represents the asynchronous send, which could still be pending.</returns><param name="buffer">A byte array containing the data to send.</param><param name="offset">Starting offset within buffer for sending.</param><param name="count">Number of bytes to send.</param><param name="socketFlags">A bitwise combination of special use sending parameters.</param><param name="host">An IPEndpoint representing the host address to send the datagram to.</param><param name="state">User state information.</param><exception cref="T:System.ArgumentNullException"><i>buffer</i> is null.</exception><exception cref="T:System.Net.Sockets.SocketException">The remote address is unknown, invalid, or unable to be resolved.</exception><exception cref="T:System.ArgumentOutOfRangeException">The remote port is out of the range of valid values.<br>--or--</br><I>offset</I> or <I>count</I> is less than 0.</exception><exception cref="T:System.ArgumentException"><I>offset</I> + <I>count</I> is greater than the length of <I>buffer</I>.</exception><exception cref="T:System.InvalidOperationException">BeginXXX method used without providing an EndXXX event handler.</exception>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates sending data asynchronously.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub AsynchTest()
   ' Begin listening for datagrams.
   Udp1.Open(1111)

   ' Asynchronously send a datagram. EndSend event will be raised upon completion.
   Dim buffer As Byte() = System.Text.Encoding.Default.GetBytes("test")
   Udp1.BeginSend(buffer, "weezer", 8888)
End Sub

Private Sub Udp1_EndSend(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureFtp.DatagramEventArgs) Handles Udp1.EndSend
   If e.Exception Is Nothing Then
      Debug.WriteLine("Data sent: " + e.Datagram.ToString())
   Else
      Debug.WriteLine("Exception returned from event: " + e.Exception.ToString())
   End If
End Sub
<span class="lang">[C#]</span> 
private void AsynchTest()
{
    // Begin listening for datagrams.
    udp1.Open(1111);

    // Asynchronously send a datagram. EndSend event will be raised upon completion.
    byte[] buffer = System.Text.Encoding.Default.GetBytes("test");
    udp1.BeginSend(buffer, "MyEchoServer", 7);
}

private void udp1_EndSend(object sender, Dart.PowerTCP.SecureFtp.DatagramEventArgs e)
{
   if(e.Exception == null)
   {
      Debug.WriteLine("Data sent: " + e.Datagram.ToString());
   }
   else
   {
      Debug.WriteLine("Exception returned from event: " + e.Exception.ToString());
   }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Udp.BeginSend(System.Byte[],System.Net.IPEndPoint)">
            <summary>
				Asynchronously send a datagram to the specified IPEndPoint.
			</summary><remarks>
				<p>Use the Udp.BeginSend method to send a datagram created from the data contained
				in <i>buffer</i> to the specified <i>host</i> asynchronously. 
				When the data has been sent, the Udp.EndSend event is raised.</p>
				<p>To synchronously send a datagram, use Udp.Send.</p>
				<p>
				A UDP datagram provides little functionality over an IP datagram, adding a port 
				number field which allows multiplexing on the receiving host and checksum field
				which provides basic error handling.
				Unlike TCP, UDP datagrams are sent as a unit. If Udp.BeginSend is called
				3 times to send 3 datagrams to a host, the receiving host will have 
				to call Udp.BeginReceive 3 times. Also, the size of each datagram sent will equal
				the size of each datagram received by the receiving host. In addition, since 
				UDP is a connectionless protocol, any datagrams sent to the host are not 
				guarenteed to be delivered. Therefore, any required error checking (outside of UDP's checksum
				implementation) will have to be done by the application-layer protocol.
				</p>
				<p>To send a broadcast datagram, use "255.255.255.255" as the remote address. To sent 
				a multicast datagram, use the multicast group address as the remote address after first joining a multicast group by using Udp.JoinMulitcastGroup.
				</p>
			</remarks><returns>An IAsyncResult that represents the asynchronous send, which could still be pending.</returns><param name="buffer">A byte array containing the data to send.</param><param name="host">An IPEndpoint representing the host address to send the datagram to.</param><exception cref="T:System.ArgumentNullException"><i>buffer</i> is null.</exception><exception cref="T:System.Net.Sockets.SocketException">The remote address is unknown, invalid, or unable to be resolved.</exception><exception cref="T:System.ArgumentOutOfRangeException">The remote port is out of the range of valid values.</exception><exception cref="T:System.InvalidOperationException">BeginXXX method used without providing an EndXXX event handler.</exception>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates sending data asynchronously.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub AsynchTest()
   ' Begin listening for datagrams.
   Udp1.Open(1111)

   ' Asynchronously send a datagram. EndSend event will be raised upon completion.
   Dim buffer As Byte() = System.Text.Encoding.Default.GetBytes("test")
   Udp1.BeginSend(buffer, "weezer", 8888)
End Sub

Private Sub Udp1_EndSend(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureFtp.DatagramEventArgs) Handles Udp1.EndSend
   If e.Exception Is Nothing Then
      Debug.WriteLine("Data sent: " + e.Datagram.ToString())
   Else
      Debug.WriteLine("Exception returned from event: " + e.Exception.ToString())
   End If
End Sub
<span class="lang">[C#]</span> 
private void AsynchTest()
{
    // Begin listening for datagrams.
    udp1.Open(1111);

    // Asynchronously send a datagram. EndSend event will be raised upon completion.
    byte[] buffer = System.Text.Encoding.Default.GetBytes("test");
    udp1.BeginSend(buffer, "MyEchoServer", 7);
}

private void udp1_EndSend(object sender, Dart.PowerTCP.SecureFtp.DatagramEventArgs e)
{
   if(e.Exception == null)
   {
      Debug.WriteLine("Data sent: " + e.Datagram.ToString());
   }
   else
   {
      Debug.WriteLine("Exception returned from event: " + e.Exception.ToString());
   }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Udp.Open(System.String,System.Int32)">
            <summary>
				Allocate a socket at the specified address and port for sending and receiving datagrams.
			</summary><remarks>
				<p>This method allocates a socket at the specified address and port for sending
				and receiving datagrams. <i>host</i> can either be dot address or a hostname (which is
				resolved to a dot address). Upon successful completion of this method, the local address and
				port are accessible through the Udp.LocalEndPoint property.
				</p>
				<p>
				This method must be called in order to successfully use Udp.Receive or Udp.BeginReceive.
				</p>
			</remarks><param name="host">Specifies the local address (either dot address or hostname) to use.</param><param name="port">Specifies the local port to use.</param><exception cref="T:System.Net.Sockets.SocketException">The local address is unknown, invalid, or unable to be resolved.</exception><exception cref="T:System.ArgumentOutOfRangeException">The local port is out of the range of valid values.</exception>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates...</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Begin listening on the specified port and address
Udp1.Open("MyHostName", 8888)

' Send a broadcast to all hosts on the network on port 8888
Udp1.Send("hello everyone", "255.255.255.255", "8888")

' Receive the broadcast datagram.
Dim buffer(Udp1.BufferSize) As Byte
Debug.WriteLine(System.Text.Encoding.Default.GetString(buffer))

' Display data
Debug.WriteLine(d.ToString())

'* Output
'* ---------------------
'* hello everyone
'* ---------------------
'*
<span class="lang">[C#]</span> 
// Begin listening on the specified port and address
udp1.Open("MyHostName", 8888);

// Send a broadcast to all hosts on the network on port 8888
udp1.Send("hello everyone", "255.255.255.255", "8888");

// Receive the broadcast datagram.
byte[] buffer = new byte[udp1.BufferSize];
udp1.Receive(buffer);

// Display data
Debug.WriteLine(System.Text.Encoding.Default.GetString(buffer));

/* Output
* ---------------------
* hello everyone
* ---------------------
*/
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Udp.Open(System.Net.IPEndPoint)">
            <summary>
				Allocate a socket at the specified IPEndPoint for sending and receiving datagrams.
			</summary><remarks>
				<p>This method allocates a socket at the specified IPEndPoint for sending
				and receiving datagrams. Upon successful completion of this method, the local address and
				port are accessible through the Udp.LocalEndPoint property.
				</p>
				<p>
				This method must be called in order to successfully use Udp.Receive or Udp.BeginReceive.
				</p>
			</remarks><param name="host">The System.Net.IPEndPoint to use.</param><exception cref="T:System.Net.Sockets.SocketException">The local address is unknown, invalid, or unable to be resolved.</exception><exception cref="T:System.ArgumentOutOfRangeException">The local port is out of the range of valid values.</exception>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates the Udp.ActiveChanged event</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub ActiveChangedTest()
   ' Create an IPEndPoint
   Dim ep As System.Net.IPEndPoint = New System.Net.IPEndPoint(System.Net.IPAddress.Parse("192.168.0.71"), 1111)

   ' Begin listening on the specified endpoint. The ActiveChanged event should be raised.
   Udp1.Open(ep)

   ' Stop listening. The ActiveChanged event should be raised again.
   Udp1.Close()
End Sub

Private Sub Udp1_ActiveChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles Udp1.ActiveChanged
   If Udp1.Active Then
      Debug.WriteLine("Listening on " + Udp1.LocalEndPoint.ToString())
   Else
      Debug.WriteLine("Not Listening")
   End If
End Sub
<span class="lang">[C#]</span> 
private void ActiveChangedTest()
{
   // Create an IPEndPoint
   System.Net.IPEndPoint ep = new System.Net.IPEndPoint(System.Net.IPAddress.Parse("192.168.0.71"), 1111);

   // Begin listening on the specified endpoint. The ActiveChanged event should be raised.
   udp1.Open(ep);

   // Stop listening. The ActiveChanged event should be raised again.
   udp1.Close();
}

private void udp1_ActiveChanged(object sender, System.EventArgs e)
{
   if(udp1.Active)
      Debug.WriteLine("Listening on " + udp1.LocalEndPoint.ToString());
   else
   {
      Debug.WriteLine("Not Listening")
   }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Udp.Open(System.Int32)">
            <summary>
				Allocate a socket at the specified port for sending and receiving datagrams.
			</summary><remarks>
				<p>This method allocates a socket at the specified port and the default system address for sending
				and receiving datagrams. Upon successful completion of this method, the local address and
				port are accessible through the Udp.LocalEndPoint property. When using the default system address, the
				Udp.LocalEndPoint.Address property is "0.0.0.0".
				</p>
				<p>
				This method must be called in order to successfully use Udp.Receive or Udp.BeginReceive.
				</p>
			</remarks><param name="port">The local port to use.</param><exception cref="T:System.ArgumentOutOfRangeException">The local port is out of the range of valid values.</exception>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates creating a UDP echo server application which listens for datagrams and echoes them back to the sender.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
   ' Listen for datagrams on port 7.
   Udp1.Open(7)

   ' Begin an asynchronous Receive
   Dim buffer(Udp1.BufferSize) As Byte
   Udp1.BeginReceive(buffer)
End Sub

Private Sub Udp1_EndReceive(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureFtp.DatagramEventArgs) Handles Udp1.EndReceive
   
   ' Check for an Exception
   If e.Exception is Nothing Then
      ' Echo the data back using the Datagram object passed into the event.
      ' Datagram.Buffer = data received from client
      ' Datagram.RemoteEndPoint = address/port of client.
      Udp1.Send(e.Datagram.Buffer, e.Datagram.RemoteEndPoint)
   End If

   ' Start receiving next
   Dim buffer(Udp1.BufferSize) As Byte
   Udp1.BeginReceive(buffer)
   
End Sub
<span class="lang">[C#]</span> 
private void StartServer()
{			
   // Listen for datagrams on port 7.
   udp1.Open(7);

   // Begin an asynchronous Receive
   byte[] buffer = new byte[udp1.BufferSize];
   udp1.BeginReceive(buffer);
}

private void udp1_EndReceive(object sender, Dart.PowerTCP.SecureFtp.DatagramEventArgs e)
{
   // Check for an exception
   if(e.Exception == null)
   {
      // Echo the data back using the Datagram object passed into the event.
      // Datagram.Buffer = data received from client
      // Datagram.RemoteEndPoint = address/port of client.
      Datagram d = udp1.Send(e.Datagram.Buffer, e.Datagram.RemoteEndPoint);
   }		
   // Start receiving next
   byte[] buffer = new byte[udp1.BufferSize];
   udp1.BeginReceive(buffer);
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Udp.Open">
            <summary>
				Allocate a socket at an ephemeral port for sending and receiving datagrams.
			</summary><remarks>
				<p>This method allocates a socket at the default system address and an ephemeral port for sending
				and receiving datagrams. Upon successful completion of this method, the local address and
				port are accessible through the Udp.LocalEndPoint property. When using the default system address, the
				Udp.LocalEndPoint.Address property is "0.0.0.0".
				</p>
				<p>
				This method must be called in order to successfully use Udp.Send, Udp.Receive, or Udp.JoinMulticastGroup.
				</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates sending some datagrams to an echo server and receiving the datagrams from the echo server.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Dim iterations as Integer = 3

' Listen on the default interface and an ephemeral port.
udp1.Open()

' Send several datagrams
Dim s as String = "test"
Dim i as Integer
For i=0 to iterations
   Udp1.send(s, "MyEchoServer", 7)
Next

' receive the echoed datagrams, there should be 3...requiring 3 Udp.Receive calls.
For i=0 to iterations
   Dim d as Datagram = Udp1.Receive(s.Length)
   Debug.WriteLine(d.ToString())
Next

'* Output
'* ------------------------
'* test
'* test
'* test
'* ------------------------
'*
<span class="lang">[C#]</span> 
int iterations = 3;

// Listen on the default interface and an ephemeral port.
udp1.Open();

// Send several datagrams
string s = "test";
for(int i=0; i&lt;iterations; i++)
   udp1.send(s, "MyEchoServer", 7);

// receive the echoed datagrams, there should be 3...requiring 3 Udp.Receive calls.
for(int i=0; i&lt;iterations; i++)
{
   Datagram d = udp1.Receive(s.Length);
   Debug.WriteLine(d.ToString());
}

/* Output
* ------------------------
* test
* test
* test
* ------------------------
*/
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Udp.Close">
            <summary>
            Close the socket.
            </summary><remarks>
				<p>
            This method is the recommended way to close a socket (stop listening for datagrams).
            The Udp1.Active property is set to false when the socket is closed.
			</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates the Udp.ActiveChanged event</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub ActiveChangedTest()
   ' Create an IPEndPoint
   Dim ep As System.Net.IPEndPoint = New System.Net.IPEndPoint(System.Net.IPAddress.Parse("192.168.0.71"), 1111)

   ' Begin listening on the specified endpoint. The ActiveChanged event should be raised.
   Udp1.Open(ep)

   ' Stop listening. The ActiveChanged event should be raised again.
   Udp1.Close()
End Sub

Private Sub Udp1_ActiveChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles Udp1.ActiveChanged
   If Udp1.Active Then
      Debug.WriteLine("Listening on " + Udp1.LocalEndPoint.ToString())
   Else
      Debug.WriteLine("Not Listening")
   End If
End Sub
<span class="lang">[C#]</span> 
private void ActiveChangedTest()
{
   // Create an IPEndPoint
   System.Net.IPEndPoint ep = new System.Net.IPEndPoint(System.Net.IPAddress.Parse("192.168.0.71"), 1111);

   // Begin listening on the specified endpoint. The ActiveChanged event should be raised.
   udp1.Open(ep);

   // Stop listening. The ActiveChanged event should be raised again.
   udp1.Close();
}

private void udp1_ActiveChanged(object sender, System.EventArgs e)
{
   if(udp1.Active)
      Debug.WriteLine("Listening on " + udp1.LocalEndPoint.ToString());
   else
   {
      Debug.WriteLine("Not Listening")
   }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Udp.LeaveMulticastGroup(System.Net.IPAddress)">
            <summary>
			   Leave the specified multicast group for receiving datagrams.
			</summary><remarks>
				<p>Use the Udp.LeaveMulticastGroup to leave a multicast group. <i>groupAddress</i> specifies the
				multicast address group to leave. The host will no longer be 
				able to receive datagrams sent to the multicasted address group. The host will still be listening
				at the port specified by Udp.Open and will still be able to receive datagrams sent to the host's
				local address/port.
				</p>
			</remarks><param name="groupAddress">The System.Net.IPAddress specifying the multicast group address to leave.</param><exception cref="T:System.Net.Sockets.SocketException">The multicast address is unknown, invalid, or unable to be resolved.</exception>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using multicasting functionality to create a simple chat client.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' The IPAddress representing the multicast address.
Private add As System.Net.IPAddress = System.Net.IPAddress.Parse("239.255.255.254")

Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
   ' Allocate a socket for listening for datagrams.
   Udp1.Open("MyHost", 1111)

   ' Join the specified multicast group.
   Udp1.JoinMulticastGroup(add)

   ' Begin asynchronously receiving data
   Dim buffer(Udp1.BufferSize) As Byte
   Udp1.BeginReceive(buffer)
End Sub

Private Sub Udp1_EndReceive(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureFtp.DatagramEventArgs) Handles Udp1.EndReceive
   ' Data recived. Display 
   txtData.Text += e.Datagram.ToString() + vbCrLF
   			
   ' Begin asynchronously receiving data
   Dim buffer(Udp1.BufferSize) As Byte
   Udp1.BeginReceive(buffer)
End Sub

Private Sub cmdSend_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdSend.Click
   ' Send button clicked. Send the contents of txtSend.
   Udp1.Send(txtSend.Text, add.ToString(), 1111)
End Sub

Private Sub cmdLeave_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdLeave.Click
   ' Leave group button clicked. Leave the group.
   Udp1.LeaveMulticastGroup(add)
End Sub
<span class="lang">[C#]</span> 
// The IPAddress representing the multicast address.
private System.Net.IPAddress add = System.Net.IPAddress.Parse("239.255.255.254");

private void Form1_Load(object sender, System.EventArgs e)
{
   // Allocate a socket for listening for datagrams.
   udp1.Open("MyHost", 1111);

   // Join the specified multicast group.
   udp1.JoinMulticastGroup(add);

   // Begin asynchronously receiving data
   byte[] buffer = new byte[udp1.BufferSize];
   udp1.BeginReceive(buffer);
}

private void udp1_EndReceive(object sender, Dart.PowerTCP.SecureFtp.DatagramEventArgs e)
{
   // Data recived. Display 
   txtData.Text += e.Datagram.ToString() + "\r\n";
   			
   // Begin asynchronously receiving data
   byte[] buffer = new byte[udp1.BufferSize];
   udp1.BeginReceive(buffer);
}

private void cmdSend_Click(object sender, System.EventArgs e)
{
   // Send button clicked. Send the contents of txtSend.
   udp1.Send(txtSend.Text, add.ToString(), 1111);
}

private void cmdLeave_Click(object sender, System.EventArgs e)
{
   // Leave group button clicked. Leave the group.
   udp1.LeaveMulticastGroup(add);
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Udp.JoinMulticastGroup(System.Net.IPAddress)">
            <summary>
				Join the specified multicast group for receiving datagrams.
			</summary><remarks>
				<p>Use the Udp.JoinMulticastGroup method to join a multicast group, useful when
				you wish for datagrams to be sent to multiple hosts. The host
				is able to receive all datagrams sent to the specified multicast address
				and port.
				</p>
				<p>Multicast groups are specified as an IP Address within a specified 
				range of addresses. This group of addresses, also know as class D IP 
				Addresses, are in the range from 224.0.0.0 through 239.255.255.255. In 
				order to receive packets sent to a multicast group (using Udp.Receive), you must first join 
				the group using this method.</p>
				<p>Using multicasting over broadcasting reduces the load on hosts that are not
				interested in the data sent.
				</p>
			</remarks><param name="groupAddress">The System.Net.IPAddress specifying the multicast group address to join.</param><exception cref="T:System.Net.Sockets.SocketException">The multicast address is unknown, invalid, or unable to be resolved.</exception>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using multicasting functionality to create a simple chat client.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' The IPAddress representing the multicast address.
Private add As System.Net.IPAddress = System.Net.IPAddress.Parse("239.255.255.254")

Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
   ' Allocate a socket for listening for datagrams.
   Udp1.Open("MyHost", 1111)

   ' Join the specified multicast group.
   Udp1.JoinMulticastGroup(add)

   ' Begin asynchronously receiving data
   Dim buffer(Udp1.BufferSize) As Byte
   Udp1.BeginReceive(buffer)
End Sub

Private Sub Udp1_EndReceive(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureFtp.DatagramEventArgs) Handles Udp1.EndReceive
   ' Data recived. Display 
   txtData.Text += e.Datagram.ToString() + vbCrLF
   			
   ' Begin asynchronously receiving data
   Dim buffer(Udp1.BufferSize) As Byte
   Udp1.BeginReceive(buffer)
End Sub

Private Sub cmdSend_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdSend.Click
   ' Send button clicked. Send the contents of txtSend.
   Udp1.Send(txtSend.Text, add.ToString(), 1111)
End Sub

Private Sub cmdLeave_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdLeave.Click
   ' Leave group button clicked. Leave the group.
   Udp1.LeaveMulticastGroup(add)
End Sub
<span class="lang">[C#]</span> 
// The IPAddress representing the multicast address.
private System.Net.IPAddress add = System.Net.IPAddress.Parse("239.255.255.254");

private void Form1_Load(object sender, System.EventArgs e)
{
   // Allocate a socket for listening for datagrams.
   udp1.Open("MyHost", 1111);

   // Join the specified multicast group.
   udp1.JoinMulticastGroup(add);

   // Begin asynchronously receiving data
   byte[] buffer = new byte[udp1.BufferSize];
   udp1.BeginReceive(buffer);
}

private void udp1_EndReceive(object sender, Dart.PowerTCP.SecureFtp.DatagramEventArgs e)
{
   // Data recived. Display 
   txtData.Text += e.Datagram.ToString() + "\r\n";
   			
   // Begin asynchronously receiving data
   byte[] buffer = new byte[udp1.BufferSize];
   udp1.BeginReceive(buffer);
}

private void cmdSend_Click(object sender, System.EventArgs e)
{
   // Send button clicked. Send the contents of txtSend.
   udp1.Send(txtSend.Text, add.ToString(), 1111);
}

private void cmdLeave_Click(object sender, System.EventArgs e)
{
   // Leave group button clicked. Leave the group.
   udp1.LeaveMulticastGroup(add);
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Udp.Receive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
				Receive a datagram, specifying a buffer, offset, length and SocketFlags value.
			</summary><remarks>
				<p>Use the Udp.Receive method to receive a datagram into <i>buffer</i> after first calling Udp.Open to 
				specify a port/address to listen for datagrams. This method also returns a Datagram object encapsulating
				the datagram received. Datagram.Buffer contains the actual datagram data (equivalent to <i>buffer</i>). Datagram.RemoteEndPoint contains
				the address/port of the remote host from which the datagram was sent.
				</p>
				<p>
				A UDP datagram provides little functionality over an IP datagram, adding a port 
				number field which allows multiplexing on the receiving host and checksum field
				which provides basic error handling.
				Unlike TCP, UDP datagrams are sent as a unit. If Udp.Send is called
				3 times to send 3 datagrams to a host, the receiving host will have 
				to call Udp.Receive 3 times. Also, the size of each datagram sent will equal
				the size of each datagram received by the receiving host. In addition, since 
				UDP is a connectionless protocol, any datagrams sent to the host are not 
				guarenteed to be delivered. Therefore, any required error checking (outside of UDP's checksum
				implementation) will have to be done by the application-layer protocol.
				</p>
			</remarks><returns>
				A Datagram object encapsulating the datagram received.
			</returns><param name="buffer">A byte array to be filled with the data received.</param><param name="offset">Starting offset within buffer for filling.</param><param name="count">Maximum number of bytes to receive.</param><param name="socketFlags">A bitwise combination of special use receiving parameters.</param><exception cref="T:System.ArgumentNullException"><i>buffer</i> is null.</exception><exception cref="T:System.ArgumentOutOfRangeException"><I>offset</I> or <I>count</I> is less than 0.</exception><exception cref="T:System.ArgumentException"><I>offset</I> + <I>count</I> is greater than the length of <I>buffer</I>.</exception>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates...</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Begin listening on the specified port and address
Udp1.Open("MyHostName", 8888)

' Send a broadcast to all hosts on the network on port 8888
Udp1.Send("hello everyone", "255.255.255.255", "8888")

' Receive the broadcast datagram.
Dim buffer(Udp1.BufferSize) As Byte
Debug.WriteLine(System.Text.Encoding.Default.GetString(buffer))

' Display data
Debug.WriteLine(d.ToString())

'* Output
'* ---------------------
'* hello everyone
'* ---------------------
'*
<span class="lang">[C#]</span> 
// Begin listening on the specified port and address
udp1.Open("MyHostName", 8888);

// Send a broadcast to all hosts on the network on port 8888
udp1.Send("hello everyone", "255.255.255.255", "8888");

// Receive the broadcast datagram.
byte[] buffer = new byte[udp1.BufferSize];
udp1.Receive(buffer);

// Display data
Debug.WriteLine(System.Text.Encoding.Default.GetString(buffer));

/* Output
* ---------------------
* hello everyone
* ---------------------
*/
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Udp.Receive(System.Byte[])">
            <summary>
				Receive a datagram.
			</summary><remarks>
				<p>Use the Udp.Receive method to receive a datagram into <i>buffer</i> after first calling Udp.Open to 
				specify a port/address to listen for datagrams. This method also returns a Datagram object encapsulating
				the datagram received. Datagram.Buffer contains the actual datagram data (equivalent to <i>buffer</i>). Datagram.RemoteEndPoint contains
				the address/port of the remote host from which the datagram was sent.
				</p>
				<p>
				A UDP datagram provides little functionality over an IP datagram, adding a port 
				number field which allows multiplexing on the receiving host and checksum field
				which provides basic error handling.
				Unlike TCP, UDP datagrams are sent as a unit. If Udp.Send is called
				3 times to send 3 datagrams to a host, the receiving host will have 
				to call Udp.Receive 3 times. Also, the size of each datagram sent will equal
				the size of each datagram received by the receiving host. In addition, since 
				UDP is a connectionless protocol, any datagrams sent to the host are not 
				guarenteed to be delivered. Therefore, any required error checking (outside of UDP's checksum
				implementation) will have to be done by the application-layer protocol.
				</p>
			</remarks><returns>
				A Datagram object encapsulating the datagram received.
			</returns><param name="buffer">A byte array to be filled with the data received.</param><exception cref="T:System.ArgumentNullException"><i>buffer</i> is null.</exception>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates...</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Begin listening on the specified port and address
Udp1.Open("MyHostName", 8888)

' Send a broadcast to all hosts on the network on port 8888
Udp1.Send("hello everyone", "255.255.255.255", "8888")

' Receive the broadcast datagram.
Dim buffer(Udp1.BufferSize) As Byte
Debug.WriteLine(System.Text.Encoding.Default.GetString(buffer))

' Display data
Debug.WriteLine(d.ToString())

'* Output
'* ---------------------
'* hello everyone
'* ---------------------
'*
<span class="lang">[C#]</span> 
// Begin listening on the specified port and address
udp1.Open("MyHostName", 8888);

// Send a broadcast to all hosts on the network on port 8888
udp1.Send("hello everyone", "255.255.255.255", "8888");

// Receive the broadcast datagram.
byte[] buffer = new byte[udp1.BufferSize];
udp1.Receive(buffer);

// Display data
Debug.WriteLine(System.Text.Encoding.Default.GetString(buffer));

/* Output
* ---------------------
* hello everyone
* ---------------------
*/
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Udp.Receive(System.Int32)">
            <summary>
				Receive a datagram, specifying the maximum bytes to receive.
			</summary><remarks>
				<p>Use the Udp.Receive method to receive a datagram after first calling Udp.Open to 
				specify a port/address to listen for datagrams. This method returns a Datagram object encapsulating
				the datagram received. Datagram.Buffer contains the actual datagram data. Datagram.RemoteEndPoint contains
				the address/port of the remote host from which the datagram was sent.
				</p>
				<p>
				A UDP datagram provides little functionality over an IP datagram, adding a port 
				number field which allows multiplexing on the receiving host and checksum field
				which provides basic error handling.
				Unlike TCP, UDP datagrams are sent as a unit. If Udp.Send is called
				3 times to send 3 datagrams to a host, the receiving host will have 
				to call Udp.Receive 3 times. Also, the size of each datagram sent will equal
				the size of each datagram received by the receiving host. In addition, since 
				UDP is a connectionless protocol, any datagrams sent to the host are not 
				guarenteed to be delivered. Therefore, any required error checking (outside of UDP's checksum
				implementation) will have to be done by the application-layer protocol.
				</p>
			</remarks><returns>
				A Datagram object encapsulating the datagram received.
			</returns><param name="count">Maximum number of bytes to receive.</param>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates sending some datagrams to an echo server and receiving the datagrams from the echo server.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Dim iterations as Integer = 3

' Listen on the default interface and an ephemeral port.
udp1.Open()

' Send several datagrams
Dim s as String = "test"
Dim i as Integer
For i=0 to iterations
   Udp1.send(s, "MyEchoServer", 7)
Next

' receive the echoed datagrams, there should be 3...requiring 3 Udp.Receive calls.
For i=0 to iterations
   Dim d as Datagram = Udp1.Receive(s.Length)
   Debug.WriteLine(d.ToString())
Next

'* Output
'* ------------------------
'* test
'* test
'* test
'* ------------------------
'*
<span class="lang">[C#]</span> 
int iterations = 3;

// Listen on the default interface and an ephemeral port.
udp1.Open();

// Send several datagrams
string s = "test";
for(int i=0; i&lt;iterations; i++)
   udp1.send(s, "MyEchoServer", 7);

// receive the echoed datagrams, there should be 3...requiring 3 Udp.Receive calls.
for(int i=0; i&lt;iterations; i++)
{
   Datagram d = udp1.Receive(s.Length);
   Debug.WriteLine(d.ToString());
}

/* Output
* ------------------------
* test
* test
* test
* ------------------------
*/
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Udp.Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.String,System.Int32)">
            <summary>
				Send a datagram to the specified remote address and port, specifying a buffer, offset, length and SocketFlags value.
			</summary><remarks>
				<p>Use the Udp.Send method to sent a datagram created from the data contained
				in <i>buffer</i> to the specified <i>host</i> and <i>port</i>.</p>
				<p>
				A UDP datagram provides little functionality over an IP datagram, adding a port 
				number field which allows multiplexing on the receiving host and checksum field
				which provides basic error handling.
				Unlike TCP, UDP datagrams are sent as a unit. If Udp.Send is called
				3 times to send 3 datagrams to a host, the receiving host will have 
				to call Udp.Receive 3 times. Also, the size of each datagram sent will equal
				the size of each datagram received by the receiving host. In addition, since 
				UDP is a connectionless protocol, any datagrams sent to the host are not 
				guarenteed to be delivered. Therefore, any required error checking (outside of UDP's checksum
				implementation) will have to be done by the application-layer protocol.
				</p>
				<p>To send a broadcast datagram, use "255.255.255.255" as the remote address. To sent 
				a multicast datagram, use the multicast group address as the remote address after first joining a multicast group by using Udp.JoinMulitcastGroup.
				</p>
			</remarks><returns>
				A Datagram object encapsulating the datagram sent.
			</returns><param name="buffer">A byte array containing the data to send.</param><param name="offset">Starting offset within buffer for sending.</param><param name="count">Number of bytes to send.</param><param name="socketFlags">A bitwise combination of special use sending parameters.</param><param name="host">The host address (either dot address or hostname) to send the datagram to.</param><param name="port">The host port to send the datagram to.</param><exception cref="T:System.ArgumentNullException"><i>buffer</i> is null.</exception><exception cref="T:System.Net.Sockets.SocketException">The remote address is unknown, invalid, or unable to be resolved.</exception><exception cref="T:System.ArgumentOutOfRangeException">The remote port is out of the range of valid values.<br>--or--</br><I>offset</I> or <I>count</I> is less than 0.</exception><exception cref="T:System.ArgumentException"><I>offset</I> + <I>count</I> is greater than the length of <I>buffer</I>.</exception>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates sending some datagrams to an echo server and receiving the datagrams from the echo server.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Dim iterations as Integer = 3

' Listen on the default interface and an ephemeral port.
udp1.Open()

' Send several datagrams
Dim buffer As Byte() = System.Text.Encoding.Default.GetBytes("test")
Dim i as Integer
For(i=0; i&lt;iterations; i++)
   Udp1.send(buffer, "MyEchoServer", 7)
Next

' receive the echoed datagrams, there should be 3...requiring 3 Udp.Receive calls.
For(i=0; i&lt;iterations; i++)
   Dim d as Datagram = Udp1.Receive(buffer.Length)
   Debug.WriteLine(d.ToString())
Next

'* Output
'* ------------------------
'* test
'* test
'* test
'* ------------------------
'*
<span class="lang">[C#]</span> 
int iterations = 3;

// Listen on the default interface and an ephemeral port.
udp1.Open();

// Send several datagrams
byte[] buffer = System.Text.Encoding.Default.GetBytes("test");
for(int i=0; i&lt;iterations; i++)
   udp1.send(buffer, "MyEchoServer", 7);

// receive the echoed datagrams, there should be 3...requiring 3 Udp.Receive calls.
for(int i=0; i&lt;iterations; i++)
{
   Datagram d = udp1.Receive(buffer.Length);
   Debug.WriteLine(d.ToString());
}

/* Output
* ------------------------
* test
* test
* test
* ------------------------
*/
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Udp.Send(System.Byte[],System.String,System.Int32)">
            <summary>
				Send a datagram to the specified remote address and port.
			</summary><remarks>
				<p>Use the Udp.Send method to sent a datagram created from the data contained
				in <i>buffer</i> to the specified <i>host</i> and <i>port</i>.</p>
				<p>
				A UDP datagram provides little functionality over an IP datagram, adding a port 
				number field which allows multiplexing on the receiving host and checksum field
				which provides basic error handling.
				Unlike TCP, UDP datagrams are sent as a unit. If Udp.Send is called
				3 times to send 3 datagrams to a host, the receiving host will have 
				to call Udp.Receive 3 times. Also, the size of each datagram sent will equal
				the size of each datagram received by the receiving host. In addition, since 
				UDP is a connectionless protocol, any datagrams sent to the host are not 
				guarenteed to be delivered. Therefore, any required error checking (outside of UDP's checksum
				implementation) will have to be done by the application-layer protocol.
				</p>
				<p>To send a broadcast datagram, use "255.255.255.255" as the remote address. To sent 
				a multicast datagram, use the multicast group address as the remote address after first joining a multicast group by using Udp.JoinMulitcastGroup.
				</p>
			</remarks><returns>
				A Datagram object encapsulating the datagram sent.
			</returns><param name="buffer">A byte array containing the data to send.</param><param name="host">The host address (either dot address or hostname) to send the datagram to.</param><param name="port">The host port to send the datagram to.</param><exception cref="T:System.ArgumentNullException"><i>buffer</i> is null.</exception><exception cref="T:System.Net.Sockets.SocketException">The remote address is unknown, invalid, or unable to be resolved.</exception><exception cref="T:System.ArgumentOutOfRangeException">The remote port is out of the range of valid values.</exception>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates sending some datagrams to an echo server and receiving the datagrams from the echo server.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Dim iterations as Integer = 3

' Listen on the default interface and an ephemeral port.
udp1.Open()

' Send several datagrams
Dim buffer As Byte() = System.Text.Encoding.Default.GetBytes("test")
Dim i as Integer
For(i=0; i&lt;iterations; i++)
   Udp1.send(buffer, "MyEchoServer", 7)
Next

' receive the echoed datagrams, there should be 3...requiring 3 Udp.Receive calls.
For(i=0; i&lt;iterations; i++)
   Dim d as Datagram = Udp1.Receive(buffer.Length)
   Debug.WriteLine(d.ToString())
Next

'* Output
'* ------------------------
'* test
'* test
'* test
'* ------------------------
'*
<span class="lang">[C#]</span> 
int iterations = 3;

// Listen on the default interface and an ephemeral port.
udp1.Open();

// Send several datagrams
byte[] buffer = System.Text.Encoding.Default.GetBytes("test");
for(int i=0; i&lt;iterations; i++)
   udp1.send(buffer, "MyEchoServer", 7);

// receive the echoed datagrams, there should be 3...requiring 3 Udp.Receive calls.
for(int i=0; i&lt;iterations; i++)
{
   Datagram d = udp1.Receive(buffer.Length);
   Debug.WriteLine(d.ToString());
}

/* Output
* ------------------------
* test
* test
* test
* ------------------------
*/
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Udp.Send(System.Byte[],System.String,System.String)">
            <summary>
				Send a datagram to the specified remote address and port.
			</summary><remarks>
				<p>Use the Udp.Send method to sent a datagram created from the data contained
				in <i>buffer</i> to the specified <i>host</i> and <i>port</i>.</p>
				<p>
				A UDP datagram provides little functionality over an IP datagram, adding a port 
				number field which allows multiplexing on the receiving host and checksum field
				which provides basic error handling.
				Unlike TCP, UDP datagrams are sent as a unit. If Udp.Send is called
				3 times to send 3 datagrams to a host, the receiving host will have 
				to call Udp.Receive 3 times. Also, the size of each datagram sent will equal
				the size of each datagram received by the receiving host. In addition, since 
				UDP is a connectionless protocol, any datagrams sent to the host are not 
				guarenteed to be delivered. Therefore, any required error checking (outside of UDP's checksum
				implementation) will have to be done by the application-layer protocol.
				</p>
				<p>To send a broadcast datagram, use "255.255.255.255" as the remote address. To sent 
				a multicast datagram, use the multicast group address as the remote address after first joining a multicast group by using Udp.JoinMulitcastGroup.
				</p>
			</remarks><returns>
				A Datagram object encapsulating the datagram sent.
			</returns><param name="buffer">A byte array containing the data to send.</param><param name="host">The host address (either dot address or hostname) to send the datagram to.</param><param name="port">A string (which is converted to an Integer) representing the host port to send the datagram to.</param><exception cref="T:System.ArgumentNullException"><i>buffer</i> is null.</exception><exception cref="T:System.Net.Sockets.SocketException">The remote address is unknown, invalid, or unable to be resolved.</exception><exception cref="T:System.ArgumentOutOfRangeException">The remote port is out of the range of valid values.</exception>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates sending some datagrams to an echo server and receiving the datagrams from the echo server.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Dim iterations as Integer = 3

' Listen on the default interface and an ephemeral port.
udp1.Open()

' Send several datagrams
Dim buffer As Byte() = System.Text.Encoding.Default.GetBytes("test")
Dim i as Integer
For(i=0; i&lt;iterations; i++)
   Udp1.send(buffer, "MyEchoServer", 7)
Next

' receive the echoed datagrams, there should be 3...requiring 3 Udp.Receive calls.
For(i=0; i&lt;iterations; i++)
   Dim d as Datagram = Udp1.Receive(buffer.Length)
   Debug.WriteLine(d.ToString())
Next

'* Output
'* ------------------------
'* test
'* test
'* test
'* ------------------------
'*
<span class="lang">[C#]</span> 
int iterations = 3;

// Listen on the default interface and an ephemeral port.
udp1.Open();

// Send several datagrams
byte[] buffer = System.Text.Encoding.Default.GetBytes("test");
for(int i=0; i&lt;iterations; i++)
   udp1.send(buffer, "MyEchoServer", 7);

// receive the echoed datagrams, there should be 3...requiring 3 Udp.Receive calls.
for(int i=0; i&lt;iterations; i++)
{
   Datagram d = udp1.Receive(buffer.Length);
   Debug.WriteLine(d.ToString());
}

/* Output
* ------------------------
* test
* test
* test
* ------------------------
*/
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Udp.Send(System.String,System.String,System.Int32)">
            <summary>
				Send a datagram to the specified remote address and port.
			</summary><remarks>
				<p>Use the Udp.Send method to sent a datagram created from the data contained
				in <i>buffer</i> to the specified <i>host</i> and <i>port</i>. <i>buffer</i> is
				converted to a byte array before sending.</p>
				<p>
				A UDP datagram provides little functionality over an IP datagram, adding a port 
				number field which allows multiplexing on the receiving host and checksum field
				which provides basic error handling.
				Unlike TCP, UDP datagrams are sent as a unit. If Udp.Send is called
				3 times to send 3 datagrams to a host, the receiving host will have 
				to call Udp.Receive 3 times. Also, the size of each datagram sent will equal
				the size of each datagram received by the receiving host. In addition, since 
				UDP is a connectionless protocol, any datagrams sent to the host are not 
				guarenteed to be delivered. Therefore, any required error checking (outside of UDP's checksum
				implementation) will have to be done by the application-layer protocol.
				</p>
				<p>To send a broadcast datagram, use "255.255.255.255" as the remote address. To sent 
				a multicast datagram, use the multicast group address as the remote address after first joining a multicast group by using Udp.JoinMulitcastGroup.
				</p>
			</remarks><returns>
				A Datagram object encapsulating the datagram sent.
			</returns><param name="buffer">A string containing the data to send.</param><param name="host">The host address (either dot address or hostname) to send the datagram to.</param><param name="port">The host port to send the datagram to.</param><exception cref="T:System.ArgumentNullException"><i>buffer</i> is null.</exception><exception cref="T:System.Net.Sockets.SocketException">The remote address is unknown, invalid, or unable to be resolved.</exception><exception cref="T:System.ArgumentOutOfRangeException">The remote port is out of the range of valid values.</exception>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates sending some datagrams to an echo server and receiving the datagrams from the echo server.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Dim iterations as Integer = 3

' Listen on the default interface and an ephemeral port.
udp1.Open()

' Send several datagrams
Dim s as String = "test"
Dim i as Integer
For i=0 to iterations
   Udp1.send(s, "MyEchoServer", 7)
Next

' receive the echoed datagrams, there should be 3...requiring 3 Udp.Receive calls.
For i=0 to iterations
   Dim d as Datagram = Udp1.Receive(s.Length)
   Debug.WriteLine(d.ToString())
Next

'* Output
'* ------------------------
'* test
'* test
'* test
'* ------------------------
'*
<span class="lang">[C#]</span> 
int iterations = 3;

// Listen on the default interface and an ephemeral port.
udp1.Open();

// Send several datagrams
string s = "test";
for(int i=0; i&lt;iterations; i++)
   udp1.send(s, "MyEchoServer", 7);

// receive the echoed datagrams, there should be 3...requiring 3 Udp.Receive calls.
for(int i=0; i&lt;iterations; i++)
{
   Datagram d = udp1.Receive(s.Length);
   Debug.WriteLine(d.ToString());
}

/* Output
* ------------------------
* test
* test
* test
* ------------------------
*/
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Udp.Send(System.String,System.String,System.String)">
            <summary>
				Send a datagram to the specified remote address and port.
			</summary><remarks>
				<p>Use the Udp.Send method to sent a datagram created from the data contained
				in <i>buffer</i> to the specified <i>host</i> and <i>port</i>. <i>buffer</i> is
				converted to a byte array before sending.</p>
				<p>
				A UDP datagram provides little functionality over an IP datagram, adding a port 
				number field which allows multiplexing on the receiving host and checksum field
				which provides basic error handling.
				Unlike TCP, UDP datagrams are sent as a unit. If Udp.Send is called
				3 times to send 3 datagrams to a host, the receiving host will have 
				to call Udp.Receive 3 times. Also, the size of each datagram sent will equal
				the size of each datagram received by the receiving host. In addition, since 
				UDP is a connectionless protocol, any datagrams sent to the host are not 
				guarenteed to be delivered. Therefore, any required error checking (outside of UDP's checksum
				implementation) will have to be done by the application-layer protocol.
				</p>
				<p>To send a broadcast datagram, use "255.255.255.255" as the remote address. To sent 
				a multicast datagram, use the multicast group address as the remote address after first joining a multicast group by using Udp.JoinMulitcastGroup.
				</p>
			</remarks><returns>
				A Datagram object encapsulating the datagram sent.
			</returns><param name="buffer">A string containing the data to send.</param><param name="host">The host address (either dot address or hostname) to send the datagram to.</param><param name="port">A string (which is converted to an Integer) representing the host port to send the datagram to.</param><exception cref="T:System.ArgumentNullException"><i>buffer</i> is null.</exception><exception cref="T:System.Net.Sockets.SocketException">The remote address is unknown, invalid, or unable to be resolved.</exception><exception cref="T:System.ArgumentOutOfRangeException">The remote port is out of the range of valid values.</exception>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates...</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' Begin listening on the specified port and address
Udp1.Open("MyHostName", 8888)

' Send a broadcast to all hosts on the network on port 8888
Udp1.Send("hello everyone", "255.255.255.255", "8888")

' Receive the broadcast datagram.
Dim buffer(Udp1.BufferSize) As Byte
Debug.WriteLine(System.Text.Encoding.Default.GetString(buffer))

' Display data
Debug.WriteLine(d.ToString())

'* Output
'* ---------------------
'* hello everyone
'* ---------------------
'*
<span class="lang">[C#]</span> 
// Begin listening on the specified port and address
udp1.Open("MyHostName", 8888);

// Send a broadcast to all hosts on the network on port 8888
udp1.Send("hello everyone", "255.255.255.255", "8888");

// Receive the broadcast datagram.
byte[] buffer = new byte[udp1.BufferSize];
udp1.Receive(buffer);

// Display data
Debug.WriteLine(System.Text.Encoding.Default.GetString(buffer));

/* Output
* ---------------------
* hello everyone
* ---------------------
*/
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Udp.Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.IPEndPoint)">
            <summary>
				Send a datagram to the specified IPEndPoint, specifying a buffer, offset, length and SocketFlags value.
			</summary><remarks>
				<p>Use the Udp.Send method to sent a datagram created from the data contained
				in <i>buffer</i> to the specified <i>host</i>.</p>
				<p>
				A UDP datagram provides little functionality over an IP datagram, adding a port 
				number field which allows multiplexing on the receiving host and checksum field
				which provides basic error handling.
				Unlike TCP, UDP datagrams are sent as a unit. If Udp.Send is called
				3 times to send 3 datagrams to a host, the receiving host will have 
				to call Udp.Receive 3 times. Also, the size of each datagram sent will equal
				the size of each datagram received by the receiving host. In addition, since 
				UDP is a connectionless protocol, any datagrams sent to the host are not 
				guarenteed to be delivered. Therefore, any required error checking (outside of UDP's checksum
				implementation) will have to be done by the application-layer protocol.
				</p>
				<p>To send a broadcast datagram, use "255.255.255.255" as the remote address. To sent 
				a multicast datagram, use the multicast group address as the remote address after first joining a multicast group by using Udp.JoinMulitcastGroup.
				</p>
			</remarks><returns>
				A Datagram object encapsulating the datagram sent.
			</returns><param name="buffer">A byte array containing the data to send.</param><param name="offset">Starting offset within buffer for sending.</param><param name="count">Number of bytes to send.</param><param name="socketFlags">A bitwise combination of special use sending parameters.</param><param name="host">The System.Net.IPEndPoint representing the remote hosts's IP address and port.</param><exception cref="T:System.ArgumentNullException"><i>buffer</i> is null.</exception><exception cref="T:System.Net.Sockets.SocketException">The remote address is unknown, invalid, or unable to be resolved.</exception><exception cref="T:System.ArgumentOutOfRangeException">The remote port is out of the range of valid values.<br>--or--</br><I>offset</I> or <I>count</I> is less than 0.</exception><exception cref="T:System.ArgumentException"><I>offset</I> + <I>count</I> is greater than the length of <I>buffer</I>.</exception>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates creating a UDP echo server application which listens for datagrams and echoes them back to the sender.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
   ' Listen for datagrams on port 7.
   Udp1.Open(7)

   ' Begin an asynchronous Receive
   Dim buffer(Udp1.BufferSize) As Byte
   Udp1.BeginReceive(buffer)
End Sub

Private Sub Udp1_EndReceive(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureFtp.DatagramEventArgs) Handles Udp1.EndReceive
   
   ' Check for an Exception
   If e.Exception is Nothing Then
      ' Echo the data back using the Datagram object passed into the event.
      ' Datagram.Buffer = data received from client
      ' Datagram.RemoteEndPoint = address/port of client.
      Udp1.Send(e.Datagram.Buffer, e.Datagram.RemoteEndPoint)
   End If

   ' Start receiving next
   Dim buffer(Udp1.BufferSize) As Byte
   Udp1.BeginReceive(buffer)
   
End Sub
<span class="lang">[C#]</span> 
private void StartServer()
{			
   // Listen for datagrams on port 7.
   udp1.Open(7);

   // Begin an asynchronous Receive
   byte[] buffer = new byte[udp1.BufferSize];
   udp1.BeginReceive(buffer);
}

private void udp1_EndReceive(object sender, Dart.PowerTCP.SecureFtp.DatagramEventArgs e)
{
   // Check for an exception
   if(e.Exception == null)
   {
      // Echo the data back using the Datagram object passed into the event.
      // Datagram.Buffer = data received from client
      // Datagram.RemoteEndPoint = address/port of client.
      Datagram d = udp1.Send(e.Datagram.Buffer, e.Datagram.RemoteEndPoint);
   }		
   // Start receiving next
   byte[] buffer = new byte[udp1.BufferSize];
   udp1.BeginReceive(buffer);
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Udp.Send(System.Byte[],System.Net.IPEndPoint)">
            <summary>
				Send a datagram to the specified IPEndPoint.
			</summary><remarks>
				<p>Use the Udp.Send method to sent a datagram created from the data contained
				in <i>buffer</i> to the specified <i>host</i>.</p>
				<p>
				A UDP datagram provides little functionality over an IP datagram, adding a port 
				number field which allows multiplexing on the receiving host and checksum field
				which provides basic error handling.
				Unlike TCP, UDP datagrams are sent as a unit. If Udp.Send is called
				3 times to send 3 datagrams to a host, the receiving host will have 
				to call Udp.Receive 3 times. Also, the size of each datagram sent will equal
				the size of each datagram received by the receiving host. In addition, since 
				UDP is a connectionless protocol, any datagrams sent to the host are not 
				guarenteed to be delivered. Therefore, any required error checking (outside of UDP's checksum
				implementation) will have to be done by the application-layer protocol.
				</p>
				<p>To send a broadcast datagram, use "255.255.255.255" as the remote address. To sent 
				a multicast datagram, use the multicast group address as the remote address after first joining a multicast group by using Udp.JoinMulitcastGroup.
				</p>
			</remarks><returns>
				A Datagram object encapsulating the datagram sent.
			</returns><param name="buffer">A byte array containing the data to send.</param><param name="host">The System.Net.IPEndPoint representing the remote hosts's IP address and port.</param><exception cref="T:System.ArgumentNullException"><i>buffer</i> is null.</exception><exception cref="T:System.Net.Sockets.SocketException">The remote address is unknown, invalid, or unable to be resolved.</exception><exception cref="T:System.ArgumentOutOfRangeException">The remote port is out of the range of valid values.</exception>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates creating a UDP echo server application which listens for datagrams and echoes them back to the sender.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
   ' Listen for datagrams on port 7.
   Udp1.Open(7)

   ' Begin an asynchronous Receive
   Dim buffer(Udp1.BufferSize) As Byte
   Udp1.BeginReceive(buffer)
End Sub

Private Sub Udp1_EndReceive(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureFtp.DatagramEventArgs) Handles Udp1.EndReceive
   
   ' Check for an Exception
   If e.Exception is Nothing Then
      ' Echo the data back using the Datagram object passed into the event.
      ' Datagram.Buffer = data received from client
      ' Datagram.RemoteEndPoint = address/port of client.
      Udp1.Send(e.Datagram.Buffer, e.Datagram.RemoteEndPoint)
   End If

   ' Start receiving next
   Dim buffer(Udp1.BufferSize) As Byte
   Udp1.BeginReceive(buffer)
   
End Sub
<span class="lang">[C#]</span> 
private void StartServer()
{			
   // Listen for datagrams on port 7.
   udp1.Open(7);

   // Begin an asynchronous Receive
   byte[] buffer = new byte[udp1.BufferSize];
   udp1.BeginReceive(buffer);
}

private void udp1_EndReceive(object sender, Dart.PowerTCP.SecureFtp.DatagramEventArgs e)
{
   // Check for an exception
   if(e.Exception == null)
   {
      // Echo the data back using the Datagram object passed into the event.
      // Datagram.Buffer = data received from client
      // Datagram.RemoteEndPoint = address/port of client.
      Datagram d = udp1.Send(e.Datagram.Buffer, e.Datagram.RemoteEndPoint);
   }		
   // Start receiving next
   byte[] buffer = new byte[udp1.BufferSize];
   udp1.BeginReceive(buffer);
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Mail.Udp.Send(System.String,System.Net.IPEndPoint)">
            <summary>
				Send a datagram to the specified IPEndPoint.
			</summary><remarks>
				<p>Use the Udp.Send method to sent a datagram created from the data contained
				in <i>buffer</i> to the specified <i>host</i>. <i>buffer</i> is
				converted to a byte array before sending.</p>
				<p>
				A UDP datagram provides little functionality over an IP datagram, adding a port 
				number field which allows multiplexing on the receiving host and checksum field
				which provides basic error handling.
				Unlike TCP, UDP datagrams are sent as a unit. If Udp.Send is called
				3 times to send 3 datagrams to a host, the receiving host will have 
				to call Udp.Receive 3 times. Also, the size of each datagram sent will equal
				the size of each datagram received by the receiving host. In addition, since 
				UDP is a connectionless protocol, any datagrams sent to the host are not 
				guarenteed to be delivered. Therefore, any required error checking (outside of UDP's checksum
				implementation) will have to be done by the application-layer protocol.
				</p>
				<p>To send a broadcast datagram, use "255.255.255.255" as the remote address. To sent 
				a multicast datagram, use the multicast group address as the remote address after first joining a multicast group by using Udp.JoinMulitcastGroup.
				</p>
			</remarks><returns>
				A Datagram object encapsulating the datagram sent.
			</returns><param name="buffer">A string containing the data to send.</param><param name="host">The System.Net.IPEndPoint representing the remote hosts's IP address and port.</param><exception cref="T:System.ArgumentNullException"><i>buffer</i> is null.</exception><exception cref="T:System.Net.Sockets.SocketException">The remote address is unknown, invalid, or unable to be resolved.</exception><exception cref="T:System.ArgumentOutOfRangeException">The remote port is out of the range of valid values.</exception>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates creating a UDP echo server application which listens for datagrams and echoes them back to the sender.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
   ' Listen for datagrams on port 7.
   Udp1.Open(7)

   ' Begin an asynchronous Receive
   Dim buffer(Udp1.BufferSize) As Byte
   Udp1.BeginReceive(buffer)
End Sub

Private Sub Udp1_EndReceive(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureFtp.DatagramEventArgs) Handles Udp1.EndReceive
   
   ' Check for an Exception
   If e.Exception is Nothing Then
      ' Echo the data back using the Datagram object passed into the event.
      ' Datagram.Buffer = data received from client
      ' Datagram.RemoteEndPoint = address/port of client.
      Udp1.Send(e.Datagram.Buffer, e.Datagram.RemoteEndPoint)
   End If

   ' Start receiving next
   Dim buffer(Udp1.BufferSize) As Byte
   Udp1.BeginReceive(buffer)
   
End Sub
<span class="lang">[C#]</span> 
private void StartServer()
{			
   // Listen for datagrams on port 7.
   udp1.Open(7);

   // Begin an asynchronous Receive
   byte[] buffer = new byte[udp1.BufferSize];
   udp1.BeginReceive(buffer);
}

private void udp1_EndReceive(object sender, Dart.PowerTCP.SecureFtp.DatagramEventArgs e)
{
   // Check for an exception
   if(e.Exception == null)
   {
      // Echo the data back using the Datagram object passed into the event.
      // Datagram.Buffer = data received from client
      // Datagram.RemoteEndPoint = address/port of client.
      Datagram d = udp1.Send(e.Datagram.Buffer, e.Datagram.RemoteEndPoint);
   }		
   // Start receiving next
   byte[] buffer = new byte[udp1.BufferSize];
   udp1.BeginReceive(buffer);
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="E:Dart.PowerTCP.Mail.Udp.ActiveChanged">
            <summary>
			Raised when the value of the Object.Active property changes.
			</summary><remarks>
				<p>This event is raised when the value of the Object.Active property changes, which
				occurs when the object (usually either the Server component or Udp component)
				 either begins listening or stops listening for connections.
				Inside the event, check the Object.Active property see determine if the event
				which is the case.</p>
				<p>This event is useful because it allows action to be taken (for example, disabling 
				or enabling GUI elements) based on whether the object is actively listening or
				closed.
				</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates the Udp.ActiveChanged event</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub ActiveChangedTest()
   ' Create an IPEndPoint
   Dim ep As System.Net.IPEndPoint = New System.Net.IPEndPoint(System.Net.IPAddress.Parse("192.168.0.71"), 1111)

   ' Begin listening on the specified endpoint. The ActiveChanged event should be raised.
   Udp1.Open(ep)

   ' Stop listening. The ActiveChanged event should be raised again.
   Udp1.Close()
End Sub

Private Sub Udp1_ActiveChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles Udp1.ActiveChanged
   If Udp1.Active Then
      Debug.WriteLine("Listening on " + Udp1.LocalEndPoint.ToString())
   Else
      Debug.WriteLine("Not Listening")
   End If
End Sub
<span class="lang">[C#]</span> 
private void ActiveChangedTest()
{
   // Create an IPEndPoint
   System.Net.IPEndPoint ep = new System.Net.IPEndPoint(System.Net.IPAddress.Parse("192.168.0.71"), 1111);

   // Begin listening on the specified endpoint. The ActiveChanged event should be raised.
   udp1.Open(ep);

   // Stop listening. The ActiveChanged event should be raised again.
   udp1.Close();
}

private void udp1_ActiveChanged(object sender, System.EventArgs e)
{
   if(udp1.Active)
      Debug.WriteLine("Listening on " + udp1.LocalEndPoint.ToString());
   else
   {
      Debug.WriteLine("Not Listening")
   }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="E:Dart.PowerTCP.Mail.Udp.EndReceive">
            <summary>
            Raised when the Udp.BeginReceive request completes.
            </summary><remarks>
				<p>This event is raised when the asynchronous method call Udp.BeginReceive completes. A DatagramEventArgs object is passed into the event, containing information about the event, such
				as the datagram received.</p>
				<p>If any errors occurred during the asynchronous operation, they would be returned in the DatagramEventArgs object, check DatagramEventArgs.Exception to check for any exception.</p>
				<p>For more information on using events using PowerTCP.NET within the Visual Studio.NET environment, see the topic, Using Events In PowerTCP.</p>
				<p>If you are using the Udp component as a reference, you must create a method to handle the event yourself.</p>
				<p>This event MUST be implemented if you are using the Udp.BeginReceive method.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates creating a UDP echo server application which listens for datagrams and echoes them back to the sender.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
   ' Listen for datagrams on port 7.
   Udp1.Open(7)

   ' Begin an asynchronous Receive
   Dim buffer(Udp1.BufferSize) As Byte
   Udp1.BeginReceive(buffer)
End Sub

Private Sub Udp1_EndReceive(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureFtp.DatagramEventArgs) Handles Udp1.EndReceive
   
   ' Check for an Exception
   If e.Exception is Nothing Then
      ' Echo the data back using the Datagram object passed into the event.
      ' Datagram.Buffer = data received from client
      ' Datagram.RemoteEndPoint = address/port of client.
      Udp1.Send(e.Datagram.Buffer, e.Datagram.RemoteEndPoint)
   End If

   ' Start receiving next
   Dim buffer(Udp1.BufferSize) As Byte
   Udp1.BeginReceive(buffer)
   
End Sub
<span class="lang">[C#]</span> 
private void StartServer()
{			
   // Listen for datagrams on port 7.
   udp1.Open(7);

   // Begin an asynchronous Receive
   byte[] buffer = new byte[udp1.BufferSize];
   udp1.BeginReceive(buffer);
}

private void udp1_EndReceive(object sender, Dart.PowerTCP.SecureFtp.DatagramEventArgs e)
{
   // Check for an exception
   if(e.Exception == null)
   {
      // Echo the data back using the Datagram object passed into the event.
      // Datagram.Buffer = data received from client
      // Datagram.RemoteEndPoint = address/port of client.
      Datagram d = udp1.Send(e.Datagram.Buffer, e.Datagram.RemoteEndPoint);
   }		
   // Start receiving next
   byte[] buffer = new byte[udp1.BufferSize];
   udp1.BeginReceive(buffer);
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="E:Dart.PowerTCP.Mail.Udp.EndSend">
            <summary>
            Raised when the Udp.BeginSend request completes.
            </summary><remarks>
				<p>This event is raised when the asynchronous method call Udp.BeginSend completes. A DatagramEventArgs object is passed into the event, containing information about the event, such
				as the data sent.</p>
				<p>If any errors occurred during the asynchronous operation, they would be returned in the DatagramEventArgs object, check DatagramEventArgs.Exception to check for any exception.</p>
				<p>For more information on using events using PowerTCP.NET within the Visual Studio.NET environment, see the topic, Using Events In PowerTCP.</p>
				<p>If you are using the Udp component as a reference, you must create a method to handle the event yourself.</p>
				<p>This event MUST be implemented if you are using the Tcp.BeginSend method.</p>
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates sending data asynchronously.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub AsynchTest()
   ' Begin listening for datagrams.
   Udp1.Open(1111)

   ' Asynchronously send a datagram. EndSend event will be raised upon completion.
   Dim buffer As Byte() = System.Text.Encoding.Default.GetBytes("test")
   Udp1.BeginSend(buffer, "weezer", 8888)
End Sub

Private Sub Udp1_EndSend(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureFtp.DatagramEventArgs) Handles Udp1.EndSend
   If e.Exception Is Nothing Then
      Debug.WriteLine("Data sent: " + e.Datagram.ToString())
   Else
      Debug.WriteLine("Exception returned from event: " + e.Exception.ToString())
   End If
End Sub
<span class="lang">[C#]</span> 
private void AsynchTest()
{
    // Begin listening for datagrams.
    udp1.Open(1111);

    // Asynchronously send a datagram. EndSend event will be raised upon completion.
    byte[] buffer = System.Text.Encoding.Default.GetBytes("test");
    udp1.BeginSend(buffer, "MyEchoServer", 7);
}

private void udp1_EndSend(object sender, Dart.PowerTCP.SecureFtp.DatagramEventArgs e)
{
   if(e.Exception == null)
   {
      Debug.WriteLine("Data sent: " + e.Datagram.ToString());
   }
   else
   {
      Debug.WriteLine("Exception returned from event: " + e.Exception.ToString());
   }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="E:Dart.PowerTCP.Mail.Udp.Trace">
            <summary>
            Raised when data has been sent/received.
            </summary><remarks>
				<p>This event is raised when commands or data has been sent/received. If you are using a component which uses TCP as the
				transport protocol a SegmentEventArgs object is passed into the event containing any commands or data sent or received.
				If you are using a component which uses UDP as the transport protocol a DatagramEventArgs object is passed into the event containing any commands
				or data sent or received.</p>
				<p>The Object.RawTrace event always reports actual data sent/received over the socket. The Count
				of each segment reflects the number of bytes actually written and received.
				The Object.Trace event reports data sent/received at a higher level. For example, for the
				Telnet component, Object.Trace reports data sent/received, but does not report
				IAC option sequences that are processed by TelnetStream, whereas Object.RawTrace
				allows you to trace the actual data sent/received, including Telnet option
				commands.
				</p>
				<p>If you are using the PowerTCP component as a reference, you must create a method to handle the event yourself. For more information on using events using PowerTCP.NET within the Visual Studio.NET environment, see Using Events In PowerTCP.</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Udp.Active">
            <summary>
			Returns true when listening for datagrams.
		</summary><remarks>
				<p>After successfully calling Udp.Open, this property returns true.
			After calling Udp.Close or Udp.Dispose, this property will return false.
			</p>
				<p>When the value of this property changes, the Udp.ActiveChanged event is
			raised.
			</p>
			</remarks><value>
			true if the Udp component is actively listening for datagrams; false otherwise.
		</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates the Udp.ActiveChanged event</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub ActiveChangedTest()
   ' Create an IPEndPoint
   Dim ep As System.Net.IPEndPoint = New System.Net.IPEndPoint(System.Net.IPAddress.Parse("192.168.0.71"), 1111)

   ' Begin listening on the specified endpoint. The ActiveChanged event should be raised.
   Udp1.Open(ep)

   ' Stop listening. The ActiveChanged event should be raised again.
   Udp1.Close()
End Sub

Private Sub Udp1_ActiveChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles Udp1.ActiveChanged
   If Udp1.Active Then
      Debug.WriteLine("Listening on " + Udp1.LocalEndPoint.ToString())
   Else
      Debug.WriteLine("Not Listening")
   End If
End Sub
<span class="lang">[C#]</span> 
private void ActiveChangedTest()
{
   // Create an IPEndPoint
   System.Net.IPEndPoint ep = new System.Net.IPEndPoint(System.Net.IPAddress.Parse("192.168.0.71"), 1111);

   // Begin listening on the specified endpoint. The ActiveChanged event should be raised.
   udp1.Open(ep);

   // Stop listening. The ActiveChanged event should be raised again.
   udp1.Close();
}

private void udp1_ActiveChanged(object sender, System.EventArgs e)
{
   if(udp1.Active)
      Debug.WriteLine("Listening on " + udp1.LocalEndPoint.ToString());
   else
   {
      Debug.WriteLine("Not Listening")
   }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Udp.Available">
            <summary>
			Gets the total number of bytes available.
			</summary><remarks>
				<p>When datagrams are received, they are collected in system buffers and must be received using
			Udp.Receive. Udp.Available reflects the
			number of bytes of data that are available to be received.
			</p>
				<p>The number of bytes reported by this property may cross multiple datagrams, requiring multiple receives.</p>
			</remarks><value>An integer representing the number of bytes available to be received.</value>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Udp.Busy">
            <summary>
				Returns true if a method is currently in use. 
			</summary><remarks>
				<p>When used in PowerTCP Zip Compression for .NET, this property provides protection against accessing a method that is still processing a command.</p>
				<p>When used in an Internet communications component, this property provides protection against sending commands over a busy socket. For example, if the PowerTCP component is engaged in sending or receiving data, and another method is called that
				requires use of the same socket, a BusyException is thrown.</p>
				<p>The Object.BusyChanged event is raised whenever the value of this property changes.</p>
				<p>For Internet communications components, check this property within your code if you feel a new operation could be 
				attempted over a socket that is already engaged in sending or receiving data. This property is also 
				useful for displaying socket status to the user. For example, a "stoplight" could 
				be part of the user interface that would be red when the Object.Busy property is true, and 
				green when false.</p>
			</remarks><value>
				true if a method is currently is use, otherwise false
			</value>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Udp.Charset">
            <summary>
				Gets and sets the character set used for string/byte array conversions.
			</summary><value>
				A string representing the character set used.
			</value><remarks>
				<p>This value defaults to the language used on the runtime machine (accessible through
				System.Text.Encoding.Default.BodyName). Set this property
				to the desired character set string to override this behavior.
				An example charset for Kanji is "ISO-2022-JP", while standard ASCII is: "ISO-8859-1".
				</p>
				<p>When communicating with clients from other countries set this property based on the standard string defined for the language intended.
				This enables the International client to be able to properly decode the data.
				</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Udp.DoEvents">
            <summary>
				  Gets or sets a value that controls the processing of events during blocking method calls.
			</summary><remarks>
				<p>When performing a synchronous (blocking) method, PowerTCP will process user-interface events (such as window painting)
            if this property is set to true AND the current thread has an event message queue.
            If no message queue is present (such as on an ASP page or under any worker thread), the value of this property has no effect.
            This property is used only for synchronous methods. Object.DoEvents is not needed if using asynchronous methods because the asynchronous method will execute on a different thread, allowing the UI thread to continue working unblocked.</p>
				<p>For example, this property is beneficial when an interactive application is being used and the user may want to abort a currently processing operation by clicking an "Abort" button.
			If Object.DoEvents is set to false, this will not be possible.
			Set the Object.DoEvents property to true and the application will respond to other events (such as button clicks) during synchronous operations.
			</p>
			</remarks><value>
				true if user-interface events should be processed during synchronous method calls; otherwise, false. The default value is true.
			</value>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Udp.LocalEndPoint">
            <summary>
             Gets the IP interface and port currently in use.
            </summary><value>
            The local IPEndPoint that the Udp object is using for communications.
            </value><remarks>
			This property exposes the local IP address and port being used. If a dot address or
			host name was specified for the Udp.Open operation, then the resolved dot address is shown
			here. If no address or name was specified, then an address of 0.0.0.0 is reported.
			If a local port was specifed for the Udp.Open operation, then the port is shown
			here. If no port was specified, then the "ephemeral" port chosen by the system will
			be shown here. 
			</remarks>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates the Udp.ActiveChanged event</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub ActiveChangedTest()
   ' Create an IPEndPoint
   Dim ep As System.Net.IPEndPoint = New System.Net.IPEndPoint(System.Net.IPAddress.Parse("192.168.0.71"), 1111)

   ' Begin listening on the specified endpoint. The ActiveChanged event should be raised.
   Udp1.Open(ep)

   ' Stop listening. The ActiveChanged event should be raised again.
   Udp1.Close()
End Sub

Private Sub Udp1_ActiveChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles Udp1.ActiveChanged
   If Udp1.Active Then
      Debug.WriteLine("Listening on " + Udp1.LocalEndPoint.ToString())
   Else
      Debug.WriteLine("Not Listening")
   End If
End Sub
<span class="lang">[C#]</span> 
private void ActiveChangedTest()
{
   // Create an IPEndPoint
   System.Net.IPEndPoint ep = new System.Net.IPEndPoint(System.Net.IPAddress.Parse("192.168.0.71"), 1111);

   // Begin listening on the specified endpoint. The ActiveChanged event should be raised.
   udp1.Open(ep);

   // Stop listening. The ActiveChanged event should be raised again.
   udp1.Close();
}

private void udp1_ActiveChanged(object sender, System.EventArgs e)
{
   if(udp1.Active)
      Debug.WriteLine("Listening on " + udp1.LocalEndPoint.ToString());
   else
   {
      Debug.WriteLine("Not Listening")
   }
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Udp.MulticastInterface">
            <summary>
				Gets or sets the host interface to use when sending multicast datagrams.
			</summary><remarks>
				<p>This property is useful if the host has multiple interfaces and you wish to explicitly 
				set the interface to use when sending datagrams to multicast addresses.
				</p>
			</remarks><value>
            The local IPEndPoint that the Udp object is using to send/receive multicasted datagrams.
            </value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using multicasting functionality to create a simple chat client.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' The IPAddress representing the multicast address.
Private add As System.Net.IPAddress = System.Net.IPAddress.Parse("239.255.255.254")

Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
   ' Allocate a socket for listening for datagrams.
   Udp1.Open("MyHost", 1111)

   ' Join the specified multicast group.
   Udp1.JoinMulticastGroup(add)

   ' Specify an interface to use for multicasting (assuming the host has multiple interfaces)
   Udp1.MulticastInterface = System.Net.IPAddress.Parse("192.168.1.2")

   ' Increase the datagram TTL for multicasting
   Udp1.MulticastTimeToLive = 2

   ' Begin asynchronously receiving data
   Dim buffer(Udp1.BufferSize) As Byte
   Udp1.BeginReceive(buffer)
End Sub

Private Sub Udp1_EndReceive(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureFtp.DatagramEventArgs) Handles Udp1.EndReceive
   ' Data recived. Display 
   txtData.Text += e.Datagram.ToString() + vbCrLF
   			
   ' Begin asynchronously receiving data
   Dim buffer(Udp1.BufferSize) As Byte
   Udp1.BeginReceive(buffer)
End Sub

Private Sub cmdSend_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdSend.Click
   ' Send button clicked. Send the contents of txtSend.
   Udp1.Send(txtSend.Text, add.ToString(), 1111)
End Sub

Private Sub cmdLeave_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdLeave.Click
   ' Leave group button clicked. Leave the group.
   Udp1.LeaveMulticastGroup(add)
End Sub
<span class="lang">[C#]</span> 
// The IPAddress representing the multicast address.
private System.Net.IPAddress add = System.Net.IPAddress.Parse("239.255.255.254");

private void Form1_Load(object sender, System.EventArgs e)
{
   // Allocate a socket for listening for datagrams.
   udp1.Open("MyHost", 1111);

   // Join the specified multicast group.
   udp1.JoinMulticastGroup(add);

   // Specify an interface for multicasting (assuming the host has multiple interfaces)
   udp1.MulticastInterface = System.Net.IPAddress.Parse("192.168.1.2");

   // Increase the datagram TTL for multicasting
   udp1.MulticastTimeToLive = 2;

   // Begin asynchronously receiving data
   byte[] buffer = new byte[udp1.BufferSize];
   udp1.BeginReceive(buffer);
}

private void udp1_EndReceive(object sender, Dart.PowerTCP.SecureFtp.DatagramEventArgs e)
{
   // Data recived. Display 
   txtData.Text += e.Datagram.ToString() + "\r\n";
   			
   // Begin asynchronously receiving data
   byte[] buffer = new byte[udp1.BufferSize];
   udp1.BeginReceive(buffer);
}

private void cmdSend_Click(object sender, System.EventArgs e)
{
   // Send button clicked. Send the contents of txtSend.
   udp1.Send(txtSend.Text, add.ToString(), 1111);
}

private void cmdLeave_Click(object sender, System.EventArgs e)
{
   // Leave group button clicked. Leave the group.
   udp1.LeaveMulticastGroup(add);
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Udp.MulticastTimeToLive">
            <summary>
			Gets and sets the IP multicast time-to-live used when datagrams are sent to multicast addresses.
			</summary><remarks>
				<p>The Udp.MulticastTimeToLive property specifies the number of routers (hops) that multicast 
			datagrams are permitted to pass through before expiring on the network. For each router (hop), 
			this property is decremented by 1. When this property reaches 0, each multicast datagram expires 
			and is no longer forwarded through the network to other subnets. </p>
			</remarks><value>
			An integer value representing the time-to-live value used when datagrams are sent to multicast addresses.
			</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates using multicasting functionality to create a simple chat client.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
' The IPAddress representing the multicast address.
Private add As System.Net.IPAddress = System.Net.IPAddress.Parse("239.255.255.254")

Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
   ' Allocate a socket for listening for datagrams.
   Udp1.Open("MyHost", 1111)

   ' Join the specified multicast group.
   Udp1.JoinMulticastGroup(add)

   ' Specify an interface to use for multicasting (assuming the host has multiple interfaces)
   Udp1.MulticastInterface = System.Net.IPAddress.Parse("192.168.1.2")

   ' Increase the datagram TTL for multicasting
   Udp1.MulticastTimeToLive = 2

   ' Begin asynchronously receiving data
   Dim buffer(Udp1.BufferSize) As Byte
   Udp1.BeginReceive(buffer)
End Sub

Private Sub Udp1_EndReceive(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureFtp.DatagramEventArgs) Handles Udp1.EndReceive
   ' Data recived. Display 
   txtData.Text += e.Datagram.ToString() + vbCrLF
   			
   ' Begin asynchronously receiving data
   Dim buffer(Udp1.BufferSize) As Byte
   Udp1.BeginReceive(buffer)
End Sub

Private Sub cmdSend_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdSend.Click
   ' Send button clicked. Send the contents of txtSend.
   Udp1.Send(txtSend.Text, add.ToString(), 1111)
End Sub

Private Sub cmdLeave_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles cmdLeave.Click
   ' Leave group button clicked. Leave the group.
   Udp1.LeaveMulticastGroup(add)
End Sub
<span class="lang">[C#]</span> 
// The IPAddress representing the multicast address.
private System.Net.IPAddress add = System.Net.IPAddress.Parse("239.255.255.254");

private void Form1_Load(object sender, System.EventArgs e)
{
   // Allocate a socket for listening for datagrams.
   udp1.Open("MyHost", 1111);

   // Join the specified multicast group.
   udp1.JoinMulticastGroup(add);

   // Specify an interface for multicasting (assuming the host has multiple interfaces)
   udp1.MulticastInterface = System.Net.IPAddress.Parse("192.168.1.2");

   // Increase the datagram TTL for multicasting
   udp1.MulticastTimeToLive = 2;

   // Begin asynchronously receiving data
   byte[] buffer = new byte[udp1.BufferSize];
   udp1.BeginReceive(buffer);
}

private void udp1_EndReceive(object sender, Dart.PowerTCP.SecureFtp.DatagramEventArgs e)
{
   // Data recived. Display 
   txtData.Text += e.Datagram.ToString() + "\r\n";
   			
   // Begin asynchronously receiving data
   byte[] buffer = new byte[udp1.BufferSize];
   udp1.BeginReceive(buffer);
}

private void cmdSend_Click(object sender, System.EventArgs e)
{
   // Send button clicked. Send the contents of txtSend.
   udp1.Send(txtSend.Text, add.ToString(), 1111);
}

private void cmdLeave_Click(object sender, System.EventArgs e)
{
   // Leave group button clicked. Leave the group.
   udp1.LeaveMulticastGroup(add);
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Udp.Timeout">
            <summary>
				Specifies the maximum number of milliseconds to wait for responses to commands or time between data buffer transfers.
			</summary><remarks>
				<p>After connecting to a server, this value is used to establish the period of time to wait for
			server responses. During data transfer operations, a <a href="ms-help://MS.MSDNVS/cpref/html/frlrfSystemNetSocketsSocketExceptionClassTopic.htm">SocketException</a> will
			be thrown if any data buffer transfer
			operation does not complete within the timeout period.</p>
			</remarks><value>
				 An integer specifying the maximum number of milliseconds to wait for responses to commands.
			</value>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Udp.BufferSize">
            <summary>
            Gets and sets the size of the system receive buffer.
            </summary><remarks>
				<p>This property sets the size of the system receive buffer.</p>
			</remarks><value>Size of the system receive buffer in bytes. The default is 8192.</value>
            <example>
				<p><span class="lang">[Visual Basic, C#]</span> The following example demonstrates creating a UDP echo server application which listens for datagrams and echoes them back to the sender.</p>
				<pre class="code">
<span class="lang">[Visual Basic]</span> 
Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
   ' Listen for datagrams on port 7.
   Udp1.Open(7)

   ' Begin an asynchronous Receive
   Dim buffer(Udp1.BufferSize) As Byte
   Udp1.BeginReceive(buffer)
End Sub

Private Sub Udp1_EndReceive(ByVal sender As Object, ByVal e As Dart.PowerTCP.SecureFtp.DatagramEventArgs) Handles Udp1.EndReceive
   
   ' Check for an Exception
   If e.Exception is Nothing Then
      ' Echo the data back using the Datagram object passed into the event.
      ' Datagram.Buffer = data received from client
      ' Datagram.RemoteEndPoint = address/port of client.
      Udp1.Send(e.Datagram.Buffer, e.Datagram.RemoteEndPoint)
   End If

   ' Start receiving next
   Dim buffer(Udp1.BufferSize) As Byte
   Udp1.BeginReceive(buffer)
   
End Sub
<span class="lang">[C#]</span> 
private void StartServer()
{			
   // Listen for datagrams on port 7.
   udp1.Open(7);

   // Begin an asynchronous Receive
   byte[] buffer = new byte[udp1.BufferSize];
   udp1.BeginReceive(buffer);
}

private void udp1_EndReceive(object sender, Dart.PowerTCP.SecureFtp.DatagramEventArgs e)
{
   // Check for an exception
   if(e.Exception == null)
   {
      // Echo the data back using the Datagram object passed into the event.
      // Datagram.Buffer = data received from client
      // Datagram.RemoteEndPoint = address/port of client.
      Datagram d = udp1.Send(e.Datagram.Buffer, e.Datagram.RemoteEndPoint);
   }		
   // Start receiving next
   byte[] buffer = new byte[udp1.BufferSize];
   udp1.BeginReceive(buffer);
}
</pre>
				<p><span class="lang">[C++, JScript]</span> No example is available for C++ or JScript. To view a Visual Basic or C# example, click the Language Filter button <img src="resources/filter1a.gif" alt="Language Filter" border="0"/> in the upper-left corner of the page.</p>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Udp.Socket">
            <summary>
			Returns the instance of the System.Net.Sockets.Socket that is accepting connections.
			</summary><remarks>
				<p>The System.Net.Sockets.Socket instance used by some components (such as the Server component
				and Udp component) is exposed through 
				this property. It is not recommended to use this property to listen for or respond to connections.
				To do this, use high-level methods such as Server.Listen or Udp.Open.
				</p>
			</remarks><value>
			The System.Net.Sockets.Socket that is accepting connections.
			</value>&gt;
        </member>
        <member name="P:Dart.PowerTCP.Mail.Udp.SynchronizingObject">
            <summary>Set this object to automatically control thread marshalling between worker threads and the main UI thread.</summary><value>
				If used, the main UI thread object; null if unused.
			</value><remarks>
				<p>Any application that (1) uses multithreading (for example, an application which uses an asynchronous BeginXXX method)
				and (2) must update a shared UI element on the main UI thread (such as a ListView object) from one of these worker threads must set this
				property to the value of the main UI thread object. If the application meets both of these requirements and
				this property is NOT set, you may see strange behavior in your application (such as strange exceptions or improper UI element values).</p>
				<p>If you do not know whether or not you need to use this property, simply take the failsafe
				approach when programming Windows applications and always set this property to the Main Form object.
				If any thread marshalling has to occur between a worker thread and the UI thread, it will occur automatically.</p>
				<p>Provides data for the CollectionChanged event.


					<b>NOTE for server implementations:</b> If you are using a PowerTCP server component to build a server application, you
				do not want to set this property (as it will cause the server application to become single-threaded). Instead, you want to use
				the Control.BeginInvoke method to thread-marshall to the main UI thread (see any of the installed sample server applications for an example of this).</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Mail.Udp.Tag">
            <summary>
			Gets or sets an object reference that can be used to associate this instance with any other.
		</summary><remarks>
			Use this property to associate any type derived from Object class with the component. 
			A common use for the <B>Tag</B> property is to store data that is closely associated with the component.
		</remarks><value>
		Any object that is associated with the component; null if no objects are 
		associated with the component.
		</value><summary>
            Gets or sets an object reference that can be used to associate this instance with any other.
            </summary><value>
            Any object that is associated with the object, <b>null</b> if no objects are associated with the object
            </value><remarks>
				<p>
			 Use this property to associate any object with the object.				
            </p>
			</remarks>
        </member>
        <member name="T:UdpLicenseProvider">
            <summary>
            Summary description for TcpLicenseProvider.
            </summary>
        </member>
    </members>
</doc>
